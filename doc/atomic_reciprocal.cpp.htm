<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Reciprocal as an Atomic Operation: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Reciprocal as an Atomic Operation: Example and Test">
<meta name="keywords" id="keywords" content=" reciprocal atomic operation: example test set_sparsity_enum theory sparsity start class definition constructor forward reverse for_sparse_jac rev_sparse_jac rev_sparse_hes end use function recording ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_atomic_reciprocal.cpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://github.com/bradbell/cppad" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="atomic_norm_sq.cpp.htm" target="_top">Prev</a>
</td><td><a href="atomic_set_sparsity.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>AD</option>
<option>ADValued</option>
<option>atomic</option>
<option>atomic_base</option>
<option>atomic_reciprocal.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>ADValued-&gt;</option>
<option>Arithmetic</option>
<option>unary_standard_math</option>
<option>binary_math</option>
<option>CondExp</option>
<option>Discrete</option>
<option>numeric_limits</option>
<option>atomic</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>atomic-&gt;</option>
<option>checkpoint</option>
<option>atomic_base</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>atomic_base-&gt;</option>
<option>atomic_ctor</option>
<option>atomic_option</option>
<option>atomic_afun</option>
<option>atomic_forward</option>
<option>atomic_reverse</option>
<option>atomic_for_sparse_jac</option>
<option>atomic_rev_sparse_jac</option>
<option>atomic_for_sparse_hes</option>
<option>atomic_rev_sparse_hes</option>
<option>atomic_base_clear</option>
<option>atomic_get_started.cpp</option>
<option>atomic_norm_sq.cpp</option>
<option>atomic_reciprocal.cpp</option>
<option>atomic_set_sparsity.cpp</option>
<option>atomic_tangent.cpp</option>
<option>atomic_eigen_mat_mul.cpp</option>
<option>atomic_eigen_mat_inv.cpp</option>
<option>atomic_eigen_cholesky.cpp</option>
<option>atomic_mat_mul.cpp</option>
</select>
</td>
<td>atomic_reciprocal.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Theory</option>
<option>sparsity</option>
<option>Start Class Definition</option>
<option>Constructor</option>
<option>forward</option>
<option>reverse</option>
<option>for_sparse_jac</option>
<option>rev_sparse_jac</option>
<option>rev_sparse_hes</option>
<option>End Class Definition</option>
<option>Use Atomic Function</option>
<option>---..Constructor</option>
<option>---..Recording</option>
<option>---..forward</option>
<option>---..reverse</option>
<option>---..for_sparse_jac</option>
<option>---..rev_sparse_jac</option>
<option>---..rev_sparse_hes</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<center><b><big><big>Reciprocal as an Atomic Operation: Example and Test</big></big></b></center>
<br>
<b><big><a name="Theory" id="Theory">Theory</a></big></b>
<br>
This example demonstrates using <a href="atomic_base.htm" target="_top"><span style='white-space: nowrap'>atomic_base</span></a>

to define the operation
<small>@(@
f : \B{R}^n \rightarrow \B{R}^m
@)@</small> where
<small>@(@
n = 1
@)@</small>, <small>@(@
m = 1
@)@</small>, and <small>@(@
f(x) = 1 / x
@)@</small>.

<br>
<br>
<b><big><a name="sparsity" id="sparsity">sparsity</a></big></b>
<br>
This example only uses set sparsity patterns.



<br>
<br>
<b><big><a name="Start Class Definition" id="Start Class Definition">Start Class Definition</a></big></b>

<pre><tt><b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/cppad.hpp&gt;</font>
<b><font color="#0000FF">namespace</font></b> <font color="#FF0000">{</font>           <i><font color="#9A1900">// isolate items below to this file</font></i>
<b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">;</font>  <i><font color="#9A1900">// abbreviate as vector</font></i>
<i><font color="#9A1900">//</font></i>
<i><font color="#9A1900">// a utility to compute the union of two sets.</font></i>
<b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>set_union<font color="#990000">;</font>
<i><font color="#9A1900">//</font></i>
<b><font color="#0000FF">class</font></b> <font color="#008080">atomic_reciprocal</font> <font color="#990000">:</font> <b><font color="#0000FF">public</font></b> CppAD<font color="#990000">::</font>atomic_base<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;</font> <font color="#FF0000">{</font></tt></pre>
<br>
<b><big><a name="Constructor" id="Constructor">Constructor</a></big></b>

<pre><tt><b><font color="#0000FF">public</font></b><font color="#990000">:</font>
     <i><font color="#9A1900">// constructor (could use const char* for name)</font></i>
     <b><font color="#000000">atomic_reciprocal</font></b><font color="#990000">(</font><b><font color="#0000FF">const</font></b> std<font color="#990000">::</font>string<font color="#990000">&amp;</font> name<font color="#990000">)</font> <font color="#990000">:</font>
     <i><font color="#9A1900">// this exmaple only uses set sparsity patterns</font></i>
     CppAD<font color="#990000">::</font>atomic_base<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;(</font>name<font color="#990000">,</font> atomic_base<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;::</font>set_sparsity_enum<font color="#990000">)</font>
     <font color="#FF0000">{</font> <font color="#FF0000">}</font>
<b><font color="#0000FF">private</font></b><font color="#990000">:</font></tt></pre>
<br>
<b><big><a name="forward" id="forward">forward</a></big></b>

<pre><tt>     <i><font color="#9A1900">// forward mode routine called by CppAD</font></i>
     <b><font color="#0000FF">virtual</font></b> <font color="#009900">bool</font> <b><font color="#000000">forward</font></b><font color="#990000">(</font>
          <font color="#008080">size_t</font>                    p <font color="#990000">,</font>
          <font color="#008080">size_t</font>                    q <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>      vx <font color="#990000">,</font>
                vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>      vy <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>    tx <font color="#990000">,</font>
                vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>    ty
     <font color="#990000">)</font>
     <font color="#FF0000">{</font>
<b><font color="#000080"># ifndef</font></b> NDEBUG
          <font color="#008080">size_t</font> n <font color="#990000">=</font> tx<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">/</font> <font color="#990000">(</font>q <font color="#990000">+</font> <font color="#993399">1</font><font color="#990000">);</font>
          <font color="#008080">size_t</font> m <font color="#990000">=</font> ty<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">/</font> <font color="#990000">(</font>q <font color="#990000">+</font> <font color="#993399">1</font><font color="#990000">);</font>
<b><font color="#000080"># endif</font></b>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> n <font color="#990000">==</font> <font color="#993399">1</font> <font color="#990000">);</font>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> m <font color="#990000">==</font> <font color="#993399">1</font> <font color="#990000">);</font>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> p <font color="#990000">&lt;=</font> q <font color="#990000">);</font>

          <i><font color="#9A1900">// return flag</font></i>
          <font color="#009900">bool</font> ok <font color="#990000">=</font> q <font color="#990000">&lt;=</font> <font color="#993399">2</font><font color="#990000">;</font>

          <i><font color="#9A1900">// check for defining variable information</font></i>
          <i><font color="#9A1900">// This case must always be implemented</font></i>
          <b><font color="#0000FF">if</font></b><font color="#990000">(</font> vx<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">&gt;</font> <font color="#993399">0</font> <font color="#990000">)</font>
               vy<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> vx<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">];</font>

          <i><font color="#9A1900">// Order zero forward mode.</font></i>
          <i><font color="#9A1900">// This case must always be implemented</font></i>
          <i><font color="#9A1900">// y^0 = f( x^0 ) = 1 / x^0</font></i>
          <font color="#009900">double</font> f <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">.</font> <font color="#990000">/</font> tx<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">];</font>
          <b><font color="#0000FF">if</font></b><font color="#990000">(</font> p <font color="#990000">&lt;=</font> <font color="#993399">0</font> <font color="#990000">)</font>
               ty<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> f<font color="#990000">;</font>
          <b><font color="#0000FF">if</font></b><font color="#990000">(</font> q <font color="#990000">&lt;=</font> <font color="#993399">0</font> <font color="#990000">)</font>
               <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> vx<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">0</font> <font color="#990000">);</font>

          <i><font color="#9A1900">// Order one forward mode.</font></i>
          <i><font color="#9A1900">// This case needed if first order forward mode is used.</font></i>
          <i><font color="#9A1900">// y^1 = f'( x^0 ) x^1</font></i>
          <font color="#009900">double</font> fp <font color="#990000">=</font> <font color="#990000">-</font> f <font color="#990000">/</font> tx<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">];</font>
          <b><font color="#0000FF">if</font></b><font color="#990000">(</font> p <font color="#990000">&lt;=</font> <font color="#993399">1</font> <font color="#990000">)</font>
               ty<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">=</font> fp <font color="#990000">*</font> tx<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">];</font>
          <b><font color="#0000FF">if</font></b><font color="#990000">(</font> q <font color="#990000">&lt;=</font> <font color="#993399">1</font> <font color="#990000">)</font>
               <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>

          <i><font color="#9A1900">// Order two forward mode.</font></i>
          <i><font color="#9A1900">// This case needed if second order forward mode is used.</font></i>
          <i><font color="#9A1900">// Y''(t) = X'(t)^\R{T} f''[X(t)] X'(t) + f'[X(t)] X''(t)</font></i>
          <i><font color="#9A1900">// 2 y^2  = x^1 * f''( x^0 ) x^1 + 2 f'( x^0 ) x^2</font></i>
          <font color="#009900">double</font> fpp  <font color="#990000">=</font> <font color="#990000">-</font> <font color="#993399">2.0</font> <font color="#990000">*</font> fp <font color="#990000">/</font> tx<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">];</font>
          ty<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">]</font> <font color="#990000">=</font> tx<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">*</font> fpp <font color="#990000">*</font> tx<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">/</font> <font color="#993399">2.0</font> <font color="#990000">+</font> fp <font color="#990000">*</font> tx<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">];</font>
          <b><font color="#0000FF">if</font></b><font color="#990000">(</font> q <font color="#990000">&lt;=</font> <font color="#993399">2</font> <font color="#990000">)</font>
               <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>

          <i><font color="#9A1900">// Assume we are not using forward mode with order &gt; 2</font></i>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> <font color="#990000">!</font> ok <font color="#990000">);</font>
          <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
     <font color="#FF0000">}</font></tt></pre>
<br>
<b><big><a name="reverse" id="reverse">reverse</a></big></b>

<pre><tt>     <i><font color="#9A1900">// reverse mode routine called by CppAD</font></i>
     <b><font color="#0000FF">virtual</font></b> <font color="#009900">bool</font> <b><font color="#000000">reverse</font></b><font color="#990000">(</font>
          <font color="#008080">size_t</font>                    q <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>    tx <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>    ty <font color="#990000">,</font>
                vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>    px <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>    py
     <font color="#990000">)</font>
     <font color="#FF0000">{</font>
<b><font color="#000080"># ifndef</font></b> NDEBUG
          <font color="#008080">size_t</font> n <font color="#990000">=</font> tx<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">/</font> <font color="#990000">(</font>q <font color="#990000">+</font> <font color="#993399">1</font><font color="#990000">);</font>
          <font color="#008080">size_t</font> m <font color="#990000">=</font> ty<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">/</font> <font color="#990000">(</font>q <font color="#990000">+</font> <font color="#993399">1</font><font color="#990000">);</font>
<b><font color="#000080"># endif</font></b>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> px<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> n <font color="#990000">*</font> <font color="#990000">(</font>q <font color="#990000">+</font> <font color="#993399">1</font><font color="#990000">)</font> <font color="#990000">);</font>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> py<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> m <font color="#990000">*</font> <font color="#990000">(</font>q <font color="#990000">+</font> <font color="#993399">1</font><font color="#990000">)</font> <font color="#990000">);</font>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> n <font color="#990000">==</font> <font color="#993399">1</font> <font color="#990000">);</font>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> m <font color="#990000">==</font> <font color="#993399">1</font> <font color="#990000">);</font>
          <font color="#009900">bool</font> ok <font color="#990000">=</font> q <font color="#990000">&lt;=</font> <font color="#993399">2</font><font color="#990000">;</font>

          <font color="#009900">double</font> f<font color="#990000">,</font> fp<font color="#990000">,</font> fpp<font color="#990000">,</font> fppp<font color="#990000">;</font>
          <b><font color="#0000FF">switch</font></b><font color="#990000">(</font>q<font color="#990000">)</font>
          <font color="#FF0000">{</font>    <b><font color="#0000FF">case</font></b> <font color="#993399">0</font><font color="#990000">:</font>
               <i><font color="#9A1900">// This case needed if first order reverse mode is used</font></i>
               <i><font color="#9A1900">// reverse: F^0 ( tx ) = y^0 = f( x^0 )</font></i>
               f     <font color="#990000">=</font> ty<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">];</font>
               fp    <font color="#990000">=</font> <font color="#990000">-</font> f <font color="#990000">/</font> tx<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">];</font>
               px<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> py<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">*</font> fp<font color="#990000">;;</font>
               <b><font color="#000000">assert</font></b><font color="#990000">(</font>ok<font color="#990000">);</font>
               <b><font color="#0000FF">break</font></b><font color="#990000">;</font>

               <b><font color="#0000FF">case</font></b> <font color="#993399">1</font><font color="#990000">:</font>
               <i><font color="#9A1900">// This case needed if second order reverse mode is used</font></i>
               <i><font color="#9A1900">// reverse: F^1 ( tx ) = y^1 = f'( x^0 ) x^1</font></i>
               f      <font color="#990000">=</font> ty<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">];</font>
               fp     <font color="#990000">=</font> <font color="#990000">-</font> f <font color="#990000">/</font> tx<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">];</font>
               fpp    <font color="#990000">=</font> <font color="#990000">-</font> <font color="#993399">2.0</font> <font color="#990000">*</font> fp <font color="#990000">/</font> tx<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">];</font>
               px<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font>  <font color="#990000">=</font> py<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">*</font> fp<font color="#990000">;</font>
               px<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font>  <font color="#990000">=</font> py<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">*</font> fpp <font color="#990000">*</font> tx<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">];</font>
               <i><font color="#9A1900">// reverse: F^0 ( tx ) = y^0 = f( x^0 );</font></i>
               px<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">+=</font> py<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">*</font> fp<font color="#990000">;</font>
               <b><font color="#000000">assert</font></b><font color="#990000">(</font>ok<font color="#990000">);</font>
               <b><font color="#0000FF">break</font></b><font color="#990000">;</font>

               <b><font color="#0000FF">case</font></b> <font color="#993399">2</font><font color="#990000">:</font>
               <i><font color="#9A1900">// This needed if third order reverse mode is used</font></i>
               <i><font color="#9A1900">// reverse: F^2 ( tx ) = y^2 =</font></i>
               <i><font color="#9A1900">//          = x^1 * f''( x^0 ) x^1 / 2 + f'( x^0 ) x^2</font></i>
               f      <font color="#990000">=</font> ty<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">];</font>
               fp     <font color="#990000">=</font> <font color="#990000">-</font> f <font color="#990000">/</font> tx<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">];</font>
               fpp    <font color="#990000">=</font> <font color="#990000">-</font> <font color="#993399">2.0</font> <font color="#990000">*</font> fp <font color="#990000">/</font> tx<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">];</font>
               fppp   <font color="#990000">=</font> <font color="#990000">-</font> <font color="#993399">3.0</font> <font color="#990000">*</font> fpp <font color="#990000">/</font> tx<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">];</font>
               px<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">]</font>  <font color="#990000">=</font> py<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">]</font> <font color="#990000">*</font> fp<font color="#990000">;</font>
               px<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font>  <font color="#990000">=</font> py<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">]</font> <font color="#990000">*</font> fpp <font color="#990000">*</font> tx<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">];</font>
               px<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font>  <font color="#990000">=</font> py<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">]</font> <font color="#990000">*</font> tx<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">*</font> fppp <font color="#990000">*</font> tx<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">/</font> <font color="#993399">2.0</font> <font color="#990000">+</font> fpp <font color="#990000">*</font> tx<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">];</font>
               <i><font color="#9A1900">// reverse: F^1 ( tx ) = y^1 = f'( x^0 ) x^1</font></i>
               px<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">+=</font> py<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">*</font> fp<font color="#990000">;</font>
               px<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">+=</font> py<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">*</font> fpp <font color="#990000">*</font> tx<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">];</font>
               <i><font color="#9A1900">// reverse: F^0 ( tx ) = y^0 = f( x^0 );</font></i>
               px<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">+=</font> py<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">*</font> fp<font color="#990000">;</font>
               <b><font color="#000000">assert</font></b><font color="#990000">(</font>ok<font color="#990000">);</font>
               <b><font color="#0000FF">break</font></b><font color="#990000">;</font>

<b><font color="#008080">               default:</font></b>
               <b><font color="#000000">assert</font></b><font color="#990000">(!</font>ok<font color="#990000">);</font>
          <font color="#FF0000">}</font>
          <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
     <font color="#FF0000">}</font></tt></pre>
<br>
<b><big><a name="for_sparse_jac" id="for_sparse_jac">for_sparse_jac</a></big></b>

<pre><tt>     <i><font color="#9A1900">// forward Jacobian set sparsity routine called by CppAD</font></i>
     <b><font color="#0000FF">virtual</font></b> <font color="#009900">bool</font> <b><font color="#000000">for_sparse_jac</font></b><font color="#990000">(</font>
          <font color="#008080">size_t</font>                                p <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font> std<font color="#990000">::</font>set<font color="#990000">&lt;</font>size_t<font color="#990000">&gt;</font> <font color="#990000">&gt;&amp;</font>     r <font color="#990000">,</font>
                vector<font color="#990000">&lt;</font> std<font color="#990000">::</font>set<font color="#990000">&lt;</font>size_t<font color="#990000">&gt;</font> <font color="#990000">&gt;&amp;</font>     s <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>                 x <font color="#990000">)</font>
     <font color="#FF0000">{</font>    <i><font color="#9A1900">// This function needed if using f.ForSparseJac</font></i>
<b><font color="#000080"># ifndef</font></b> NDEBUG
          <font color="#008080">size_t</font> n <font color="#990000">=</font> r<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font>
          <font color="#008080">size_t</font> m <font color="#990000">=</font> s<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font>
<b><font color="#000080"># endif</font></b>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> n <font color="#990000">==</font> x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">);</font>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> n <font color="#990000">==</font> <font color="#993399">1</font> <font color="#990000">);</font>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> m <font color="#990000">==</font> <font color="#993399">1</font> <font color="#990000">);</font>

          <i><font color="#9A1900">// sparsity for S(x) = f'(x) * R is same as sparsity for R</font></i>
          s<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> r<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">];</font>

          <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
     <font color="#FF0000">}</font></tt></pre>
<br>
<b><big><a name="rev_sparse_jac" id="rev_sparse_jac">rev_sparse_jac</a></big></b>

<pre><tt>     <i><font color="#9A1900">// reverse Jacobian set sparsity routine called by CppAD</font></i>
     <b><font color="#0000FF">virtual</font></b> <font color="#009900">bool</font> <b><font color="#000000">rev_sparse_jac</font></b><font color="#990000">(</font>
          <font color="#008080">size_t</font>                                p  <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font> std<font color="#990000">::</font>set<font color="#990000">&lt;</font>size_t<font color="#990000">&gt;</font> <font color="#990000">&gt;&amp;</font>     rt <font color="#990000">,</font>
                vector<font color="#990000">&lt;</font> std<font color="#990000">::</font>set<font color="#990000">&lt;</font>size_t<font color="#990000">&gt;</font> <font color="#990000">&gt;&amp;</font>     st <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>                 x  <font color="#990000">)</font>
     <font color="#FF0000">{</font>    <i><font color="#9A1900">// This function needed if using RevSparseJac or optimize</font></i>
<b><font color="#000080"># ifndef</font></b> NDEBUG
          <font color="#008080">size_t</font> n <font color="#990000">=</font> st<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font>
          <font color="#008080">size_t</font> m <font color="#990000">=</font> rt<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font>
<b><font color="#000080"># endif</font></b>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> n <font color="#990000">==</font> x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">);</font>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> n <font color="#990000">==</font> <font color="#993399">1</font> <font color="#990000">);</font>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> m <font color="#990000">==</font> <font color="#993399">1</font> <font color="#990000">);</font>

          <i><font color="#9A1900">// sparsity for S(x)^T = f'(x)^T * R^T is same as sparsity for R^T</font></i>
          st<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> rt<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">];</font>

          <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
     <font color="#FF0000">}</font></tt></pre>
<br>
<b><big><a name="rev_sparse_hes" id="rev_sparse_hes">rev_sparse_hes</a></big></b>

<pre><tt>     <i><font color="#9A1900">// reverse Hessian set sparsity routine called by CppAD</font></i>
     <b><font color="#0000FF">virtual</font></b> <font color="#009900">bool</font> <b><font color="#000000">rev_sparse_hes</font></b><font color="#990000">(</font>
          <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>                   vx<font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>                   s <font color="#990000">,</font>
                vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>                   t <font color="#990000">,</font>
          <font color="#008080">size_t</font>                                p <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font> std<font color="#990000">::</font>set<font color="#990000">&lt;</font>size_t<font color="#990000">&gt;</font> <font color="#990000">&gt;&amp;</font>     r <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font> std<font color="#990000">::</font>set<font color="#990000">&lt;</font>size_t<font color="#990000">&gt;</font> <font color="#990000">&gt;&amp;</font>     u <font color="#990000">,</font>
                vector<font color="#990000">&lt;</font> std<font color="#990000">::</font>set<font color="#990000">&lt;</font>size_t<font color="#990000">&gt;</font> <font color="#990000">&gt;&amp;</font>     v <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>                 x <font color="#990000">)</font>
     <font color="#FF0000">{</font>    <i><font color="#9A1900">// This function needed if using RevSparseHes</font></i>
<b><font color="#000080"># ifndef</font></b> NDEBUG
          <font color="#008080">size_t</font> n <font color="#990000">=</font> vx<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font>
          <font color="#008080">size_t</font> m <font color="#990000">=</font> s<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font>
<b><font color="#000080"># endif</font></b>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> n <font color="#990000">);</font>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> t<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> n <font color="#990000">);</font>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> r<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> n <font color="#990000">);</font>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> u<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> m <font color="#990000">);</font>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> v<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> n <font color="#990000">);</font>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> n <font color="#990000">==</font> <font color="#993399">1</font> <font color="#990000">);</font>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> m <font color="#990000">==</font> <font color="#993399">1</font> <font color="#990000">);</font>

          <i><font color="#9A1900">// There are no cross term second derivatives for this case,</font></i>
          <i><font color="#9A1900">// so it is not necessary to vx.</font></i>

          <i><font color="#9A1900">// sparsity for T(x) = S(x) * f'(x) is same as sparsity for S</font></i>
          t<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> s<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">];</font>

          <i><font color="#9A1900">// V(x) = f'(x)^T * g''(y) * f'(x) * R  +  g'(y) * f''(x) * R</font></i>
          <i><font color="#9A1900">// U(x) = g''(y) * f'(x) * R</font></i>
          <i><font color="#9A1900">// S(x) = g'(y)</font></i>

          <i><font color="#9A1900">// back propagate the sparsity for U, note f'(x) may be non-zero;</font></i>
          v<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> u<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">];</font>

          <i><font color="#9A1900">// include forward Jacobian sparsity in Hessian sparsity</font></i>
          <i><font color="#9A1900">// (note sparsty for f''(x) * R same as for R)</font></i>
          <b><font color="#0000FF">if</font></b><font color="#990000">(</font> s<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">)</font>
               v<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#000000">set_union</font></b><font color="#990000">(</font>v<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">],</font> r<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">);</font>

          <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
     <font color="#FF0000">}</font></tt></pre>
<br>
<b><big><a name="End Class Definition" id="End Class Definition">End Class Definition</a></big></b>

<pre style='display:inline'><tt>
<font color="#FF0000">}</font><font color="#990000">;</font> <i><font color="#9A1900">// End of atomic_reciprocal class</font></i>
<font color="#FF0000">}</font>  <i><font color="#9A1900">// End empty namespace</font></i>

</tt></pre>
<b><big><a name="Use Atomic Function" id="Use Atomic Function">Use Atomic Function</a></big></b>

<pre><tt><font color="#009900">bool</font> <b><font color="#000000">reciprocal</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
<font color="#FF0000">{</font>    <font color="#009900">bool</font> ok <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
     <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>AD<font color="#990000">;</font>
     <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>NearEqual<font color="#990000">;</font>
     <font color="#009900">double</font> eps <font color="#990000">=</font> <font color="#993399">10</font><font color="#990000">.</font> <font color="#990000">*</font> CppAD<font color="#990000">::</font>numeric_limits<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;::</font><b><font color="#000000">epsilon</font></b><font color="#990000">();</font></tt></pre>
<br>
<b><a name="Use Atomic Function.Constructor" id="Use Atomic Function.Constructor">Constructor</a></b>

<pre style='display:inline'><tt>
     <i><font color="#9A1900">// --------------------------------------------------------------------</font></i>
     <i><font color="#9A1900">// Create the atomic reciprocal object</font></i>
     <font color="#008080">atomic_reciprocal</font> <b><font color="#000000">afun</font></b><font color="#990000">(</font><font color="#FF0000">"atomic_reciprocal"</font><font color="#990000">);</font>
</tt></pre>
<br>
<b><a name="Use Atomic Function.Recording" id="Use Atomic Function.Recording">Recording</a></b>

<pre><tt>     <i><font color="#9A1900">// Create the function f(x)</font></i>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// domain space vector</font></i>
     <font color="#008080">size_t</font> n  <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">;</font>
     <font color="#009900">double</font>  x0 <font color="#990000">=</font> <font color="#993399">0.5</font><font color="#990000">;</font>
     <font color="#008080">vector&lt; AD&lt;double&gt; &gt;</font> <b><font color="#000000">ax</font></b><font color="#990000">(</font>n<font color="#990000">);</font>
     ax<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font>     <font color="#990000">=</font> x0<font color="#990000">;</font>

     <i><font color="#9A1900">// declare independent variables and start tape recording</font></i>
     CppAD<font color="#990000">::</font><b><font color="#000000">Independent</font></b><font color="#990000">(</font>ax<font color="#990000">);</font>

     <i><font color="#9A1900">// range space vector</font></i>
     <font color="#008080">size_t</font> m <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">;</font>
     <font color="#008080">vector&lt; AD&lt;double&gt; &gt;</font> <b><font color="#000000">ay</font></b><font color="#990000">(</font>m<font color="#990000">);</font>

     <i><font color="#9A1900">// call user function and store reciprocal(x) in au[0]</font></i>
     <font color="#008080">vector&lt; AD&lt;double&gt; &gt;</font> <b><font color="#000000">au</font></b><font color="#990000">(</font>m<font color="#990000">);</font>
     <b><font color="#000000">afun</font></b><font color="#990000">(</font>ax<font color="#990000">,</font> au<font color="#990000">);</font>        <i><font color="#9A1900">// u = 1 / x</font></i>

     <i><font color="#9A1900">// now use AD division to invert to invert the operation</font></i>
     ay<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">1.0</font> <font color="#990000">/</font> au<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">];</font> <i><font color="#9A1900">// y = 1 / u = x</font></i>

     <i><font color="#9A1900">// create f: x -&gt; y and stop tape recording</font></i>
     CppAD<font color="#990000">::</font><font color="#008080">ADFun&lt;double&gt;</font> f<font color="#990000">;</font>
     f<font color="#990000">.</font><b><font color="#000000">Dependent</font></b> <font color="#990000">(</font>ax<font color="#990000">,</font> ay<font color="#990000">);</font>  <i><font color="#9A1900">// f(x) = x</font></i></tt></pre>
<br>
<b><a name="Use Atomic Function.forward" id="Use Atomic Function.forward">forward</a></b>

<pre><tt>     <i><font color="#9A1900">// check function value</font></i>
     <font color="#009900">double</font> check <font color="#990000">=</font> x0<font color="#990000">;</font>
     ok <font color="#990000">&amp;=</font> <b><font color="#000000">NearEqual</font></b><font color="#990000">(</font> <b><font color="#000000">Value</font></b><font color="#990000">(</font>ay<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">])</font> <font color="#990000">,</font> check<font color="#990000">,</font>  eps<font color="#990000">,</font> eps<font color="#990000">);</font>

     <i><font color="#9A1900">// check zero order forward mode</font></i>
     <font color="#008080">size_t</font> q<font color="#990000">;</font>
     <font color="#008080">vector&lt;double&gt;</font> <b><font color="#000000">x_q</font></b><font color="#990000">(</font>n<font color="#990000">),</font> <b><font color="#000000">y_q</font></b><font color="#990000">(</font>m<font color="#990000">);</font>
     q      <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
     x_q<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> x0<font color="#990000">;</font>
     y_q    <font color="#990000">=</font> f<font color="#990000">.</font><b><font color="#000000">Forward</font></b><font color="#990000">(</font>q<font color="#990000">,</font> x_q<font color="#990000">);</font>
     ok <font color="#990000">&amp;=</font> <b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>y_q<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">,</font> check<font color="#990000">,</font>  eps<font color="#990000">,</font> eps<font color="#990000">);</font>

     <i><font color="#9A1900">// check first order forward mode</font></i>
     q      <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">;</font>
     x_q<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">;</font>
     y_q    <font color="#990000">=</font> f<font color="#990000">.</font><b><font color="#000000">Forward</font></b><font color="#990000">(</font>q<font color="#990000">,</font> x_q<font color="#990000">);</font>
     check  <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">.;</font>
     ok <font color="#990000">&amp;=</font> <b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>y_q<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">,</font> check<font color="#990000">,</font>  eps<font color="#990000">,</font> eps<font color="#990000">);</font>

     <i><font color="#9A1900">// check second order forward mode</font></i>
     q      <font color="#990000">=</font> <font color="#993399">2</font><font color="#990000">;</font>
     x_q<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
     y_q    <font color="#990000">=</font> f<font color="#990000">.</font><b><font color="#000000">Forward</font></b><font color="#990000">(</font>q<font color="#990000">,</font> x_q<font color="#990000">);</font>
     check  <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">.;</font>
     ok <font color="#990000">&amp;=</font> <b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>y_q<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">,</font> check<font color="#990000">,</font>  eps<font color="#990000">,</font> eps<font color="#990000">);</font></tt></pre>
<br>
<b><a name="Use Atomic Function.reverse" id="Use Atomic Function.reverse">reverse</a></b>

<pre><tt>     <i><font color="#9A1900">// third order reverse mode</font></i>
     q     <font color="#990000">=</font> <font color="#993399">3</font><font color="#990000">;</font>
     <font color="#008080">vector&lt;double&gt;</font> <b><font color="#000000">w</font></b><font color="#990000">(</font>m<font color="#990000">),</font> <b><font color="#000000">dw</font></b><font color="#990000">(</font>n <font color="#990000">*</font> q<font color="#990000">);</font>
     w<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font>  <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">.;</font>
     dw    <font color="#990000">=</font> f<font color="#990000">.</font><b><font color="#000000">Reverse</font></b><font color="#990000">(</font>q<font color="#990000">,</font> w<font color="#990000">);</font>
     check <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">.;</font>
     ok <font color="#990000">&amp;=</font> <b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>dw<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">,</font> check<font color="#990000">,</font>  eps<font color="#990000">,</font> eps<font color="#990000">);</font>
     check <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">.;</font>
     ok <font color="#990000">&amp;=</font> <b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>dw<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">,</font> check<font color="#990000">,</font>  eps<font color="#990000">,</font> eps<font color="#990000">);</font>
     ok <font color="#990000">&amp;=</font> <b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>dw<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">]</font> <font color="#990000">,</font> check<font color="#990000">,</font>  eps<font color="#990000">,</font> eps<font color="#990000">);</font></tt></pre>
<br>
<b><a name="Use Atomic Function.for_sparse_jac" id="Use Atomic Function.for_sparse_jac">for_sparse_jac</a></b>

<pre><tt>     <i><font color="#9A1900">// forward mode sparstiy pattern</font></i>
     <font color="#008080">size_t</font> p <font color="#990000">=</font> n<font color="#990000">;</font>
     CppAD<font color="#990000">::</font><font color="#008080">vectorBool</font> <b><font color="#000000">r1</font></b><font color="#990000">(</font>n <font color="#990000">*</font> p<font color="#990000">),</font> <b><font color="#000000">s1</font></b><font color="#990000">(</font>m <font color="#990000">*</font> p<font color="#990000">);</font>
     r1<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>          <i><font color="#9A1900">// compute sparsity pattern for x[0]</font></i>
     <i><font color="#9A1900">//</font></i>
     s1    <font color="#990000">=</font> f<font color="#990000">.</font><b><font color="#000000">ForSparseJac</font></b><font color="#990000">(</font>p<font color="#990000">,</font> r1<font color="#990000">);</font>
     ok  <font color="#990000">&amp;=</font> s1<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">==</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>  <i><font color="#9A1900">// f[0] depends on x[0]</font></i></tt></pre>
<br>
<b><a name="Use Atomic Function.rev_sparse_jac" id="Use Atomic Function.rev_sparse_jac">rev_sparse_jac</a></b>

<pre><tt>     <i><font color="#9A1900">// reverse mode sparstiy pattern</font></i>
     q <font color="#990000">=</font> m<font color="#990000">;</font>
     CppAD<font color="#990000">::</font><font color="#008080">vectorBool</font> <b><font color="#000000">s2</font></b><font color="#990000">(</font>q <font color="#990000">*</font> m<font color="#990000">),</font> <b><font color="#000000">r2</font></b><font color="#990000">(</font>q <font color="#990000">*</font> n<font color="#990000">);</font>
     s2<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>          <i><font color="#9A1900">// compute sparsity pattern for f[0]</font></i>
     <i><font color="#9A1900">//</font></i>
     r2    <font color="#990000">=</font> f<font color="#990000">.</font><b><font color="#000000">RevSparseJac</font></b><font color="#990000">(</font>q<font color="#990000">,</font> s2<font color="#990000">);</font>
     ok  <font color="#990000">&amp;=</font> r2<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">==</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>  <i><font color="#9A1900">// f[0] depends on x[0]</font></i></tt></pre>
<br>
<b><a name="Use Atomic Function.rev_sparse_hes" id="Use Atomic Function.rev_sparse_hes">rev_sparse_hes</a></b>

<pre><tt>     <i><font color="#9A1900">// Hessian sparsity (using previous ForSparseJac call)</font></i>
     CppAD<font color="#990000">::</font><font color="#008080">vectorBool</font> <b><font color="#000000">s3</font></b><font color="#990000">(</font>m<font color="#990000">),</font> <b><font color="#000000">h</font></b><font color="#990000">(</font>p <font color="#990000">*</font> n<font color="#990000">);</font>
     s3<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>        <i><font color="#9A1900">// compute sparsity pattern for f[0]</font></i>
     <i><font color="#9A1900">//</font></i>
     h     <font color="#990000">=</font> f<font color="#990000">.</font><b><font color="#000000">RevSparseHes</font></b><font color="#990000">(</font>p<font color="#990000">,</font> s3<font color="#990000">);</font>
     ok  <font color="#990000">&amp;=</font> h<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">==</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font> <i><font color="#9A1900">// second partial of f[0] w.r.t. x[0] may be non-zero</font></i>
     <i><font color="#9A1900">//</font></i>
     <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
<font color="#FF0000">}</font></tt></pre>

<hr>Input File: example/atomic/reciprocal.cpp

</body>
</html>

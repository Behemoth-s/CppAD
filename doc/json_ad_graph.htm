<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Json Format for A Graph Representing an ADFun object</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Json Format for A Graph Representing an ADFun object">
<meta name="keywords" id="keywords" content=" json format graph representing adfun object under construction token white space non-negative integer floating point number string single character op_define_vec op_define op_code n_arg n_result op_usage operator definition not first_arg ... last_arg arguments dynamic_ind_vec n_dynamic_ind node indices independent_vec n_independent string_vec n_string constant_vec n_constant op_usage_vec n_usage result dependent_vec n_dependent ad function_name function ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_json_ad_graph_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="base2ad.cpp.htm" target="_top">Prev</a>
</td><td><a href="json_op_define.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>ADFun</option>
<option>other_adfun</option>
<option>json_ad_graph</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppad_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_adfun_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_other_adfun_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_json_ad_graph_htm.js'></script>
</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Under Construction</option>
<option>Format</option>
<option>Token</option>
<option>---..White Space</option>
<option>---..Non-Negative Integer</option>
<option>---..Floating Point Number</option>
<option>---..String</option>
<option>---..Single Character</option>
<option>op_define_vec</option>
<option>---..op_define</option>
<option>---..op_code</option>
<option>---..n_arg</option>
<option>---..n_result</option>
<option>op_usage</option>
<option>---..n_arg In Operator Definition</option>
<option>---..n_arg Not In Operator Definition</option>
<option>---..first_arg, ..., last_arg</option>
<option>---..String Arguments</option>
<option>dynamic_ind_vec</option>
<option>---..n_dynamic_ind</option>
<option>---..Node Indices</option>
<option>independent_vec</option>
<option>---..n_independent</option>
<option>---..Node Indices</option>
<option>string_vec</option>
<option>---..n_string</option>
<option>---..Node Indices</option>
<option>constant_vec</option>
<option>---..n_constant</option>
<option>---..Node Indices</option>
<option>op_usage_vec</option>
<option>---..n_usage</option>
<option>---..Result Indices</option>
<option>dependent_vec</option>
<option>---..n_dependent</option>
<option>AD Graph</option>
<option>---..function_name</option>
<option>---..function</option>
<option>Contents</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<center><b><big><big>Json Format for A Graph Representing an ADFun object</big></big></b></center>
<br>
<b><big><a name="Under Construction" id="Under Construction">Under Construction</a></big></b>
<br>
This section is under construction and subject to change
without backward compatibility

<br>
<br>
<b><big><a name="Format" id="Format">Format</a></big></b>
<br>
See
<a href="/https://en.wikipedia.org/wiki/JSON#Data_types_and_syntax" target="_top"><span style='white-space: nowrap'>Json&nbsp;data&nbsp;types&nbsp;and&nbsp;syntax</span></a>
.

<br>
<br>
<b><big><a name="Token" id="Token">Token</a></big></b>


<br>
<br>
<big><a name="Token.White Space" id="Token.White Space">White Space</a></big>
<br>
Any sequence of white space, except within a string,
terminates the current token and is otherwise ignored.

<br>
<br>
<big><a name="Token.Non-Negative Integer" id="Token.Non-Negative Integer">Non-Negative Integer</a></big>
<br>
A non-negative integer is a non-empty sequence of the following
characters: <code><font color="blue">0123456789</font></code>.

<br>
<br>
<big><a name="Token.Floating Point Number" id="Token.Floating Point Number">Floating Point Number</a></big>
<br>
A floating point number is a non-empty sequence of the following
characters: <code><font color="blue">0123456789+-eE.</font></code>.
Note that there can't be any white space between a leading plus
or minus sign and the rest of the number.

<br>
<br>
<big><a name="Token.String" id="Token.String">String</a></big>
<br>
A string starts with the double quote character <code><font color="blue">&quot;</font></code>
and includes all the characters until the next double quote.
The value of a string is the sequence of characters between the
double quotes.
Currently there is no support using the double quote
as part of the value of a string.

<br>
<br>
<big><a name="Token.Single Character" id="Token.Single Character">Single Character</a></big>
<br>
The following is a list of the single character tokens:
<table><tr><td align='left'  valign='top'>

Token      </td><td align='left'  valign='top'>
 Usage                                           </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">,</font></code>  </td><td align='left'  valign='top'>
 separates entries in a list                     </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">:</font></code>  </td><td align='left'  valign='top'>
 separates name from corresponding value         </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">{</font></code>  </td><td align='left'  valign='top'>
 starts a list of name <code><font color="blue">:</font></code> value pairs     </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">}</font></code>  </td><td align='left'  valign='top'>
 ends a list of name <code><font color="blue">:</font></code> value pairs        </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">[</font></code>  </td><td align='left'  valign='top'>
 starts a list of values                         </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">]</font></code>  </td><td align='left'  valign='top'>
 ends a list of values
</td></tr>
</table>
<br>
<b><big><a name="op_define_vec" id="op_define_vec">op_define_vec</a></big></b>
<br>
This vector has the following Json format:

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_define</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>first_op_define</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>...</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>last_op_define</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;]&nbsp;]<br>
</span></font></code>
where the non-negative integer 
<code><i><font color="black"><span style='white-space: nowrap'>n_define</span></font></i></code>

is the number of operator definitions in this vector.

<br>
<br>
<big><a name="op_define_vec.op_define" id="op_define_vec.op_define">op_define</a></big>
<br>
The possible operator definitions 
<code><i><font color="black"><span style='white-space: nowrap'>op_define</span></font></i></code>
 are listed in
section <a href="json_op_define.htm" target="_top"><span style='white-space: nowrap'>json_op_define</span></a>
.
If an operator has a fixed number of arguments, one result, and
only node indices for arguments, its definition has the form

<code><font color="blue"><span style='white-space: nowrap'><br>
{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;op_code&quot;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>op_code</span></font></i><font color="blue"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;name&quot;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>name</span></font></i><font color="blue"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;n_arg&quot;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_arg</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
}<br>
</span></font></code>
Otherwise the operator definition has the form

<code><font color="blue"><span style='white-space: nowrap'><br>
{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;op_code&quot;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>op_code</span></font></i><font color="blue"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;name&quot;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>name</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
}<br>
</span></font></code>
For example, the following is the 
<code><i><font color="black"><span style='white-space: nowrap'>op_define</span></font></i></code>
 corresponding to the
<a href="json_op_define.htm#Binary Operators.add" target="_top"><span style='white-space: nowrap'>add</span></a>
 operator:

<code><font color="blue"><span style='white-space: nowrap'><br>
{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;op_code&quot;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>op_code</span></font></i><font color="blue"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;name&quot;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;add&quot;,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;n_arg&quot;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2<br>
}<br>
</span></font></code>
<br>
<big><a name="op_define_vec.op_code" id="op_define_vec.op_code">op_code</a></big>
<br>
Note that every operator definition has a 
<code><i><font color="black"><span style='white-space: nowrap'>op_code</span></font></i></code>
 value.
These values must start at one and increment by one for each operator
definition; i.e., the 
<code><i><font color="black"><span style='white-space: nowrap'>op_code</span></font></i></code>
 for in 
<code><i><font color="black"><span style='white-space: nowrap'>first_op_define</span></font></i></code>
 is
<code><font color="blue">1</font></code>, the value in the next definition is <code><font color="blue">2</font></code>, and so on.
The order of the definitions determines the 
<code><i><font color="black"><span style='white-space: nowrap'>op_code</span></font></i></code>
 values
used to specify operators for this computational graph.

<br>
<br>
<big><a name="op_define_vec.n_arg" id="op_define_vec.n_arg">n_arg</a></big>
<br>
This is the number of argument values for the operator; i.e.,
the dimension of its domain space.
If it is present in an operator definition,
it is the same value for every usage of the operator.
Otherwise it is specified by the operator usage.

<br>
<br>
<big><a name="op_define_vec.n_result" id="op_define_vec.n_result">n_result</a></big>
<br>
This is the number of results for the operator; i.e.,
the dimension of its range space.
If 
<code><i><font color="black"><span style='white-space: nowrap'>n_arg</span></font></i></code>
 is present in an operator definition,

<code><i><font color="black"><span style='white-space: nowrap'>n_result</span></font></i></code>
 is one for every usage of the operator.
Otherwise it is specified by the operator usage.

<br>
<br>
<b><big><a name="op_usage" id="op_usage">op_usage</a></big></b>


<br>
<br>
<big><a name="op_usage.n_arg In Operator Definition" id="op_usage.n_arg In Operator Definition">n_arg In Operator Definition</a></big>
<br>
If 
<code><i><font color="black"><span style='white-space: nowrap'>n_arg</span></font></i></code>
 is present in an operator definition,
a corresponding 
<code><i><font color="black"><span style='white-space: nowrap'>op_usage</span></font></i></code>
 has the form

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>op_code</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>first_arg</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>...</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>last_arg</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;]<br>
</span></font></code>
<br>
<big><a name="op_usage.n_arg Not In Operator Definition" id="op_usage.n_arg Not In Operator Definition">n_arg Not In Operator Definition</a></big>
<br>
If 
<code><i><font color="black"><span style='white-space: nowrap'>n_arg</span></font></i></code>
 is not in an operator definition,
a corresponding 
<code><i><font color="black"><span style='white-space: nowrap'>op_usage</span></font></i></code>
 has the form

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>op_code</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_result</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_arg</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>first_arg</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>...</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>last_arg</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;]&nbsp;]<br>
</span></font></code>
<br>
<big><a name="op_usage.first_arg, ..., last_arg" id="op_usage.first_arg, ..., last_arg">first_arg, ..., last_arg</a></big>
<br>
The values 
<code><i><font color="black"><span style='white-space: nowrap'>first_arg</span></font></i></code>
, ..., 
<code><i><font color="black"><span style='white-space: nowrap'>last_arg</span></font></i></code>
,
are the node indices corresponding to each of the arguments for this operator.
They must be less than the node index corresponding to the first
result for this operator; see
<a href="json_ad_graph.htm#op_usage_vec.Result Indices" target="_top"><span style='white-space: nowrap'>result&nbsp;indices</span></a>
 below.
They specify which previous results (results before this operator in the graph)
correspond to each of the arguments to this operator.
As a consequence, there cannot be any cycles in the graph where
the operators are represented by arcs from the argument to the result nodes;
i.e., the graph is acyclic.

<br>
<br>
<big><a name="op_usage.String Arguments" id="op_usage.String Arguments">String Arguments</a></big>
<br>
In special cases, some of the values

<code><i><font color="black"><span style='white-space: nowrap'>first_arg</span></font></i></code>
, ..., 
<code><i><font color="black"><span style='white-space: nowrap'>last_arg</span></font></i></code>
 are specified
by the corresponding operator definition to be strings.
String arguments do not have a corresponding node index
(hence do not satisfy the node index restrictions above).

<br>
<br>
<b><big><a name="dynamic_ind_vec" id="dynamic_ind_vec">dynamic_ind_vec</a></big></b>
<br>
This is the independent dynamic parameter vector; see
<a href="independent.htm#dynamic" target="_top"><span style='white-space: nowrap'>dynamic</span></a>
..
The function can depend on these parameters,
but no derivatives are computed with respect to these parameters.

<br>
<br>
<big><a name="dynamic_ind_vec.n_dynamic_ind" id="dynamic_ind_vec.n_dynamic_ind">n_dynamic_ind</a></big>
<br>
We use the non-negative integer 
<code><i><font color="black"><span style='white-space: nowrap'>n_dynamic_ind</span></font></i></code>

for the number of elements in this vector.

<br>
<br>
<big><a name="dynamic_ind_vec.Node Indices" id="dynamic_ind_vec.Node Indices">Node Indices</a></big>
<br>
We use the notation 
<code><i><font color="black"><span style='white-space: nowrap'>start_dynamic</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;1</span></font></code>
.
The node indices corresponding to the dynamic parameter vector are

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>start_dynamic</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>...</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>start_dynamic</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;+&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_dynamic_ind</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;-&nbsp;1<br>
</span></font></code>
The corresponding node values must be set before the function
can be evaluated.

<br>
<br>
<b><big><a name="independent_vec" id="independent_vec">independent_vec</a></big></b>
<br>
This is the independent variable vector.
The function can depend on these variable and
derivatives can be computed  with respect to these variables.

<br>
<br>
<big><a name="independent_vec.n_independent" id="independent_vec.n_independent">n_independent</a></big>
<br>
We use the non-negative integer 
<code><i><font color="black"><span style='white-space: nowrap'>n_independent</span></font></i></code>

for the number of element in this vector.

<br>
<br>
<big><a name="independent_vec.Node Indices" id="independent_vec.Node Indices">Node Indices</a></big>
<br>
We use the notation

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>start_independent</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>start_dynamic</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;+&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_dynamic_ind</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
The node indices corresponding to the independent variable vector are

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>start_independent</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>...</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>start_independent</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;+&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_independent</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;-&nbsp;1<br>
</span></font></code>
The corresponding node values must be set before the function
can be evaluated.

<br>
<br>
<b><big><a name="string_vec" id="string_vec">string_vec</a></big></b>
<br>
This is the string vector which cannot change.
These strings can be used to display information about the function.
The Json format for 
<code><i><font color="black"><span style='white-space: nowrap'>string_vec</span></font></i></code>
 is

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_string</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>first_string</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>...</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>last_string</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;]<br>
</span></font></code>
Each of the elements of the vector,
e.g. 
<code><i><font color="black"><span style='white-space: nowrap'>first_string</span></font></i></code>
,
is a <a href="json_ad_graph.htm#Token.String" target="_top"><span style='white-space: nowrap'>string</span></a>
 specifying
the value for the corresponding node.

<br>
<br>
<big><a name="string_vec.n_string" id="string_vec.n_string">n_string</a></big>
<br>
The non-negative integer 
<code><i><font color="black"><span style='white-space: nowrap'>n_string</span></font></i></code>

is the number of elements in this vector.

<br>
<br>
<big><a name="string_vec.Node Indices" id="string_vec.Node Indices">Node Indices</a></big>
<br>
We use the notation

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>start_string</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>start_independent</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;+&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_independent</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
The node indices corresponding to the string vector are

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>start_string</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>...</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>start_string</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;+&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_string</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;-&nbsp;1<br>
</span></font></code>
<br>
<b><big><a name="constant_vec" id="constant_vec">constant_vec</a></big></b>
<br>
This is the constant parameter vector.
These parameters can be used to define the function and cannot change.
The Json format for 
<code><i><font color="black"><span style='white-space: nowrap'>constant_vec</span></font></i></code>
 is

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_constant</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>first_constant</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>...</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>last_constant</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;]<br>
</span></font></code>
Each of the elements of this vector,
e.g., 
<code><i><font color="black"><span style='white-space: nowrap'>first_constant</span></font></i></code>
,
is a <a href="json_ad_graph.htm#Token.Floating Point Number" target="_top"><span style='white-space: nowrap'>floating&nbsp;point&nbsp;number</span></a>

specifying the value for the corresponding node.

<br>
<br>
<big><a name="constant_vec.n_constant" id="constant_vec.n_constant">n_constant</a></big>
<br>
The non-negative integer 
<code><i><font color="black"><span style='white-space: nowrap'>n_constant</span></font></i></code>

is the number of elements in this vector.


<br>
<br>
<big><a name="constant_vec.Node Indices" id="constant_vec.Node Indices">Node Indices</a></big>
<br>
We use the notation

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>start_constant</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>start_string</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;+&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_string</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
The node indices corresponding to the constant vector are

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>start_constant</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>...</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>start_constant</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;+&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_constant</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;-&nbsp;1<br>
</span></font></code>
<br>
<b><big><a name="op_usage_vec" id="op_usage_vec">op_usage_vec</a></big></b>
<br>
The Jason format for an 
<code><i><font color="black"><span style='white-space: nowrap'>op_usage_vec</span></font></i></code>
 is

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_usage</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>first_op_usage</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>...</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>last_op_usage</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;]<br>
</span></font></code>
Each of the elements of this vector,
e.g. 
<code><i><font color="black"><span style='white-space: nowrap'>first_op_usage</span></font></i></code>
,
is an <a href="json_ad_graph.htm#op_usage" target="_top"><span style='white-space: nowrap'>op_usage</span></a>
.

<br>
<br>
<big><a name="op_usage_vec.n_usage" id="op_usage_vec.n_usage">n_usage</a></big>
<br>
The non-negative integer 
<code><i><font color="black"><span style='white-space: nowrap'>n_usage</span></font></i></code>

is the number of elements in this vector.

<br>
<br>
<big><a name="op_usage_vec.Result Indices" id="op_usage_vec.Result Indices">Result Indices</a></big>
<br>
For 
<code><i><font color="black"><span style='white-space: nowrap'>i</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;1&nbsp;,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>...</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_usage</span></font></i></code>
,
we use 
<code><i><font color="black"><span style='white-space: nowrap'>n_result</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>i</span></font></i><font color="blue"><span style='white-space: nowrap'>]</span></font></code>
 to denote the 
<code><i><font color="black"><span style='white-space: nowrap'>n_result</span></font></i></code>

corresponding to the <code><i>i</i></code>-th operator usage.
We define

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>start_usage</span></font></i><font color="blue"><span style='white-space: nowrap'>[1]&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>start_constant</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;+&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_constant</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
and for 
<code><i><font color="black"><span style='white-space: nowrap'>i</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;2&nbsp;,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>...</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_usage</span></font></i></code>
,

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>start_usage</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>i</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>start_usage</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>i</span></font></i><font color="blue"><span style='white-space: nowrap'>-1]&nbsp;+&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_result</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>i</span></font></i><font color="blue"><span style='white-space: nowrap'>-1]<br>
</span></font></code>
For 
<code><i><font color="black"><span style='white-space: nowrap'>j</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;1&nbsp;,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>...</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_result[</span></font></i><font color="blue"><span style='white-space: nowrap'>i</span></font><i><font color="black"><span style='white-space: nowrap'>]</span></font></i></code>
,
the corresponding node index is

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>start_usage</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>i</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;+&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>j</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;-&nbsp;1<br>
</span></font></code>
and the corresponding node value is the <code><i>j%</i></code>-th result
for the <code><i>i</i></code>-th operator.

<br>
<br>
<b><big><a name="dependent_vec" id="dependent_vec">dependent_vec</a></big></b>
<br>
This is the vector of dependent variable node indices.
This identifies which nodes in the graph correspond to dependent variables.
The Json format for 
<code><i><font color="black"><span style='white-space: nowrap'>dependent_vec</span></font></i></code>
 is

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_dependent</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>first_dependent</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>...</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>last_dependent</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;]<br>
</span></font></code>
Each of the elements of this vector,
e.g. 
<code><i><font color="black"><span style='white-space: nowrap'>first_dependent</span></font></i></code>
,
is a <a href="json_ad_graph.htm#Token.Non-Negative Integer" target="_top"><span style='white-space: nowrap'>non-negative&nbsp;integer</span></a>

corresponding to a node index in the graph.

<br>
<br>
<big><a name="dependent_vec.n_dependent" id="dependent_vec.n_dependent">n_dependent</a></big>
<br>
The non-negative integer 
<code><i><font color="black"><span style='white-space: nowrap'>n_dependent</span></font></i></code>

is the number of elements in this vector.

<br>
<br>
<b><big><a name="AD Graph" id="AD Graph">AD Graph</a></big></b>
<br>
Each operator corresponds to a set of arcs from its argument nodes
to its result nodes.
The graph is acyclic; see
<a href="json_ad_graph.htm#op_usage.first_arg, ..., last_arg" target="_top"><span style='white-space: nowrap'>first_arg,&nbsp;...,&nbsp;last_arg</span></a>
.

<br>
<br>
<big><a name="AD Graph.function_name" id="AD Graph.function_name">function_name</a></big>
<br>
A 
<code><i><font color="black"><span style='white-space: nowrap'>function_name</span></font></i></code>
 is a
<a href="json_ad_graph.htm#Token.String" target="_top"><span style='white-space: nowrap'>string</span></a>
 that is used to identify
the function.

<br>
<br>
<big><a name="AD Graph.function" id="AD Graph.function">function</a></big>
<br>
The Json AD graph representation of a function is

<code><font color="blue"><span style='white-space: nowrap'><br>
{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;function_name&quot;:&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>function_name</span></font></i><font color="blue"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;op_define_vec&quot;:&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>op_define_vec</span></font></i><font color="blue"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;n_dynamic_ind&quot;:&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_dynamic_ind</span></font></i><font color="blue"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;n_independent&quot;:&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_independent</span></font></i><font color="blue"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;string_vec&quot;:&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>string_vec</span></font></i><font color="blue"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;constant_vec&quot;:&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>constant_vec</span></font></i><font color="blue"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;op_usage_vec&quot;:&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>op_usage_vec</span></font></i><font color="blue"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;dependent_vec&quot;:&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>dependent_vec</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
}<br>
</span></font></code>
This represents a the <small>@(@
y = f(x, p)
@)@</small> where
<small>@(@
p
@)@</small> is the dynamic parameter vector,
<small>@(@
x
@)@</small> is the independent variable vector, and
<small>@(@
y
@)@</small> is the dependent variable vector.

<br>
<br>
<b><big><a name="Contents" id="Contents">Contents</a></big></b>
<br>
<table>
<tr><td><a href="json_op_define.htm" target="_top">json_op_define</a></td><td>Json&nbsp;Operator&nbsp;Definitions</td></tr><tr><td><a href="from_json.htm" target="_top">from_json</a></td><td>ADFun&nbsp;Object&nbsp;Corresponding&nbsp;to&nbsp;a&nbsp;Json&nbsp;AD&nbsp;Graph</td></tr><tr><td><a href="to_json.htm" target="_top">to_json</a></td><td>Create&nbsp;a&nbsp;Json&nbsp;AD&nbsp;Graph&nbsp;Corresponding&nbsp;to&nbsp;an&nbsp;ADFun&nbsp;Object</td></tr><tr><td><a href="json_sparse.cpp.htm" target="_top">json_sparse.cpp</a></td><td>Using&nbsp;Json&nbsp;to&nbsp;Represent&nbsp;a&nbsp;Sparse&nbsp;Matrix:&nbsp;Example&nbsp;and&nbsp;Test</td></tr></table>
<hr>Input File: include/cppad/core/json/ad_graph.omh

</body>
</html>

<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>ODE Inverse Problem Definitions: Source Code</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="ODE Inverse Problem Definitions: Source Code">
<meta name="keywords" id="keywords" content=" ode inverse problem definitions: source code example ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_ipopt_nlp_ode_problem.hpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://github.com/bradbell/cppad" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="ipopt_nlp_ode_problem.htm" target="_top">Prev</a>
</td><td><a href="ipopt_nlp_ode_simple.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>Appendix</option>
<option>deprecated</option>
<option>cppad_ipopt_nlp</option>
<option>ipopt_nlp_ode</option>
<option>ipopt_nlp_ode_problem</option>
<option>ipopt_nlp_ode_problem.hpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>cppad_ipopt_nlp-&gt;</option>
<option>ipopt_nlp_get_started.cpp</option>
<option>ipopt_nlp_ode</option>
<option>ipopt_ode_speed.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>ipopt_nlp_ode-&gt;</option>
<option>ipopt_nlp_ode_problem</option>
<option>ipopt_nlp_ode_simple</option>
<option>ipopt_nlp_ode_fast</option>
<option>ipopt_nlp_ode_run.hpp</option>
<option>ipopt_nlp_ode_check.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>ipopt_nlp_ode_problem-&gt;</option>
<option>ipopt_nlp_ode_problem.hpp</option>
</select>
</td>
<td>ipopt_nlp_ode_problem.hpp</td>
<td>Headings</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@


<center><b><big><big>ODE Inverse Problem Definitions: Source Code</big></big></b></center>
<code><font color="blue"><pre><tt><b><font color="#000080"># include</font></b> <font color="#FF0000">"../src/cppad_ipopt_nlp.hpp"</font>

<b><font color="#0000FF">namespace</font></b> <font color="#FF0000">{</font>
     <i><font color="#9A1900">//------------------------------------------------------------------</font></i>
     <b><font color="#0000FF">typedef</font></b> Ipopt<font color="#990000">::</font><font color="#008080">Number</font> Number<font color="#990000">;</font>
     <font color="#008080">Number</font> a0 <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">.;</font>  <i><font color="#9A1900">// simulation value for a[0]</font></i>
     <font color="#008080">Number</font> a1 <font color="#990000">=</font> <font color="#993399">2</font><font color="#990000">.;</font>  <i><font color="#9A1900">// simulation value for a[1]</font></i>
     <font color="#008080">Number</font> a2 <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">.;</font>  <i><font color="#9A1900">// simulatioln value for a[2]</font></i>

     <i><font color="#9A1900">// function used to simulate data</font></i>
     <font color="#008080">Number</font> <b><font color="#000000">y_one</font></b><font color="#990000">(</font><font color="#008080">Number</font> t<font color="#990000">)</font>
     <font color="#FF0000">{</font>    <font color="#008080">Number</font> y_1 <font color="#990000">=</font>  a0<font color="#990000">*</font>a1 <font color="#990000">*</font> <font color="#990000">(</font><b><font color="#000000">exp</font></b><font color="#990000">(-</font>a2<font color="#990000">*</font>t<font color="#990000">)</font> <font color="#990000">-</font> <b><font color="#000000">exp</font></b><font color="#990000">(-</font>a1<font color="#990000">*</font>t<font color="#990000">))</font> <font color="#990000">/</font> <font color="#990000">(</font>a1 <font color="#990000">-</font> a2<font color="#990000">);</font>
          <b><font color="#0000FF">return</font></b> y_1<font color="#990000">;</font>
     <font color="#FF0000">}</font>

     <i><font color="#9A1900">// time points were we have data (no data at first point)</font></i>
     <font color="#009900">double</font> s<font color="#990000">[]</font> <font color="#990000">=</font> <font color="#FF0000">{</font> <font color="#993399">0.0</font><font color="#990000">,</font>        <font color="#993399">0.5</font><font color="#990000">,</font>        <font color="#993399">1.0</font><font color="#990000">,</font>        <font color="#993399">1.5</font><font color="#990000">,</font>        <font color="#993399">2.0</font> <font color="#FF0000">}</font><font color="#990000">;</font>
     <i><font color="#9A1900">// Simulated data for case with no noise (first point is not used)</font></i>
     <font color="#009900">double</font> z<font color="#990000">[]</font> <font color="#990000">=</font> <font color="#FF0000">{</font> <font color="#993399">0.0</font><font color="#990000">,</font>  <b><font color="#000000">y_one</font></b><font color="#990000">(</font><font color="#993399">0.5</font><font color="#990000">),</font> <b><font color="#000000">y_one</font></b><font color="#990000">(</font><font color="#993399">1.0</font><font color="#990000">),</font> <b><font color="#000000">y_one</font></b><font color="#990000">(</font><font color="#993399">1.5</font><font color="#990000">),</font> <b><font color="#000000">y_one</font></b><font color="#990000">(</font><font color="#993399">2.0</font><font color="#990000">)</font> <font color="#FF0000">}</font><font color="#990000">;</font>
     <i><font color="#9A1900">// Number of measurement values</font></i>
     <font color="#008080">size_t</font> Nz  <font color="#990000">=</font> <b><font color="#0000FF">sizeof</font></b><font color="#990000">(</font>z<font color="#990000">)</font> <font color="#990000">/</font> <b><font color="#0000FF">sizeof</font></b><font color="#990000">(</font>z<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">])</font> <font color="#990000">-</font> <font color="#993399">1</font><font color="#990000">;</font>
     <i><font color="#9A1900">// Number of components in the function y(t, a)</font></i>
     <font color="#008080">size_t</font> Ny  <font color="#990000">=</font> <font color="#993399">2</font><font color="#990000">;</font>
     <i><font color="#9A1900">// Number of components in the vectro a</font></i>
     <font color="#008080">size_t</font> Na  <font color="#990000">=</font> <font color="#993399">3</font><font color="#990000">;</font>

     <i><font color="#9A1900">// Initial Condition function, F(a) = y(t, a) at t = 0</font></i>
     <i><font color="#9A1900">// (for this particular example)</font></i>
     <b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">class</font></b> <font color="#008080">Vector</font><font color="#990000">&gt;</font>
     <font color="#008080">Vector</font> <b><font color="#000000">eval_F</font></b><font color="#990000">(</font><b><font color="#0000FF">const</font></b> <font color="#008080">Vector</font> <font color="#990000">&amp;</font>a<font color="#990000">)</font>
     <font color="#FF0000">{</font>    <font color="#008080">Vector</font> <b><font color="#000000">F</font></b><font color="#990000">(</font>Ny<font color="#990000">);</font>
          <i><font color="#9A1900">// y_0 (t) = a[0]*exp(-a[1] * t)</font></i>
          F<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> a<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">];</font>
          <i><font color="#9A1900">// y_1 (t) =</font></i>
          <i><font color="#9A1900">// a[0]*a[1]*(exp(-a[2] * t) - exp(-a[1] * t))/(a[1] - a[2])</font></i>
          F<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">.;</font>
          <b><font color="#0000FF">return</font></b> F<font color="#990000">;</font>
     <font color="#FF0000">}</font>
     <i><font color="#9A1900">// G(y, a) =  \partial_t y(t, a); i.e. the differential equation</font></i>
     <i><font color="#9A1900">// (for this particular example)</font></i>
     <b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">class</font></b> <font color="#008080">Vector</font><font color="#990000">&gt;</font>
     <font color="#008080">Vector</font> <b><font color="#000000">eval_G</font></b><font color="#990000">(</font><b><font color="#0000FF">const</font></b> <font color="#008080">Vector</font> <font color="#990000">&amp;</font>y <font color="#990000">,</font> <b><font color="#0000FF">const</font></b> <font color="#008080">Vector</font> <font color="#990000">&amp;</font>a<font color="#990000">)</font>
     <font color="#FF0000">{</font>    <font color="#008080">Vector</font> <b><font color="#000000">G</font></b><font color="#990000">(</font>Ny<font color="#990000">);</font>
          <i><font color="#9A1900">// y_0 (t) = a[0]*exp(-a[1] * t)</font></i>
          G<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#990000">-</font>a<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">*</font> y<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">];</font>
          <i><font color="#9A1900">// y_1 (t) =</font></i>
          <i><font color="#9A1900">// a[0]*a[1]*(exp(-a[2] * t) - exp(-a[1] * t))/(a[1] - a[2])</font></i>
          G<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#990000">+</font>a<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">*</font> y<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">-</font> a<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">]</font> <font color="#990000">*</font> y<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">];</font>
          <b><font color="#0000FF">return</font></b> G<font color="#990000">;</font>
     <font color="#FF0000">}</font>
     <i><font color="#9A1900">// H(i, y, a) = contribution to objective at i-th data point</font></i>
     <i><font color="#9A1900">// (for this particular example)</font></i>
     <b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">class</font></b> <font color="#008080">Scalar</font><font color="#990000">,</font> <b><font color="#0000FF">class</font></b> <font color="#008080">Vector</font><font color="#990000">&gt;</font>
     <font color="#008080">Scalar</font> <b><font color="#000000">eval_H</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i<font color="#990000">,</font> <b><font color="#0000FF">const</font></b> <font color="#008080">Vector</font> <font color="#990000">&amp;</font>y<font color="#990000">,</font> <b><font color="#0000FF">const</font></b> <font color="#008080">Vector</font> <font color="#990000">&amp;</font>a<font color="#990000">)</font>
     <font color="#FF0000">{</font>    <i><font color="#9A1900">// This particular H is for a case where y_1 (t) is measured</font></i>
          <font color="#008080">Scalar</font> diff <font color="#990000">=</font> z<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">-</font> y<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">];</font>
          <b><font color="#0000FF">return</font></b> diff <font color="#990000">*</font> diff<font color="#990000">;</font>
     <font color="#FF0000">}</font>
     <i><font color="#9A1900">// function used to count the number of calls to eval_r</font></i>
     <font color="#008080">size_t</font> <b><font color="#000000">count_eval_r</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
     <font color="#FF0000">{</font>    <b><font color="#0000FF">static</font></b> <font color="#008080">size_t</font> count <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
          <font color="#990000">++</font>count<font color="#990000">;</font>
          <b><font color="#0000FF">return</font></b> count<font color="#990000">;</font>
     <font color="#FF0000">}</font>
<font color="#FF0000">}</font></tt></pre>
</font></code>
<hr>Input File: cppad_ipopt/example/ode_problem.hpp

</body>
</html>

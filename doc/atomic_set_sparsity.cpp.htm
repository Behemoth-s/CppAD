<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'
>
</script>
<head>
<title>Atomic Sparsity with Set Patterns: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Atomic Sparsity with Set Patterns: Example and Test">
<meta name="keywords" id="keywords" content=" atomic sparsity with set patterns: example test function set_sparsity_enum start class definition constructor forward for_sparse_jac rev_sparse_jac for_sparse_hes rev_sparse_hes end recording result ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_atomic_set_sparsity.cpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://coin-or.github.io/CppAD/" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="atomic_reciprocal.cpp.htm" target="_top">Prev</a>
</td><td><a href="atomic_tangent.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>AD</option>
<option>ADValued</option>
<option>atomic</option>
<option>atomic_base</option>
<option>atomic_set_sparsity.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>ADValued-&gt;</option>
<option>Arithmetic</option>
<option>unary_standard_math</option>
<option>binary_math</option>
<option>CondExp</option>
<option>Discrete</option>
<option>numeric_limits</option>
<option>atomic</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>atomic-&gt;</option>
<option>checkpoint</option>
<option>atomic_base</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>atomic_base-&gt;</option>
<option>atomic_ctor</option>
<option>atomic_option</option>
<option>atomic_afun</option>
<option>atomic_forward</option>
<option>atomic_reverse</option>
<option>atomic_for_sparse_jac</option>
<option>atomic_rev_sparse_jac</option>
<option>atomic_for_sparse_hes</option>
<option>atomic_rev_sparse_hes</option>
<option>atomic_base_clear</option>
<option>atomic_get_started.cpp</option>
<option>atomic_norm_sq.cpp</option>
<option>atomic_reciprocal.cpp</option>
<option>atomic_set_sparsity.cpp</option>
<option>atomic_tangent.cpp</option>
<option>atomic_eigen_mat_mul.cpp</option>
<option>atomic_eigen_mat_inv.cpp</option>
<option>atomic_eigen_cholesky.cpp</option>
<option>atomic_mat_mul.cpp</option>
</select>
</td>
<td>atomic_set_sparsity.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>function</option>
<option>set_sparsity_enum</option>
<option>Start Class Definition</option>
<option>Constructor</option>
<option>forward</option>
<option>for_sparse_jac</option>
<option>rev_sparse_jac</option>
<option>for_sparse_hes</option>
<option>rev_sparse_hes</option>
<option>End Class Definition</option>
<option>Test Atomic Function</option>
<option>---..Constructor</option>
<option>---..Recording</option>
<option>---..for_sparse_jac</option>
<option>---..rev_sparse_jac</option>
<option>---..for_sparse_hes</option>
<option>---..rev_sparse_hes</option>
<option>---..Test Result</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<center><b><big><big>Atomic Sparsity with Set Patterns: Example and Test</big></big></b></center>
<br>
<b><big><a name="function" id="function">function</a></big></b>
<br>
For this example, the atomic function
<small>@(@
f : \B{R}^3 \rightarrow \B{R}^2
@)@</small> is defined by
<small>@[@

f( x ) = \left( \begin{array}{c}
	x_2 \\
	x_0 * x_1
\end{array} \right)

@]@</small>

<br>
<br>
<b><big><a name="set_sparsity_enum" id="set_sparsity_enum">set_sparsity_enum</a></big></b>
<br>
This example only uses set sparsity patterns.



<br>
<br>
<b><big><a name="Start Class Definition" id="Start Class Definition">Start Class Definition</a></big></b>

<pre><tt><b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/cppad.hpp&gt;</font>
<b><font color="#0000FF">namespace</font></b> <font color="#FF0000">{</font>   <i><font color="#9A1900">// isolate items below to this file</font></i>
<b><font color="#0000FF">using</font></b>   CppAD<font color="#990000">::</font>vector<font color="#990000">;</font>                          <i><font color="#9A1900">// vector</font></i>
<b><font color="#0000FF">typedef</font></b> <font color="#008080">vector&lt; std::set&lt;size_t&gt; &gt;</font> set_vector<font color="#990000">;</font>  <i><font color="#9A1900">// atomic_sparsity</font></i>
<i><font color="#9A1900">//</font></i>
<i><font color="#9A1900">// a utility to compute the union of two sets.</font></i>
<b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>set_union<font color="#990000">;</font>
<i><font color="#9A1900">//</font></i>
<b><font color="#0000FF">class</font></b> <font color="#008080">atomic_set_sparsity</font> <font color="#990000">:</font> <b><font color="#0000FF">public</font></b> CppAD<font color="#990000">::</font>atomic_base<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;</font> <font color="#FF0000">{</font></tt></pre>
<br>
<b><big><a name="Constructor" id="Constructor">Constructor</a></big></b>

<pre><tt><b><font color="#0000FF">public</font></b><font color="#990000">:</font>
     <i><font color="#9A1900">// constructor</font></i>
     <b><font color="#000000">atomic_set_sparsity</font></b><font color="#990000">(</font><b><font color="#0000FF">const</font></b> std<font color="#990000">::</font>string<font color="#990000">&amp;</font> name<font color="#990000">)</font> <font color="#990000">:</font>
     <i><font color="#9A1900">// this exampel only uses set sparsity patterns</font></i>
     CppAD<font color="#990000">::</font>atomic_base<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;(</font>name<font color="#990000">,</font> set_sparsity_enum <font color="#990000">)</font>
     <font color="#FF0000">{</font> <font color="#FF0000">}</font>
<b><font color="#0000FF">private</font></b><font color="#990000">:</font></tt></pre>
<br>
<b><big><a name="forward" id="forward">forward</a></big></b>

<pre><tt>     <i><font color="#9A1900">// forward</font></i>
     <b><font color="#0000FF">virtual</font></b> <font color="#009900">bool</font> <b><font color="#000000">forward</font></b><font color="#990000">(</font>
          <font color="#008080">size_t</font>                    p <font color="#990000">,</font>
          <font color="#008080">size_t</font>                    q <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>      vx <font color="#990000">,</font>
          vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>            vy <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>    tx <font color="#990000">,</font>
          vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>          ty
     <font color="#990000">)</font>
     <font color="#FF0000">{</font>
          <font color="#008080">size_t</font> n <font color="#990000">=</font> tx<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">/</font> <font color="#990000">(</font>q <font color="#990000">+</font> <font color="#993399">1</font><font color="#990000">);</font>
<b><font color="#000080"># ifndef</font></b> NDEBUG
          <font color="#008080">size_t</font> m <font color="#990000">=</font> ty<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">/</font> <font color="#990000">(</font>q <font color="#990000">+</font> <font color="#993399">1</font><font color="#990000">);</font>
<b><font color="#000080"># endif</font></b>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> n <font color="#990000">==</font> <font color="#993399">3</font> <font color="#990000">);</font>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> m <font color="#990000">==</font> <font color="#993399">2</font> <font color="#990000">);</font>

          <i><font color="#9A1900">// only order zero</font></i>
          <font color="#009900">bool</font> ok <font color="#990000">=</font> q <font color="#990000">==</font> <font color="#993399">0</font><font color="#990000">;</font>
          <b><font color="#0000FF">if</font></b><font color="#990000">(</font> <font color="#990000">!</font> ok <font color="#990000">)</font>
               <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>

          <i><font color="#9A1900">// check for defining variable information</font></i>
          <b><font color="#0000FF">if</font></b><font color="#990000">(</font> vx<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">&gt;</font> <font color="#993399">0</font> <font color="#990000">)</font>
          <font color="#FF0000">{</font>    ok   <font color="#990000">&amp;=</font> vx<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> n<font color="#990000">;</font>
               vy<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> vx<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">];</font>
               vy<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">=</font> vx<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">||</font> vx<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">];</font>
          <font color="#FF0000">}</font>

          <i><font color="#9A1900">// Order zero forward mode.</font></i>
          <i><font color="#9A1900">// y[0] = x[2], y[1] = x[0] * x[1]</font></i>
          <b><font color="#0000FF">if</font></b><font color="#990000">(</font> p <font color="#990000">&lt;=</font> <font color="#993399">0</font> <font color="#990000">)</font>
          <font color="#FF0000">{</font>    ty<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> tx<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">];</font>
               ty<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">=</font> tx<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">*</font> tx<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">];</font>
          <font color="#FF0000">}</font>
          <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
     <font color="#FF0000">}</font></tt></pre>
<br>
<b><big><a name="for_sparse_jac" id="for_sparse_jac">for_sparse_jac</a></big></b>

<pre><tt>     <i><font color="#9A1900">// for_sparse_jac</font></i>
     <b><font color="#0000FF">virtual</font></b> <font color="#009900">bool</font> <b><font color="#000000">for_sparse_jac</font></b><font color="#990000">(</font>
          <font color="#008080">size_t</font>                          p <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> set_vector<font color="#990000">&amp;</font>               r <font color="#990000">,</font>
          set_vector<font color="#990000">&amp;</font>                     s <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>           x <font color="#990000">)</font>
     <font color="#FF0000">{</font>    <i><font color="#9A1900">// This function needed if using f.ForSparseJac</font></i>
<b><font color="#000080"># ifndef</font></b> NDEBUG
          <font color="#008080">size_t</font> n <font color="#990000">=</font> r<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font>
          <font color="#008080">size_t</font> m <font color="#990000">=</font> s<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font>
<b><font color="#000080"># endif</font></b>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> n <font color="#990000">==</font> x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">);</font>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> n <font color="#990000">==</font> <font color="#993399">3</font> <font color="#990000">);</font>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> m <font color="#990000">==</font> <font color="#993399">2</font> <font color="#990000">);</font>

          <i><font color="#9A1900">// sparsity for S(x) = f'(x) * R  = [ 0,   0, 1 ] * R</font></i>
          s<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> r<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">];</font>
          <i><font color="#9A1900">// s[1] = union(r[0], r[1])</font></i>
          s<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#000000">set_union</font></b><font color="#990000">(</font>r<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">],</font> r<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]);</font>
          <i><font color="#9A1900">//</font></i>
          <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
     <font color="#FF0000">}</font></tt></pre>
<br>
<b><big><a name="rev_sparse_jac" id="rev_sparse_jac">rev_sparse_jac</a></big></b>

<pre><tt>     <b><font color="#0000FF">virtual</font></b> <font color="#009900">bool</font> <b><font color="#000000">rev_sparse_jac</font></b><font color="#990000">(</font>
          <font color="#008080">size_t</font>                                p  <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> set_vector<font color="#990000">&amp;</font>                     rt <font color="#990000">,</font>
          set_vector<font color="#990000">&amp;</font>                           st <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>                 x  <font color="#990000">)</font>
     <font color="#FF0000">{</font>    <i><font color="#9A1900">// This function needed if using RevSparseJac or optimize</font></i>
<b><font color="#000080"># ifndef</font></b> NDEBUG
          <font color="#008080">size_t</font> n <font color="#990000">=</font> st<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font>
          <font color="#008080">size_t</font> m <font color="#990000">=</font> rt<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font>
<b><font color="#000080"># endif</font></b>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> n <font color="#990000">==</font> x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">);</font>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> n <font color="#990000">==</font> <font color="#993399">3</font> <font color="#990000">);</font>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> m <font color="#990000">==</font> <font color="#993399">2</font> <font color="#990000">);</font>

          <i><font color="#9A1900">//                                       [ 0, x1 ]</font></i>
          <i><font color="#9A1900">// sparsity for S(x)^T = f'(x)^T * R^T = [ 0, x0 ] * R^T</font></i>
          <i><font color="#9A1900">//                                       [ 1, 0  ]</font></i>
          st<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> rt<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">];</font>
          st<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">=</font> rt<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">];</font>
          st<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">]</font> <font color="#990000">=</font> rt<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">];</font>
          <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
     <font color="#FF0000">}</font></tt></pre>
<br>
<b><big><a name="for_sparse_hes" id="for_sparse_hes">for_sparse_hes</a></big></b>

<pre><tt>     <b><font color="#0000FF">virtual</font></b> <font color="#009900">bool</font> <b><font color="#000000">for_sparse_hes</font></b><font color="#990000">(</font>
          <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>                   vx<font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>                   r <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>                   s <font color="#990000">,</font>
          set_vector<font color="#990000">&amp;</font>                           h <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>                 x <font color="#990000">)</font>
     <font color="#FF0000">{</font>
          <font color="#008080">size_t</font> n <font color="#990000">=</font> r<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font>
<b><font color="#000080"># ifndef</font></b> NDEBUG
          <font color="#008080">size_t</font> m <font color="#990000">=</font> s<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font>
<b><font color="#000080"># endif</font></b>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> n <font color="#990000">);</font>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> h<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> n <font color="#990000">);</font>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> n <font color="#990000">==</font> <font color="#993399">3</font> <font color="#990000">);</font>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> m <font color="#990000">==</font> <font color="#993399">2</font> <font color="#990000">);</font>

          <i><font color="#9A1900">// initialize h as empty</font></i>
          <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> n<font color="#990000">;</font> i<font color="#990000">++)</font>
               h<font color="#990000">[</font>i<font color="#990000">].</font><b><font color="#000000">clear</font></b><font color="#990000">();</font>

          <i><font color="#9A1900">// only f_1 has a non-zero hessian</font></i>
          <b><font color="#0000FF">if</font></b><font color="#990000">(</font> <font color="#990000">!</font> s<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">)</font>
               <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>

          <i><font color="#9A1900">// only the cross term between x[0] and x[1] is non-zero</font></i>
          <b><font color="#0000FF">if</font></b><font color="#990000">(</font> <font color="#990000">!</font> <font color="#990000">(</font> r<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">&amp;</font> r<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">)</font> <font color="#990000">)</font>
               <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>

          <i><font color="#9A1900">// set the possibly non-zero terms in the hessian</font></i>
          h<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">].</font><b><font color="#000000">insert</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">);</font>
          h<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">].</font><b><font color="#000000">insert</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">);</font>

          <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
     <font color="#FF0000">}</font></tt></pre>
<br>
<b><big><a name="rev_sparse_hes" id="rev_sparse_hes">rev_sparse_hes</a></big></b>

<pre><tt>     <b><font color="#0000FF">virtual</font></b> <font color="#009900">bool</font> <b><font color="#000000">rev_sparse_hes</font></b><font color="#990000">(</font>
          <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>                   vx<font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>                   s <font color="#990000">,</font>
          vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>                         t <font color="#990000">,</font>
          <font color="#008080">size_t</font>                                p <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> set_vector<font color="#990000">&amp;</font>                     r <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> set_vector<font color="#990000">&amp;</font>                     u <font color="#990000">,</font>
          set_vector<font color="#990000">&amp;</font>                           v <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>                 x <font color="#990000">)</font>
     <font color="#FF0000">{</font>    <i><font color="#9A1900">// This function needed if using RevSparseHes</font></i>
<b><font color="#000080"># ifndef</font></b> NDEBUG
          <font color="#008080">size_t</font> m <font color="#990000">=</font> s<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font>
          <font color="#008080">size_t</font> n <font color="#990000">=</font> t<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font>
<b><font color="#000080"># endif</font></b>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> n <font color="#990000">);</font>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> r<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> n <font color="#990000">);</font>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> u<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> m <font color="#990000">);</font>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> v<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> n <font color="#990000">);</font>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> n <font color="#990000">==</font> <font color="#993399">3</font> <font color="#990000">);</font>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> m <font color="#990000">==</font> <font color="#993399">2</font> <font color="#990000">);</font>

          <i><font color="#9A1900">// sparsity for T(x) = S(x) * f'(x) = S(x) * [  0,  0,  1 ]</font></i>
          <i><font color="#9A1900">//                                           [ x1, x0,  0 ]</font></i>
          t<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> s<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">];</font>
          t<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">=</font> s<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">];</font>
          t<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">]</font> <font color="#990000">=</font> s<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">];</font>

          <i><font color="#9A1900">// V(x) = f'(x)^T * g''(y) * f'(x) * R  +  g'(y) * f''(x) * R</font></i>
          <i><font color="#9A1900">// U(x) = g''(y) * f'(x) * R</font></i>
          <i><font color="#9A1900">// S(x) = g'(y)</font></i>

          <i><font color="#9A1900">//                                      [ 0, x1 ]</font></i>
          <i><font color="#9A1900">// sparsity for W(x) = f'(x)^T * U(x) = [ 0, x0 ] * U(x)</font></i>
          <i><font color="#9A1900">//                                      [ 1, 0  ]</font></i>
          v<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> u<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">];</font>
          v<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">=</font> u<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">];</font>
          v<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">]</font> <font color="#990000">=</font> u<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">];</font>
          <i><font color="#9A1900">//</font></i>
          <i><font color="#9A1900">//                                      [ 0, 1, 0 ]</font></i>
          <i><font color="#9A1900">// sparsity for V(x) = W(x) + S_1 (x) * [ 1, 0, 0 ] * R</font></i>
          <i><font color="#9A1900">//                                      [ 0, 0, 0 ]</font></i>
          <b><font color="#0000FF">if</font></b><font color="#990000">(</font> s<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">)</font>
          <font color="#FF0000">{</font>    <i><font color="#9A1900">// v[0] = union( v[0], r[1] )</font></i>
               v<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#000000">set_union</font></b><font color="#990000">(</font>v<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">],</font> r<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]);</font>
               <i><font color="#9A1900">// v[1] = union( v[1], r[0] )</font></i>
               v<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#000000">set_union</font></b><font color="#990000">(</font>v<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">],</font> r<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]);</font>
          <font color="#FF0000">}</font>
          <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
     <font color="#FF0000">}</font></tt></pre>
<br>
<b><big><a name="End Class Definition" id="End Class Definition">End Class Definition</a></big></b>

<pre style='display:inline'><tt>
<font color="#FF0000">}</font><font color="#990000">;</font> <i><font color="#9A1900">// End of atomic_set_sparsity class</font></i>
<font color="#FF0000">}</font>  <i><font color="#9A1900">// End empty namespace</font></i>

</tt></pre>
<b><big><a name="Test Atomic Function" id="Test Atomic Function">Test Atomic Function</a></big></b>

<pre><tt><font color="#009900">bool</font> <b><font color="#000000">set_sparsity</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
<font color="#FF0000">{</font>    <font color="#009900">bool</font> ok <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
     <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>AD<font color="#990000">;</font>
     <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>NearEqual<font color="#990000">;</font>
     <font color="#009900">double</font> eps <font color="#990000">=</font> <font color="#993399">10</font><font color="#990000">.</font> <font color="#990000">*</font> std<font color="#990000">::</font>numeric_limits<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;::</font><b><font color="#000000">epsilon</font></b><font color="#990000">();</font></tt></pre>
<br>
<b><a name="Test Atomic Function.Constructor" id="Test Atomic Function.Constructor">Constructor</a></b>

<pre style='display:inline'><tt>
     <i><font color="#9A1900">// Create the atomic get_started object</font></i>
     <font color="#008080">atomic_set_sparsity</font> <b><font color="#000000">afun</font></b><font color="#990000">(</font><font color="#FF0000">"atomic_set_sparsity"</font><font color="#990000">);</font>
</tt></pre>
<br>
<b><a name="Test Atomic Function.Recording" id="Test Atomic Function.Recording">Recording</a></b>

<pre><tt>     <font color="#008080">size_t</font> n <font color="#990000">=</font> <font color="#993399">3</font><font color="#990000">;</font>
     <font color="#008080">size_t</font> m <font color="#990000">=</font> <font color="#993399">2</font><font color="#990000">;</font>
     <font color="#008080">vector&lt; AD&lt;double&gt; &gt;</font> <b><font color="#000000">ax</font></b><font color="#990000">(</font>n<font color="#990000">),</font> <b><font color="#000000">ay</font></b><font color="#990000">(</font>m<font color="#990000">);</font>
     <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> j<font color="#990000">++)</font>
          ax<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> <font color="#009900">double</font><font color="#990000">(</font>j <font color="#990000">+</font> <font color="#993399">1</font><font color="#990000">);</font>

     <i><font color="#9A1900">// declare independent variables and start tape recording</font></i>
     CppAD<font color="#990000">::</font><b><font color="#000000">Independent</font></b><font color="#990000">(</font>ax<font color="#990000">);</font>

     <i><font color="#9A1900">// call user function</font></i>
     <b><font color="#000000">afun</font></b><font color="#990000">(</font>ax<font color="#990000">,</font> ay<font color="#990000">);</font>

     <i><font color="#9A1900">// create f: x -&gt; y and stop tape recording</font></i>
     CppAD<font color="#990000">::</font><font color="#008080">ADFun&lt;double&gt;</font> f<font color="#990000">;</font>
     f<font color="#990000">.</font><b><font color="#000000">Dependent</font></b> <font color="#990000">(</font>ax<font color="#990000">,</font> ay<font color="#990000">);</font>  <i><font color="#9A1900">// f(x) = x</font></i>

     <i><font color="#9A1900">// check function value</font></i>
     ok <font color="#990000">&amp;=</font> <b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>ay<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">,</font> ax<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">],</font>  eps<font color="#990000">,</font> eps<font color="#990000">);</font>
     ok <font color="#990000">&amp;=</font> <b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>ay<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">,</font> ax<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">*</font> ax<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">],</font>  eps<font color="#990000">,</font> eps<font color="#990000">);</font>
</tt></pre>
<b><a name="Test Atomic Function.for_sparse_jac" id="Test Atomic Function.for_sparse_jac">for_sparse_jac</a></b>

<pre><tt>     <i><font color="#9A1900">// correct Jacobian result</font></i>
     <font color="#008080">set_vector</font> <b><font color="#000000">check_s</font></b><font color="#990000">(</font>m<font color="#990000">);</font>
     check_s<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">].</font><b><font color="#000000">insert</font></b><font color="#990000">(</font><font color="#993399">2</font><font color="#990000">);</font>
     check_s<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">].</font><b><font color="#000000">insert</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">);</font>
     check_s<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">].</font><b><font color="#000000">insert</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">);</font>
     <i><font color="#9A1900">// compute and test forward mode</font></i>
     <font color="#FF0000">{</font>    <font color="#008080">set_vector</font> <b><font color="#000000">r</font></b><font color="#990000">(</font>n<font color="#990000">),</font> <b><font color="#000000">s</font></b><font color="#990000">(</font>m<font color="#990000">);</font>
          <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> n<font color="#990000">;</font> i<font color="#990000">++)</font>
               r<font color="#990000">[</font>i<font color="#990000">].</font><b><font color="#000000">insert</font></b><font color="#990000">(</font>i<font color="#990000">);</font>
          s <font color="#990000">=</font> f<font color="#990000">.</font><b><font color="#000000">ForSparseJac</font></b><font color="#990000">(</font>n<font color="#990000">,</font> r<font color="#990000">);</font>
          <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> m<font color="#990000">;</font> i<font color="#990000">++)</font>
               ok <font color="#990000">&amp;=</font> s<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">==</font> check_s<font color="#990000">[</font>i<font color="#990000">];</font>
     <font color="#FF0000">}</font></tt></pre>
<br>
<b><a name="Test Atomic Function.rev_sparse_jac" id="Test Atomic Function.rev_sparse_jac">rev_sparse_jac</a></b>

<pre><tt>     <i><font color="#9A1900">// compute and test reverse mode</font></i>
     <font color="#FF0000">{</font>    <font color="#008080">set_vector</font> <b><font color="#000000">r</font></b><font color="#990000">(</font>m<font color="#990000">),</font> <b><font color="#000000">s</font></b><font color="#990000">(</font>m<font color="#990000">);</font>
          <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> m<font color="#990000">;</font> i<font color="#990000">++)</font>
               r<font color="#990000">[</font>i<font color="#990000">].</font><b><font color="#000000">insert</font></b><font color="#990000">(</font>i<font color="#990000">);</font>
          s <font color="#990000">=</font> f<font color="#990000">.</font><b><font color="#000000">RevSparseJac</font></b><font color="#990000">(</font>m<font color="#990000">,</font> r<font color="#990000">);</font>
          <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> m<font color="#990000">;</font> i<font color="#990000">++)</font>
               ok <font color="#990000">&amp;=</font> s<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">==</font> check_s<font color="#990000">[</font>i<font color="#990000">];</font>
     <font color="#FF0000">}</font></tt></pre>
<br>
<b><a name="Test Atomic Function.for_sparse_hes" id="Test Atomic Function.for_sparse_hes">for_sparse_hes</a></b>

<pre><tt>     <i><font color="#9A1900">// correct Hessian result</font></i>
     <font color="#008080">set_vector</font> <b><font color="#000000">check_h</font></b><font color="#990000">(</font>n<font color="#990000">);</font>
     check_h<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">].</font><b><font color="#000000">insert</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">);</font>
     check_h<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">].</font><b><font color="#000000">insert</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">);</font>
     <i><font color="#9A1900">// compute and test forward mode</font></i>
     <font color="#FF0000">{</font>    <font color="#008080">set_vector</font> <b><font color="#000000">r</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">),</font> <b><font color="#000000">s</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">),</font> <b><font color="#000000">h</font></b><font color="#990000">(</font>n<font color="#990000">);</font>
          <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> m<font color="#990000">;</font> i<font color="#990000">++)</font>
               s<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">].</font><b><font color="#000000">insert</font></b><font color="#990000">(</font>i<font color="#990000">);</font>
          <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> j<font color="#990000">++)</font>
               r<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">].</font><b><font color="#000000">insert</font></b><font color="#990000">(</font>j<font color="#990000">);</font>
          h <font color="#990000">=</font> f<font color="#990000">.</font><b><font color="#000000">ForSparseHes</font></b><font color="#990000">(</font>r<font color="#990000">,</font> s<font color="#990000">);</font>
          <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> n<font color="#990000">;</font> i<font color="#990000">++)</font>
               ok <font color="#990000">&amp;=</font> h<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">==</font> check_h<font color="#990000">[</font>i<font color="#990000">];</font>
     <font color="#FF0000">}</font></tt></pre>
<br>
<b><a name="Test Atomic Function.rev_sparse_hes" id="Test Atomic Function.rev_sparse_hes">rev_sparse_hes</a></b>
<br>
Note the previous call to <code><font color="blue">ForSparseJac</font></code> above
stored its results in 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
.
<pre><tt>     <i><font color="#9A1900">// compute and test reverse mode</font></i>
     <font color="#FF0000">{</font>    <font color="#008080">set_vector</font> <b><font color="#000000">s</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">),</font> <b><font color="#000000">h</font></b><font color="#990000">(</font>n<font color="#990000">);</font>
          <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> m<font color="#990000">;</font> i<font color="#990000">++)</font>
               s<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">].</font><b><font color="#000000">insert</font></b><font color="#990000">(</font>i<font color="#990000">);</font>
          h <font color="#990000">=</font> f<font color="#990000">.</font><b><font color="#000000">RevSparseHes</font></b><font color="#990000">(</font>n<font color="#990000">,</font> s<font color="#990000">);</font>
          <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> n<font color="#990000">;</font> i<font color="#990000">++)</font>
               ok <font color="#990000">&amp;=</font> h<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">==</font> check_h<font color="#990000">[</font>i<font color="#990000">];</font>
     <font color="#FF0000">}</font></tt></pre>
<br>
<b><a name="Test Atomic Function.Test Result" id="Test Atomic Function.Test Result">Test Result</a></b>

<pre style='display:inline'><tt>
     <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
<font color="#FF0000">}</font>
</tt></pre>

<hr>Input File: example/atomic/set_sparsity.cpp

</body>
</html>

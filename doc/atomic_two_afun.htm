<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Using AD Version of Atomic Function</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Using AD Version of Atomic Function">
<meta name="keywords" id="keywords" content=" using ad version atomic function syntax purpose advector afun ax ay ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_atomic_two_afun_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="atomic_two_option.htm" target="_top">Prev</a>
</td><td><a href="atomic_two_forward.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>Appendix</option>
<option>deprecated</option>
<option>atomic_two</option>
<option>atomic_two_afun</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>Appendix-&gt;</option>
<option>Faq</option>
<option>directory</option>
<option>glossary</option>
<option>Bib</option>
<option>wish_list</option>
<option>whats_new</option>
<option>deprecated</option>
<option>compare_c</option>
<option>numeric_ad</option>
<option>addon</option>
<option>License</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>deprecated-&gt;</option>
<option>include_deprecated</option>
<option>FunDeprecated</option>
<option>CompareChange</option>
<option>omp_max_thread</option>
<option>TrackNewDel</option>
<option>omp_alloc</option>
<option>memory_leak</option>
<option>epsilon</option>
<option>test_vector</option>
<option>cppad_ipopt_nlp</option>
<option>atomic_one</option>
<option>atomic_two</option>
<option>atomic_two_example</option>
<option>zdouble</option>
<option>autotools</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>atomic_two-&gt;</option>
<option>atomic_two_ctor</option>
<option>atomic_two_option</option>
<option>atomic_two_afun</option>
<option>atomic_two_forward</option>
<option>atomic_two_reverse</option>
<option>atomic_two_for_sparse_jac</option>
<option>atomic_two_rev_sparse_jac</option>
<option>atomic_two_for_sparse_hes</option>
<option>atomic_two_rev_sparse_hes</option>
<option>atomic_two_clear</option>
</select>
</td>
<td>atomic_two_afun</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Purpose</option>
<option>ADVector</option>
<option>afun</option>
<option>ax</option>
<option>ay</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@



<center><b><big><big>Using AD Version of Atomic Function</big></big></b></center>
<br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>afun</span></font></i><font color="blue"><span style='white-space: nowrap'>(</span></font><i><font color="black"><span style='white-space: nowrap'>ax</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ay</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>


<br>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
Given 
<code><i><font color="black"><span style='white-space: nowrap'>ax</span></font></i></code>
,
this call computes the corresponding value of 
<code><i><font color="black"><span style='white-space: nowrap'>ay</span></font></i></code>
.
If 
<code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>
 operations are being recorded,
it enters the computation as an atomic operation in the recording;
see <a href="independent.htm#Start Recording" target="_top"><span style='white-space: nowrap'>start&nbsp;recording</span></a>
.

<br>
<br>
<b><big><a name="ADVector" id="ADVector">ADVector</a></big></b>
<br>
The type 
<code><i><font color="black"><span style='white-space: nowrap'>ADVector</span></font></i></code>
 must be a
<a href="simplevector.htm" target="_top"><span style='white-space: nowrap'>simple&nbsp;vector&nbsp;class</span></a>
 with elements of type

<code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>
; see <a href="atomic_two_ctor.htm#atomic_base.Base" target="_top"><span style='white-space: nowrap'>Base</span></a>
.

<br>
<br>
<b><big><a name="afun" id="afun">afun</a></big></b>
<br>
is a <a href="atomic_two_ctor.htm#atomic_user" target="_top"><span style='white-space: nowrap'>atomic_user</span></a>
 object
and this 
<code><i><font color="black"><span style='white-space: nowrap'>afun</span></font></i></code>
 function call is implemented by the
<a href="atomic_two_ctor.htm#atomic_base" target="_top"><span style='white-space: nowrap'>atomic</span></a>
 class.

<br>
<br>
<b><big><a name="ax" id="ax">ax</a></big></b>
<br>
This argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ADVector</span></font></i><font color="blue"><span style='white-space: nowrap'>&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ax</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
and size must be equal to 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>
.
It specifies vector <small>@(@
x \in \B{R}^n
@)@</small>
at which an 
<code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>
 version of
<small>@(@
y = f(x)
@)@</small> is to be evaluated; see
<a href="atomic_two_ctor.htm#atomic_base.Base" target="_top"><span style='white-space: nowrap'>Base</span></a>
.

<br>
<br>
<b><big><a name="ay" id="ay">ay</a></big></b>
<br>
This argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ADVector</span></font></i><font color="blue"><span style='white-space: nowrap'>&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ay</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
and size must be equal to 
<code><i><font color="black"><span style='white-space: nowrap'>m</span></font></i></code>
.
The input values of its elements
are not specified (must not matter).
Upon return, it is an 
<code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>
 version of
<small>@(@
y = f(x)
@)@</small>.


<hr>Input File: include/cppad/core/atomic/two_afun.hpp

</body>
</html>

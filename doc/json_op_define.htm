<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Json Operator Definitions</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Json Operator Definitions">
<meta name="keywords" id="keywords" content=" json operator definitions notation op_code arguments unary operators example binary add div mul sub sum conditional expressions cexp_eq cexp_le cexp_lt other comparisons atom call_name n_result n_arg first_arg ... last_arg ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_json_op_define_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="json_ad_graph.htm" target="_top">Prev</a>
</td><td><a href="json_unary_op.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>ADFun</option>
<option>other_adfun</option>
<option>json_ad_graph</option>
<option>json_op_define</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_adfun_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_other_adfun_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_json_ad_graph_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_json_op_define_htm.js'></script>
</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Notation</option>
<option>---..op_code</option>
<option>---..Arguments</option>
<option>Unary Operators</option>
<option>---..Example</option>
<option>Binary Operators</option>
<option>---..add</option>
<option>---..div</option>
<option>---..mul</option>
<option>---..sub</option>
<option>sum</option>
<option>---..Example</option>
<option>Conditional Expressions</option>
<option>---..Example</option>
<option>---..cexp_eq</option>
<option>---..cexp_le</option>
<option>---..cexp_lt</option>
<option>---..Other Comparisons</option>
<option>atom</option>
<option>---..Example</option>
<option>---..call_name</option>
<option>---..n_result</option>
<option>---..n_arg</option>
<option>---..first_arg, ..., last_arg</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<center><b><big><big>Json Operator Definitions</big></big></b></center>
<br>
<b><big><a name="Notation" id="Notation">Notation</a></big></b>


<br>
<br>
<big><a name="Notation.op_code" id="Notation.op_code">op_code</a></big>
<br>
Each operator definition has a 
<code><i><font color="black"><span style='white-space: nowrap'>op_code</span></font></i></code>
 value that
is used to identify it for a particular 
<code><i><font color="black"><span style='white-space: nowrap'>json_ad_graph</span></font></i></code>
.

<br>
<br>
<big><a name="Notation.Arguments" id="Notation.Arguments">Arguments</a></big>
<br>
The values 
<code><i><font color="black"><span style='white-space: nowrap'>first_arg</span></font></i></code>
, ... ,
<a href="json_ad_graph.htm#op_usage.first_arg, ..., last_arg" target="_top"><span style='white-space: nowrap'>last_arg</span></a>

are the node indices for arguments to an operator.

<br>
<br>
<b><big><a name="Unary Operators" id="Unary Operators">Unary Operators</a></big></b>
<br>
All these operations create one result node and
have the following Json definition:

<code><font color="blue"><span style='white-space: nowrap'><br>
{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;op_code&quot;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>op_code</span></font></i><font color="blue"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;name&quot;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>name</span></font></i><font color="blue"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;n_arg&quot;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1<br>
}<br>
</span></font></code>
where 
<code><i><font color="black"><span style='white-space: nowrap'>name</span></font></i></code>
 is a <a href="json_ad_graph.htm#Token.String" target="_top"><span style='white-space: nowrap'>string</span></a>
.
A corresponding 
<code><i><font color="black"><span style='white-space: nowrap'>op_usage</span></font></i></code>
 has the form

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>op_code</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>arg</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;]<br>
</span></font></code>
The possible values for the string 
<code><i><font color="black"><span style='white-space: nowrap'>name</span></font></i></code>
 are listed
in the table below.
The result is the node value as a function of the
argument value.
If c++11 is yes (no),
then c++11 or higher is required to use the operator with CppAD.

<table><tr><td align='left'  valign='top'>


<code><i><font color="black"><span style='white-space: nowrap'>name</span></font></i></code>
   </td><td align='left'  valign='top'>
 result                           </td><td align='left'  valign='top'>
 c++11 </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">abs</font></code>     </td><td align='left'  valign='top'>
 absolute value                   </td><td align='left'  valign='top'>
 no </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">acos</font></code>    </td><td align='left'  valign='top'>
 inverse cosine                   </td><td align='left'  valign='top'>
 no </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">asin</font></code>    </td><td align='left'  valign='top'>
 inverse sine                     </td><td align='left'  valign='top'>
 no </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">atan</font></code>    </td><td align='left'  valign='top'>
 inverse tangent                  </td><td align='left'  valign='top'>
 no </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">cosh</font></code>    </td><td align='left'  valign='top'>
 hyperbolic cosine                </td><td align='left'  valign='top'>
 no </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">cos</font></code>     </td><td align='left'  valign='top'>
 cosine                           </td><td align='left'  valign='top'>
 no </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">exp</font></code>     </td><td align='left'  valign='top'>
 exponential                      </td><td align='left'  valign='top'>
 no </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">log</font></code>     </td><td align='left'  valign='top'>
 logarithm                        </td><td align='left'  valign='top'>
 no </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">sign</font></code>    </td><td align='left'  valign='top'>
 sign function                    </td><td align='left'  valign='top'>
 no </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">sinh</font></code>    </td><td align='left'  valign='top'>
 hyperbolic sine                  </td><td align='left'  valign='top'>
 no </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">sin</font></code>     </td><td align='left'  valign='top'>
 sine                             </td><td align='left'  valign='top'>
 no </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">sqrt</font></code>    </td><td align='left'  valign='top'>
 square root                      </td><td align='left'  valign='top'>
 no </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">tanh</font></code>    </td><td align='left'  valign='top'>
 hyperbolic tangent               </td><td align='left'  valign='top'>
 no </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">tan</font></code>     </td><td align='left'  valign='top'>
 tangent                          </td><td align='left'  valign='top'>
 no </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">asinh</font></code>   </td><td align='left'  valign='top'>
 inverse hyperbolic sine          </td><td align='left'  valign='top'>
 yes </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">atanh</font></code>   </td><td align='left'  valign='top'>
 inverse hyperbolic sine          </td><td align='left'  valign='top'>
 yes </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">erf</font></code>     </td><td align='left'  valign='top'>
 error functions                  </td><td align='left'  valign='top'>
 yes </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">erfc</font></code>    </td><td align='left'  valign='top'>
 complementary error function     </td><td align='left'  valign='top'>
 yes </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">expm1</font></code>   </td><td align='left'  valign='top'>
 minus one plus the exponential   </td><td align='left'  valign='top'>
 yes </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">log1p</font></code>   </td><td align='left'  valign='top'>
 log  plus one                    </td><td align='left'  valign='top'>
 yes </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">acosh</font></code>   </td><td align='left'  valign='top'>
 inverse hyperbolic cosine        </td><td align='left'  valign='top'>
 yes
</td></tr>
</table>
<br>
<big><a name="Unary Operators.Example" id="Unary Operators.Example">Example</a></big>
<br>
The file <a href="json_unary_op.cpp.htm" target="_top"><span style='white-space: nowrap'>json_unary_op.cpp</span></a>
 is an example and test
for one of these operators.

<br>
<br>
<b><big><a name="Binary Operators" id="Binary Operators">Binary Operators</a></big></b>
<br>
All these operations create one result node and
have the following Json definition:

<code><font color="blue"><span style='white-space: nowrap'><br>
{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;op_code&quot;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>op_code</span></font></i><font color="blue"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;name&quot;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>name</span></font></i><font color="blue"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;n_arg&quot;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2<br>
}<br>
</span></font></code>
where 
<code><i><font color="black"><span style='white-space: nowrap'>name</span></font></i></code>
 is a <a href="json_ad_graph.htm#Token.String" target="_top"><span style='white-space: nowrap'>string</span></a>
.
A corresponding 
<code><i><font color="black"><span style='white-space: nowrap'>op_usage</span></font></i></code>
 has the form

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>op_code</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>first_arg</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>second_arg</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;]<br>
</span></font></code>
The possible values for the string 
<code><i><font color="black"><span style='white-space: nowrap'>name</span></font></i></code>
 are listed below:

<br>
<br>
<big><a name="Binary Operators.add" id="Binary Operators.add">add</a></big>
<br>
The result is
the first argument value plus the second argument value; see
the example and test <a href="json_add_op.cpp.htm" target="_top"><span style='white-space: nowrap'>json_add_op.cpp</span></a>
.

<br>
<br>
<big><a name="Binary Operators.div" id="Binary Operators.div">div</a></big>
<br>
The result is
the first argument value divided by the second argument value; see
the example and test <a href="json_div_op.cpp.htm" target="_top"><span style='white-space: nowrap'>json_div_op.cpp</span></a>
.

<br>
<br>
<big><a name="Binary Operators.mul" id="Binary Operators.mul">mul</a></big>
<br>
The result is
the first argument value times the second argument value; see
the example and test <a href="json_mul_op.cpp.htm" target="_top"><span style='white-space: nowrap'>json_mul_op.cpp</span></a>
.

<br>
<br>
<big><a name="Binary Operators.sub" id="Binary Operators.sub">sub</a></big>
<br>
The result is
the first argument value minus the second argument value; see
the example and test <a href="json_sub_op.cpp.htm" target="_top"><span style='white-space: nowrap'>json_sub_op.cpp</span></a>
.

<br>
<br>
<b><big><a name="sum" id="sum">sum</a></big></b>
<br>
This operator has the following Json definition:

<code><font color="blue"><span style='white-space: nowrap'><br>
{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;op_code&quot;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>op_code</span></font></i><font color="blue"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;name&quot;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;sum&quot;<br>
}<br>
</span></font></code>
A corresponding 
<code><i><font color="black"><span style='white-space: nowrap'>op_usage</span></font></i></code>
 has the form

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>op_code</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_result</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_arg</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>first_arg</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>...</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>last_arg</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;]&nbsp;]<br>
</span></font></code>
where 
<code><i><font color="black"><span style='white-space: nowrap'>n_result</span></font></i></code>
 is always <code><font color="blue">1</font></code>.
This operation creates one node with value equal to
the sum of values corresponding to all of its argument nodes.

<br>
<br>
<big><a name="sum.Example" id="sum.Example">Example</a></big>
<br>
The file <a href="json_sum_op.cpp.htm" target="_top"><span style='white-space: nowrap'>json_sum_op.cpp</span></a>
 is an example and test
of this operation.

<br>
<br>
<b><big><a name="Conditional Expressions" id="Conditional Expressions">Conditional Expressions</a></big></b>
<br>
These operators are <a href="condexp.htm" target="_top"><span style='white-space: nowrap'>conditional&nbsp;expressions</span></a>

and have the following Json definition:

<code><font color="blue"><span style='white-space: nowrap'><br>
{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;op_code&quot;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>op_code</span></font></i><font color="blue"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;name&quot;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;cexp_</span></font><i><font color="black"><span style='white-space: nowrap'>rel</span></font></i><font color="blue"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;n_arg&quot;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4<br>
}<br>
</span></font></code>
where 
<code><i><font color="black"><span style='white-space: nowrap'>rel</span></font></i></code>
 is <code><font color="blue">eq</font></code> (equal), <code><font color="blue">le</font></code>, or <code><font color="blue">lt</font></code>.
The first argument is <a href="condexp.htm#left" target="_top"><span style='white-space: nowrap'>left</span></a>
,
the second is <a href="condexp.htm#right" target="_top"><span style='white-space: nowrap'>right</span></a>
,
the third is <a href="condexp.htm#if_true" target="_top"><span style='white-space: nowrap'>if_true</span></a>
,
the fourth is <a href="condexp.htm#if_false" target="_top"><span style='white-space: nowrap'>if_false</span></a>
.
The result for this operator is given by

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;if(&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>left</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>cop</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>right</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>result</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>if_true</span></font></i><font color="blue"><span style='white-space: nowrap'>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;else<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>result</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>if_false</span></font></i><font color="blue"><span style='white-space: nowrap'>;<br>
</span></font></code>
where the comparison 
<code><i><font color="black"><span style='white-space: nowrap'>cop</span></font></i></code>
 is define by the cases below:

<br>
<br>
<big><a name="Conditional Expressions.Example" id="Conditional Expressions.Example">Example</a></big>
<br>
The file <a href="json_cexp_op.cpp.htm" target="_top"><span style='white-space: nowrap'>json_cexp_op.cpp</span></a>
 is an example and test
for one of these operators.

<br>
<br>
<big><a name="Conditional Expressions.cexp_eq" id="Conditional Expressions.cexp_eq">cexp_eq</a></big>
<br>
For this operator 
<code><i><font color="black"><span style='white-space: nowrap'>cop</span></font></i></code>
 is <code><font color="blue">==</font></code>

<br>
<br>
<big><a name="Conditional Expressions.cexp_le" id="Conditional Expressions.cexp_le">cexp_le</a></big>
<br>
For this operator 
<code><i><font color="black"><span style='white-space: nowrap'>cop</span></font></i></code>
 is <code><font color="blue">&lt;=</font></code>

<br>
<br>
<big><a name="Conditional Expressions.cexp_lt" id="Conditional Expressions.cexp_lt">cexp_lt</a></big>
<br>
For this operator 
<code><i><font color="black"><span style='white-space: nowrap'>cop</span></font></i></code>
 is <code><font color="blue">&lt;</font></code>


<br>
<br>
<big><a name="Conditional Expressions.Other Comparisons" id="Conditional Expressions.Other Comparisons">Other Comparisons</a></big>
<br>
Note that

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;CondExpGt(</span></font><i><font color="black"><span style='white-space: nowrap'>left</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>right</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>if_true</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>if_false</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
is equivalent to

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;CondExpLe(</span></font><i><font color="black"><span style='white-space: nowrap'>left</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>right</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>if_false</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>if_true</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
Similar conversions can be used for all the possible
<a href="condexp.htm" target="_top"><span style='white-space: nowrap'>conditional&nbsp;expressions</span></a>
.

<br>
<br>
<b><big><a name="atom" id="atom">atom</a></big></b>
<br>
This operator has the following Json definition:

<code><font color="blue"><span style='white-space: nowrap'><br>
{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;op_code&quot;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>op_code</span></font></i><font color="blue"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;name&quot;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;atom&quot;<br>
}<br>
</span></font></code>
A corresponding 
<code><i><font color="black"><span style='white-space: nowrap'>op_usage</span></font></i></code>
 has the form

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>op_code</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>name</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_result</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_arg</span></font></i><font color="blue"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>first_arg</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>...</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>last_arg</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;]<br>
</span></font></code>
This operator creates 
<code><i><font color="black"><span style='white-space: nowrap'>n_result</span></font></i></code>
 nodes with values equal to
an evaluation of the <code><font color="blue">atomic_three</font></code> function specified by
<a href="atomic_three_ctor.htm#atomic_three.name" target="_top"><span style='white-space: nowrap'>name</span></a>
.
The number of arguments (results) must equal the domain (range)
dimension for the atomic function.
The values corresponding to the indices

<code><i><font color="black"><span style='white-space: nowrap'>first_arg</span></font></i></code>
, ..., 
<code><i><font color="black"><span style='white-space: nowrap'>last_arg</span></font></i></code>
 specify the
value for the independent variables during checkpoint function evaluation.
In the case where the atomic function is a <code><font color="blue">chkpoint_two</font></code> function,
the independent dynamic parameters are specified by calling its
<a href="chkpoint_two.htm#Syntax.new_dynamic" target="_top"><span style='white-space: nowrap'>new_dynamic</span></a>
 routine.

<br>
<br>
<big><a name="atom.Example" id="atom.Example">Example</a></big>
<br>
the example and test <a href="json_atom_op.cpp.htm" target="_top"><span style='white-space: nowrap'>json_atom_op.cpp</span></a>
.

<br>
<br>
<big><a name="atom.call_name" id="atom.call_name">call_name</a></big>
<br>
This is a <a href="json_ad_graph.htm#Token" target="_top"><span style='white-space: nowrap'>string</span></a>
 containing the
<a href="json_ad_graph.htm#AD Graph.function_name" target="_top"><span style='white-space: nowrap'>function_name</span></a>

for the function being called.

<br>
<br>
<big><a name="atom.n_result" id="atom.n_result">n_result</a></big>
<br>
The must be equal to
<a href="json_ad_graph.htm#dependent_vec.n_dependent" target="_top"><span style='white-space: nowrap'>n_dependent</span></a>

for the function specified by 
<code><i><font color="black"><span style='white-space: nowrap'>call_name</span></font></i></code>
.

<br>
<br>
<big><a name="atom.n_arg" id="atom.n_arg">n_arg</a></big>
<br>
The must be equal to
<a href="json_ad_graph.htm#independent_vec.n_independent" target="_top"><span style='white-space: nowrap'>n_independent</span></a>

for the function specified by 
<code><i><font color="black"><span style='white-space: nowrap'>call_name</span></font></i></code>
.

<br>
<br>
<big><a name="atom.first_arg, ..., last_arg" id="atom.first_arg, ..., last_arg">first_arg, ..., last_arg</a></big>
<br>
These are the node indices that specify the value of the
independent variable vector in the call to 
<code><i><font color="black"><span style='white-space: nowrap'>call_name</span></font></i></code>
.





<hr>Input File: include/cppad/core/json/op_define.omh

</body>
</html>

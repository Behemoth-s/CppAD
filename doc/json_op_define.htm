<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Json Operator Definitions</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Json Operator Definitions">
<meta name="keywords" id="keywords" content=" json operator definitions notation op_code arguments add example atom div call_name n_result n_arg first_arg ... last_arg mul sub sum ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_json_op_define_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="json_ad_graph.htm" target="_top">Prev</a>
</td><td><a href="json_add_op.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>ADFun</option>
<option>other_adfun</option>
<option>json_ad_graph</option>
<option>json_op_define</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_adfun_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_other_adfun_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_json_ad_graph_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_json_op_define_htm.js'></script>
</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Notation</option>
<option>---..op_code</option>
<option>---..Arguments</option>
<option>add</option>
<option>---..Example</option>
<option>atom</option>
<option>---..Example</option>
<option>div</option>
<option>---..Example</option>
<option>---..call_name</option>
<option>---..n_result</option>
<option>---..n_arg</option>
<option>---..first_arg, ..., last_arg</option>
<option>mul</option>
<option>---..Example</option>
<option>sub</option>
<option>---..Example</option>
<option>sum</option>
<option>---..Example</option>
<option>Contents</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<center><b><big><big>Json Operator Definitions</big></big></b></center>
<br>
<b><big><a name="Notation" id="Notation">Notation</a></big></b>


<br>
<br>
<big><a name="Notation.op_code" id="Notation.op_code">op_code</a></big>
<br>
Each operator definition has a 
<code><i><font color="black"><span style='white-space: nowrap'>op_code</span></font></i></code>
 value that
is used to identify it for a particular 
<code><i><font color="black"><span style='white-space: nowrap'>json_ad_graph</span></font></i></code>
.

<br>
<br>
<big><a name="Notation.Arguments" id="Notation.Arguments">Arguments</a></big>
<br>
The values
<a href="json_ad_graph.htm#op_usage.first_arg, ..., last_arg" target="_top"><span style='white-space: nowrap'>first_arg,&nbsp;...,&nbsp;last_arg</span></a>

are the node indices for arguments to an operator.
Unless otherwise specified,
arguments are not string; i.e.,
the corresponding nodes are not in <a href="json_ad_graph.htm#string_vec" target="_top"><span style='white-space: nowrap'>strings</span></a>
.

<br>
<br>
<b><big><a name="add" id="add">add</a></big></b>
<br>
This operator has the following Json definition:

<code><font color="blue"><span style='white-space: nowrap'><br>
{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;op_code&quot;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>op_code</span></font></i><font color="blue"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;name&quot;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;add&quot;,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;n_arg&quot;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2<br>
}<br>
</span></font></code>
A corresponding 
<code><i><font color="black"><span style='white-space: nowrap'>op_usage</span></font></i></code>
 has the form

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>op_code</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>first_arg</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>second_arg</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;]<br>
</span></font></code>
This operation creates one node with value equal to
the first argument value plus the second argument value.

<br>
<br>
<big><a name="add.Example" id="add.Example">Example</a></big>
<br>
The file <a href="json_add_op.cpp.htm" target="_top"><span style='white-space: nowrap'>json_add_op.cpp</span></a>
 is an example and test of this operation.

<br>
<br>
<b><big><a name="atom" id="atom">atom</a></big></b>
<br>
This operator has the following Json definition:

<code><font color="blue"><span style='white-space: nowrap'><br>
{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;op_code&quot;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>op_code</span></font></i><font color="blue"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;name&quot;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;atom&quot;<br>
}<br>
</span></font></code>
A corresponding 
<code><i><font color="black"><span style='white-space: nowrap'>op_usage</span></font></i></code>
 has the form

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>op_code</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>name</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_result</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_arg</span></font></i><font color="blue"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>first_arg</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>...</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>last_arg</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;]<br>
</span></font></code>
This operator creates 
<code><i><font color="black"><span style='white-space: nowrap'>n_result</span></font></i></code>
 nodes with values equal to
an evaluation of the <code><font color="blue">atomic_three</font></code> function specified by
<a href="atomic_three_ctor.htm#atomic_three.name" target="_top"><span style='white-space: nowrap'>name</span></a>
.
The number of arguments (results) must equal the domain (range)
dimension for the atomic function.
The values corresponding to the indices

<code><i><font color="black"><span style='white-space: nowrap'>first_arg</span></font></i></code>
, ..., 
<code><i><font color="black"><span style='white-space: nowrap'>last_arg</span></font></i></code>
 specify the
value for the independent variables during checkpoint function evaluation.
In the case where the atomic function is a <code><font color="blue">chkpoint_two</font></code> function,
the independent dynamic parameters are specified by calling its
<a href="chkpoint_two.htm#Syntax.new_dynamic" target="_top"><span style='white-space: nowrap'>new_dynamic</span></a>
 routine.

<br>
<br>
<big><a name="atom.Example" id="atom.Example">Example</a></big>
<br>
The file <a href="json_atom_op.cpp.htm" target="_top"><span style='white-space: nowrap'>json_atom_op.cpp</span></a>
 is an example and test of this operation.

<br>
<br>
<b><big><a name="div" id="div">div</a></big></b>
<br>
This operator has the following Json definition:

<code><font color="blue"><span style='white-space: nowrap'><br>
{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;op_code&quot;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>op_code</span></font></i><font color="blue"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;name&quot;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;div&quot;,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;n_arg&quot;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2<br>
}<br>
</span></font></code>
A corresponding 
<code><i><font color="black"><span style='white-space: nowrap'>op_usage</span></font></i></code>
 has the form

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>op_code</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>first_arg</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>second_arg</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&nbsp;]<br>
</span></font></code>
This operation creates one node with value equal to
the first argument value divided by the second argument value.

<br>
<br>
<big><a name="div.Example" id="div.Example">Example</a></big>
<br>
The file <a href="json_div_op.cpp.htm" target="_top"><span style='white-space: nowrap'>json_div_op.cpp</span></a>
 is an example and test of this operation.

<br>
<br>
<big><a name="div.call_name" id="div.call_name">call_name</a></big>
<br>
This is a <a href="json_ad_graph.htm#Token" target="_top"><span style='white-space: nowrap'>string</span></a>
 containing the
<a href="json_ad_graph.htm#AD Graph.function_name" target="_top"><span style='white-space: nowrap'>function_name</span></a>

for the function being called.

<br>
<br>
<big><a name="div.n_result" id="div.n_result">n_result</a></big>
<br>
The must be equal to
<a href="json_ad_graph.htm#dependent_vec.n_dependent" target="_top"><span style='white-space: nowrap'>n_dependent</span></a>

for the function specified by 
<code><i><font color="black"><span style='white-space: nowrap'>call_name</span></font></i></code>
.

<br>
<br>
<big><a name="div.n_arg" id="div.n_arg">n_arg</a></big>
<br>
The must be equal to
<a href="json_ad_graph.htm#independent_vec.n_independent" target="_top"><span style='white-space: nowrap'>n_independent</span></a>

for the function specified by 
<code><i><font color="black"><span style='white-space: nowrap'>call_name</span></font></i></code>
.

<br>
<br>
<big><a name="div.first_arg, ..., last_arg" id="div.first_arg, ..., last_arg">first_arg, ..., last_arg</a></big>
<br>
These are the node indices that specify the value of the
independent variable vector in the call to 
<code><i><font color="black"><span style='white-space: nowrap'>call_name</span></font></i></code>
.

<br>
<br>
<b><big><a name="mul" id="mul">mul</a></big></b>
<br>
This operator has the following Json definition:

<code><font color="blue"><span style='white-space: nowrap'><br>
{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;op_code&quot;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>op_code</span></font></i><font color="blue"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;name&quot;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;mul&quot;,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;n_arg&quot;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2<br>
}<br>
</span></font></code>
A corresponding 
<code><i><font color="black"><span style='white-space: nowrap'>op_usage</span></font></i></code>
 has the form

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>op_code</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>first_arg</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>second_arg</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&nbsp;]<br>
</span></font></code>
This operation creates one node with value equal to
the first argument value times the second argument value.

<br>
<br>
<big><a name="mul.Example" id="mul.Example">Example</a></big>
<br>
The file <a href="json_mul_op.cpp.htm" target="_top"><span style='white-space: nowrap'>json_mul_op.cpp</span></a>
 is an example and test of this operation.

<br>
<br>
<b><big><a name="sub" id="sub">sub</a></big></b>
<br>
This operator has the following Json definition:

<code><font color="blue"><span style='white-space: nowrap'><br>
{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;op_code&quot;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>op_code</span></font></i><font color="blue"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;name&quot;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;sub&quot;,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;n_arg&quot;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2<br>
}<br>
</span></font></code>
A corresponding 
<code><i><font color="black"><span style='white-space: nowrap'>op_usage</span></font></i></code>
 has the form

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>op_code</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>first_arg</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>second_arg</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;]<br>
</span></font></code>
This operation creates one node with value equal to
the first argument value minus the second argument value.

<br>
<br>
<big><a name="sub.Example" id="sub.Example">Example</a></big>
<br>
The file <a href="json_sub_op.cpp.htm" target="_top"><span style='white-space: nowrap'>json_sub_op.cpp</span></a>
 is an example and test of this operation.

<br>
<br>
<b><big><a name="sum" id="sum">sum</a></big></b>
<br>
This operator has the following Json definition:

<code><font color="blue"><span style='white-space: nowrap'><br>
{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;op_code&quot;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>op_code</span></font></i><font color="blue"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;name&quot;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;sum&quot;<br>
}<br>
</span></font></code>
A corresponding 
<code><i><font color="black"><span style='white-space: nowrap'>op_usage</span></font></i></code>
 has the form

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>op_code</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_result</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_arg</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>first_arg</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>...</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>last_arg</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;]&nbsp;]<br>
</span></font></code>
where 
<code><i><font color="black"><span style='white-space: nowrap'>n_result</span></font></i></code>
 is always <code><font color="blue">1</font></code>.
This operation creates one node with value equal to
the sum of values corresponding to all of its argument nodes.

<br>
<br>
<big><a name="sum.Example" id="sum.Example">Example</a></big>
<br>
The file <a href="json_sum_op.cpp.htm" target="_top"><span style='white-space: nowrap'>json_sum_op.cpp</span></a>
 is an example and test of this operation.

<br>
<br>
<b><big><a name="Contents" id="Contents">Contents</a></big></b>
<br>
<table>
<tr><td><a href="json_add_op.cpp.htm" target="_top">json_add_op.cpp</a></td><td>Using&nbsp;The&nbsp;Json&nbsp;Addition&nbsp;Operator:&nbsp;Example&nbsp;and&nbsp;Test</td></tr><tr><td><a href="json_atom_op.cpp.htm" target="_top">json_atom_op.cpp</a></td><td>Using&nbsp;Json&nbsp;Atomic&nbsp;Function&nbsp;Operator:&nbsp;Example&nbsp;and&nbsp;Test</td></tr><tr><td><a href="json_div_op.cpp.htm" target="_top">json_div_op.cpp</a></td><td>Using&nbsp;The&nbsp;Json&nbsp;Division&nbsp;Operator:&nbsp;Example&nbsp;and&nbsp;Test</td></tr><tr><td><a href="json_mul_op.cpp.htm" target="_top">json_mul_op.cpp</a></td><td>Using&nbsp;The&nbsp;Json&nbsp;Multiplication&nbsp;Operator:&nbsp;Example&nbsp;and&nbsp;Test</td></tr><tr><td><a href="json_sub_op.cpp.htm" target="_top">json_sub_op.cpp</a></td><td>Using&nbsp;The&nbsp;Json&nbsp;Subtraction&nbsp;Operator:&nbsp;Example&nbsp;and&nbsp;Test</td></tr><tr><td><a href="json_sum_op.cpp.htm" target="_top">json_sum_op.cpp</a></td><td>Using&nbsp;The&nbsp;Json&nbsp;Sum&nbsp;Operator:&nbsp;Example&nbsp;and&nbsp;Test</td></tr></table>
<hr>Input File: include/cppad/core/json/op_define.omh

</body>
</html>

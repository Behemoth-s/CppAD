<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Forward Mode Second Partial Derivative Driver</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Forward Mode Second Partial Derivative Driver">
<meta name="keywords" id="keywords" content=" forward mode second partial derivative driver order easy syntax purpose f x j k ddy vectorbase vectorsize_t fortwo uses examples ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_fortwo_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://github.com/bradbell/cppad" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="rev_one.cpp.htm" target="_top">Prev</a>
</td><td><a href="for_two.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>ADFun</option>
<option>drivers</option>
<option>ForTwo</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>preprocessor</option>
<option>multi_thread</option>
<option>utility</option>
<option>ipopt_solve</option>
<option>Example</option>
<option>speed</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>ADFun-&gt;</option>
<option>record_adfun</option>
<option>drivers</option>
<option>Forward</option>
<option>Reverse</option>
<option>sparsity_pattern</option>
<option>sparse_derivative</option>
<option>optimize</option>
<option>abs_normal</option>
<option>FunCheck</option>
<option>check_for_nan</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>drivers-&gt;</option>
<option>Jacobian</option>
<option>Hessian</option>
<option>ForOne</option>
<option>RevOne</option>
<option>ForTwo</option>
<option>RevTwo</option>
</select>
</td>
<td>
<select onchange='choose_down0(this)'>
<option>ForTwo-&gt;</option>
<option>for_two.cpp</option>
</select>
</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Purpose</option>
<option>f</option>
<option>x</option>
<option>j</option>
<option>k</option>
<option>ddy</option>
<option>VectorBase</option>
<option>VectorSize_t</option>
<option>ForTwo Uses Forward</option>
<option>Examples</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<center><b><big><big>Forward Mode Second Partial Derivative Driver</big></big></b></center>
<br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>ddy</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>.ForTwo(</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>j</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>



<br>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
We use <small>@(@
F : B^n \rightarrow B^m
@)@</small> to denote the
<a href="glossary.htm#AD Function" target="_top"><span style='white-space: nowrap'>AD&nbsp;function</span></a>
 corresponding to 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
.
The syntax above sets
<small>@[@

	ddy [ i * p + \ell ]
	=
	\DD{ F_i }{ x_{j[ \ell ]} }{ x_{k[ \ell ]} } (x)

@]@</small>
for <small>@(@
i = 0 , \ldots , m-1
@)@</small>
and <small>@(@
\ell = 0 , \ldots , p
@)@</small>,
where <small>@(@
p
@)@</small> is the size of the vectors 
<code><i><font color="black"><span style='white-space: nowrap'>j</span></font></i></code>
 and 
<code><i><font color="black"><span style='white-space: nowrap'>k</span></font></i></code>
.

<br>
<br>
<b><big><a name="f" id="f">f</a></big></b>
<br>
The object 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ADFun&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
Note that the <a href="adfun.htm" target="_top"><span style='white-space: nowrap'>ADFun</span></a>
 object 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
 is not <code><font color="blue">const</font></code>
(see <a href="fortwo.htm#ForTwo Uses Forward" target="_top"><span style='white-space: nowrap'>ForTwo&nbsp;Uses&nbsp;Forward</span></a>
 below).

<br>
<br>
<b><big><a name="x" id="x">x</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>VectorBase</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
(see <a href="fortwo.htm#VectorBase" target="_top"><span style='white-space: nowrap'>VectorBase</span></a>
 below)
and its size
must be equal to 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>
, the dimension of the
<a href="seq_property.htm#Domain" target="_top"><span style='white-space: nowrap'>domain</span></a>
 space for 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
.
It specifies
that point at which to evaluate the partial derivatives listed above.

<br>
<br>
<b><big><a name="j" id="j">j</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>j</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>VectorSize_t</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font><i><font color="black"><span style='white-space: nowrap'>j</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
(see <a href="fortwo.htm#VectorSize_t" target="_top"><span style='white-space: nowrap'>VectorSize_t</span></a>
 below)
We use 
<code><i><font color="black"><span style='white-space: nowrap'>p</span></font></i></code>
 to denote the size of the vector 
<code><i><font color="black"><span style='white-space: nowrap'>j</span></font></i></code>
.
All of the indices in 
<code><i><font color="black"><span style='white-space: nowrap'>j</span></font></i></code>

must be less than 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>
; i.e.,
for <small>@(@
\ell = 0 , \ldots , p-1
@)@</small>, <small>@(@
j[ \ell ]  < n
@)@</small>.

<br>
<br>
<b><big><a name="k" id="k">k</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>k</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>VectorSize_t</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
(see <a href="fortwo.htm#VectorSize_t" target="_top"><span style='white-space: nowrap'>VectorSize_t</span></a>
 below)
and its size must be equal to 
<code><i><font color="black"><span style='white-space: nowrap'>p</span></font></i></code>
,
the size of the vector 
<code><i><font color="black"><span style='white-space: nowrap'>j</span></font></i></code>
.
All of the indices in 
<code><i><font color="black"><span style='white-space: nowrap'>k</span></font></i></code>

must be less than 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>
; i.e.,
for <small>@(@
\ell = 0 , \ldots , p-1
@)@</small>, <small>@(@
k[ \ell ]  < n
@)@</small>.

<br>
<br>
<b><big><a name="ddy" id="ddy">ddy</a></big></b>
<br>
The result 
<code><i><font color="black"><span style='white-space: nowrap'>ddy</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>VectorBase</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ddy</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
(see <a href="fortwo.htm#VectorBase" target="_top"><span style='white-space: nowrap'>VectorBase</span></a>
 below)
and its size is <small>@(@
m * p
@)@</small>.
It contains the requested partial derivatives; to be specific,
for <small>@(@
i = 0 , \ldots , m - 1
@)@</small>
and <small>@(@
\ell = 0 , \ldots , p - 1
@)@</small>
<small>@[@

	ddy [ i * p + \ell ]
	=
	\DD{ F_i }{ x_{j[ \ell ]} }{ x_{k[ \ell ]} } (x)

@]@</small>

<br>
<br>
<b><big><a name="VectorBase" id="VectorBase">VectorBase</a></big></b>
<br>
The type 
<code><i><font color="black"><span style='white-space: nowrap'>VectorBase</span></font></i></code>
 must be a <a href="simplevector.htm" target="_top"><span style='white-space: nowrap'>SimpleVector</span></a>
 class with
<a href="simplevector.htm#Elements of Specified Type" target="_top"><span style='white-space: nowrap'>elements&nbsp;of&nbsp;type&nbsp;Base</span></a>
.
The routine <a href="checksimplevector.htm" target="_top"><span style='white-space: nowrap'>CheckSimpleVector</span></a>
 will generate an error message
if this is not the case.

<br>
<br>
<b><big><a name="VectorSize_t" id="VectorSize_t">VectorSize_t</a></big></b>
<br>
The type 
<code><i><font color="black"><span style='white-space: nowrap'>VectorSize_t</span></font></i></code>
 must be a <a href="simplevector.htm" target="_top"><span style='white-space: nowrap'>SimpleVector</span></a>
 class with
<a href="simplevector.htm#Elements of Specified Type" target="_top"><span style='white-space: nowrap'>elements&nbsp;of&nbsp;type&nbsp;size_t</span></a>
.
The routine <a href="checksimplevector.htm" target="_top"><span style='white-space: nowrap'>CheckSimpleVector</span></a>
 will generate an error message
if this is not the case.

<br>
<br>
<b><big><a name="ForTwo Uses Forward" id="ForTwo Uses Forward">ForTwo Uses Forward</a></big></b>
<br>
After each call to <a href="forward.htm" target="_top"><span style='white-space: nowrap'>Forward</span></a>
,
the object 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
 contains the corresponding
<a href="glossary.htm#Taylor Coefficient" target="_top"><span style='white-space: nowrap'>Taylor&nbsp;coefficients</span></a>
.
After a call to <code><font color="blue">ForTwo</font></code>,
the zero order Taylor coefficients correspond to

<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>.Forward(0,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>

and the other coefficients are unspecified.

<br>
<br>
<b><big><a name="Examples" id="Examples">Examples</a></big></b>

<br>
The routine
<a href="for_two.cpp.htm" target="_top"><span style='white-space: nowrap'>ForTwo</span></a>
 is both an example and test.
It returns <code><font color="blue">true</font></code>, if it succeeds and <code><font color="blue">false</font></code> otherwise.


<hr>Input File: cppad/core/for_two.hpp

</body>
</html>

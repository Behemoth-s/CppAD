<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Checkpointing Functions</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Checkpointing Functions">
<meta name="keywords" id="keywords" content=" checkpointing functions syntax see also purpose reduce memory faster recording repeating forward restriction multiple level ad method constructor base advector name ax ay sparsity optimize size_var option algo atom_fun clear example ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_checkpoint_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://github.com/coin-or/cppad" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="atomic.htm" target="_top">Prev</a>
</td><td><a href="checkpoint.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>AD</option>
<option>ADValued</option>
<option>atomic</option>
<option>checkpoint</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>AD-&gt;</option>
<option>ad_ctor</option>
<option>ad_assign</option>
<option>Convert</option>
<option>ADValued</option>
<option>BoolValued</option>
<option>VecAD</option>
<option>base_require</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>ADValued-&gt;</option>
<option>Arithmetic</option>
<option>unary_standard_math</option>
<option>binary_math</option>
<option>CondExp</option>
<option>Discrete</option>
<option>numeric_limits</option>
<option>atomic</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>atomic-&gt;</option>
<option>checkpoint</option>
<option>atomic_base</option>
</select>
</td>
<td>
<select onchange='choose_down0(this)'>
<option>checkpoint-&gt;</option>
<option>checkpoint.cpp</option>
<option>atomic_mul_level.cpp</option>
<option>checkpoint_ode.cpp</option>
<option>checkpoint_extended_ode.cpp</option>
</select>
</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>See Also</option>
<option>Purpose</option>
<option>---..Reduce Memory</option>
<option>---..Faster Recording</option>
<option>---..Repeating Forward</option>
<option>---..Restriction</option>
<option>---..Multiple Level AD</option>
<option>Method</option>
<option>constructor</option>
<option>Base</option>
<option>ADVector</option>
<option>name</option>
<option>ax</option>
<option>ay</option>
<option>sparsity</option>
<option>optimize</option>
<option>size_var</option>
<option>option</option>
<option>algo</option>
<option>atom_fun</option>
<option>clear</option>
<option>---..Restriction</option>
<option>Example</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<center><b><big><big>Checkpointing Functions</big></big></b></center>
<br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><font color="blue"><span style='white-space: nowrap'>checkpoint&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>atom_fun</span></font></i><font color="blue"><span style='white-space: nowrap'>(<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>name</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>algo</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ax</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ay</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sparsity</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>optimize</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
)<br>
</span></font><i><font color="black"><span style='white-space: nowrap'>sv</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>atom_fun</span></font></i><font color="blue"><span style='white-space: nowrap'>.size_var()<br>
</span></font><i><font color="black"><span style='white-space: nowrap'>atom_fun</span></font></i><font color="blue"><span style='white-space: nowrap'>.option(</span></font><i><font color="black"><span style='white-space: nowrap'>option_value</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font><i><font color="black"><span style='white-space: nowrap'>algo</span></font></i><font color="blue"><span style='white-space: nowrap'>(</span></font><i><font color="black"><span style='white-space: nowrap'>ax</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ay</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font><i><font color="black"><span style='white-space: nowrap'>atom_fun</span></font></i><font color="blue"><span style='white-space: nowrap'>(</span></font><i><font color="black"><span style='white-space: nowrap'>ax</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ay</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
checkpoint&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;::clear()</span></font></code>


<br>
<br>
<b><big><a name="See Also" id="See Also">See Also</a></big></b>

<br>
<a href="reverse_checkpoint.cpp.htm" target="_top"><span style='white-space: nowrap'>reverse_checkpoint.cpp</span></a>


<br>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>


<br>
<br>
<b><a name="Purpose.Reduce Memory" id="Purpose.Reduce Memory">Reduce Memory</a></b>
<br>
You can reduce the size of the tape and memory required for AD by
checkpointing functions of the form <small>@(@
y = f(x)
@)@</small> where
<small>@(@
f : B^n \rightarrow B^m
@)@</small>.

<br>
<br>
<b><a name="Purpose.Faster Recording" id="Purpose.Faster Recording">Faster Recording</a></b>
<br>
It may also reduce the time to make a recording the same function
for different values of the independent variable.
Note that the operation sequence for a recording that uses <small>@(@
f(x)
@)@</small>
may depend on its independent variables.

<br>
<br>
<b><a name="Purpose.Repeating Forward" id="Purpose.Repeating Forward">Repeating Forward</a></b>
<br>
Normally, CppAD store <a href="forward.htm" target="_top"><span style='white-space: nowrap'>forward</span></a>
 mode results until they freed
using <a href="capacity_order.htm" target="_top"><span style='white-space: nowrap'>capacity_order</span></a>
 or the corresponding <a href="adfun.htm" target="_top"><span style='white-space: nowrap'>ADFun</span></a>
 object is
deleted. This is not true for checkpoint functions because a checkpoint
function may be used repeatedly with different arguments in the same tape.
Thus, forward mode results are recomputed each time a checkpoint function
is used during a forward or reverse mode sweep.

<br>
<br>
<b><a name="Purpose.Restriction" id="Purpose.Restriction">Restriction</a></b>
<br>
The <a href="glossary.htm#Operation.Sequence" target="_top"><span style='white-space: nowrap'>operation&nbsp;sequence</span></a>

representing <small>@(@
f(x)
@)@</small> cannot depend on the value of <small>@(@
x
@)@</small>.
The approach in the <a href="reverse_checkpoint.cpp.htm" target="_top"><span style='white-space: nowrap'>reverse_checkpoint.cpp</span></a>
 example case be applied
when the operation sequence depends on <small>@(@
x
@)@</small>.

<br>
<br>
<b><a name="Purpose.Multiple Level AD" id="Purpose.Multiple Level AD">Multiple Level AD</a></b>
<br>
If 
<code><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i></code>
 is an AD type, it is possible to record 
<code><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i></code>

operations.
Note that 
<code><i><font color="black"><span style='white-space: nowrap'>atom_fun</span></font></i></code>
 will treat 
<code><i><font color="black"><span style='white-space: nowrap'>algo</span></font></i></code>
 as an atomic
operation while recording 
<code><font color="blue"><span style='white-space: nowrap'>AD</span></font><i><font color="black"><span style='white-space: nowrap'>&lt;</span></font></i><font color="blue"><span style='white-space: nowrap'>Base</span></font><i><font color="black"><span style='white-space: nowrap'>&gt;</span></font></i></code>
 operations, but not while
recording 
<code><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i></code>
 operations.
See the <a href="atomic_mul_level.cpp.htm" target="_top"><span style='white-space: nowrap'>atomic_mul_level.cpp</span></a>
 example.


<br>
<br>
<b><big><a name="Method" id="Method">Method</a></big></b>
<br>
The <code><font color="blue">checkpoint</font></code> class is derived from <code><font color="blue">atomic_base</font></code>
and makes this easy.
It implements all the <code><font color="blue">atomic_base</font></code>
<a href="atomic_base.htm#Virtual Functions" target="_top"><span style='white-space: nowrap'>virtual&nbsp;functions</span></a>

and hence its source code <code><font color="blue">cppad/core/checkpoint.hpp</font></code>
provides an example implementation of <a href="atomic_base.htm" target="_top"><span style='white-space: nowrap'>atomic_base</span></a>
.
The difference is that <code><font color="blue">checkpoint.hpp</font></code> uses AD
instead of user provided derivatives.

<br>
<br>
<b><big><a name="constructor" id="constructor">constructor</a></big></b>
<br>
The syntax for the checkpoint constructor is

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkpoint&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>atom_fun</span></font></i><font color="blue"><span style='white-space: nowrap'>(</span></font><i><font color="black"><span style='white-space: nowrap'>name</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>algo</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ax</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ay</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
<ol type="1"><li>This constructor cannot be called in <a href="ta_in_parallel.htm" target="_top"><span style='white-space: nowrap'>parallel</span></a>
 mode.
</li><li>

You cannot currently be recording

<code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>
 operations when the constructor is called.
</li><li>

This object 
<code><i><font color="black"><span style='white-space: nowrap'>atom_fun</span></font></i></code>
 must not be destructed for as long
as any 
<code><font color="blue"><span style='white-space: nowrap'>ADFun&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>
 object uses its atomic operation.
</li><li>

This class is implemented as a derived class of
<a href="atomic_ctor.htm#atomic_base" target="_top"><span style='white-space: nowrap'>atomic_base</span></a>
 and hence
some of its error message will refer to <code><font color="blue">atomic_base</font></code>.
</li></ol>


<br>
<br>
<b><big><a name="Base" id="Base">Base</a></big></b>
<br>
The type 
<code><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i></code>
 specifies the base type for AD operations.

<br>
<br>
<b><big><a name="ADVector" id="ADVector">ADVector</a></big></b>
<br>
The type 
<code><i><font color="black"><span style='white-space: nowrap'>ADVector</span></font></i></code>
 must be a
<a href="simplevector.htm" target="_top"><span style='white-space: nowrap'>simple&nbsp;vector&nbsp;class</span></a>
 with elements of type

<code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>
.

<br>
<br>
<b><big><a name="name" id="name">name</a></big></b>
<br>
This 
<code><i><font color="black"><span style='white-space: nowrap'>checkpoint</span></font></i></code>
 constructor argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;char*&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>name</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It is the name used for error reporting.
The suggested value for 
<code><i><font color="black"><span style='white-space: nowrap'>name</span></font></i></code>
 is 
<code><i><font color="black"><span style='white-space: nowrap'>atom_fun</span></font></i></code>
; i.e.,
the same name as used for the object being constructed.

<br>
<br>
<b><big><a name="ax" id="ax">ax</a></big></b>
<br>
This argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ADVector</span></font></i><font color="blue"><span style='white-space: nowrap'>&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ax</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
and size must be equal to 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>
.
It specifies vector <small>@(@
x \in B^n
@)@</small>
at which an 
<code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>
 version of
<small>@(@
y = f(x)
@)@</small> is to be evaluated.

<br>
<br>
<b><big><a name="ay" id="ay">ay</a></big></b>
<br>
This argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ADVector</span></font></i><font color="blue"><span style='white-space: nowrap'>&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ay</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
Its input size must be equal to 
<code><i><font color="black"><span style='white-space: nowrap'>m</span></font></i></code>
 and does not change.
The input values of its elements do not matter.
Upon return, it is an 
<code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>
 version of
<small>@(@
y = f(x)
@)@</small>.

<br>
<br>
<b><big><a name="sparsity" id="sparsity">sparsity</a></big></b>
<br>
This argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;atomic_base&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;::option_enum&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sparsity</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It specifies <a href="atomic_ctor.htm#atomic_base.sparsity" target="_top"><span style='white-space: nowrap'>sparsity</span></a>

in the <code><font color="blue">atomic_base</font></code> constructor and must be either

<code><font color="blue"><span style='white-space: nowrap'>atomic_base&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;::pack_sparsity_enum</span></font></code>
,

<code><font color="blue"><span style='white-space: nowrap'>atomic_base&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;::bool_sparsity_enum</span></font></code>
, or

<code><font color="blue"><span style='white-space: nowrap'>atomic_base&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;::set_sparsity_enum</span></font></code>
.
This argument is optional and its default value is unspecified.

<br>
<br>
<b><big><a name="optimize" id="optimize">optimize</a></big></b>
<br>
This argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bool&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>optimize</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It specifies if the recording corresponding to the atomic function
should be <a href="optimize.htm" target="_top"><span style='white-space: nowrap'>optimized</span></a>
.
One expects to use a checkpoint function many times, so it should
be worth the time to optimize its operation sequence.
For debugging purposes, it may be useful to use the
original operation sequence (before optimization)
because it corresponds more closely to 
<code><i><font color="black"><span style='white-space: nowrap'>algo</span></font></i></code>
.
This argument is optional and its default value is true.


<br>
<br>
<b><big><a name="size_var" id="size_var">size_var</a></big></b>
<br>
This <code><font color="blue">size_var</font></code> member function return value has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sv</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It is the <a href="seq_property.htm#size_var" target="_top"><span style='white-space: nowrap'>size_var</span></a>
 for the

<code><font color="blue"><span style='white-space: nowrap'>ADFun&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>
 object is used to store the operation sequence
corresponding to 
<code><i><font color="black"><span style='white-space: nowrap'>algo</span></font></i></code>
.

<br>
<br>
<b><big><a name="option" id="option">option</a></big></b>
<br>
The <code><font color="blue">option</font></code> syntax can be used to set the type of sparsity
pattern used by 
<code><i><font color="black"><span style='white-space: nowrap'>atom_fun</span></font></i></code>
.
This is an 
<code><font color="blue"><span style='white-space: nowrap'>atomic_base&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>
 function and its documentation
can be found at <a href="atomic_option.htm" target="_top"><span style='white-space: nowrap'>atomic_option</span></a>
.

<br>
<br>
<b><big><a name="algo" id="algo">algo</a></big></b>
<br>
The type of 
<code><i><font color="black"><span style='white-space: nowrap'>algo</span></font></i></code>
 is arbitrary, except for the fact that
the syntax

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>algo</span></font></i><font color="blue"><span style='white-space: nowrap'>(</span></font><i><font color="black"><span style='white-space: nowrap'>ax</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ay</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
must evaluate the function <small>@(@
y = f(x)
@)@</small> using

<code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>
 operations.
In addition, we assume that the
<a href="glossary.htm#Operation.Sequence" target="_top"><span style='white-space: nowrap'>operation&nbsp;sequence</span></a>

does not depend on the value of 
<code><i><font color="black"><span style='white-space: nowrap'>ax</span></font></i></code>
.

<br>
<br>
<b><big><a name="atom_fun" id="atom_fun">atom_fun</a></big></b>
<br>
Given 
<code><i><font color="black"><span style='white-space: nowrap'>ax</span></font></i></code>
 it computes the corresponding value of 
<code><i><font color="black"><span style='white-space: nowrap'>ay</span></font></i></code>

using the operation sequence corresponding to 
<code><i><font color="black"><span style='white-space: nowrap'>algo</span></font></i></code>
.
If 
<code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>
 operations are being recorded,
it enters the computation as single operation in the recording
see <a href="independent.htm#Start Recording" target="_top"><span style='white-space: nowrap'>start&nbsp;recording</span></a>
.
(Currently each use of 
<code><i><font color="black"><span style='white-space: nowrap'>atom_fun</span></font></i></code>
 actually corresponds to

<code><i><font color="black"><span style='white-space: nowrap'>m</span></font></i><font color="blue"><span style='white-space: nowrap'>+</span></font><i><font color="black"><span style='white-space: nowrap'>n</span></font></i><font color="blue"><span style='white-space: nowrap'>+2</span></font></code>
 operations and creates 
<code><i><font color="black"><span style='white-space: nowrap'>m</span></font></i></code>
 new variables,
but this is not part of the CppAD specifications and my change.)

<br>
<br>
<b><big><a name="clear" id="clear">clear</a></big></b>
<br>
The <code><font color="blue">atomic_base</font></code> class holds onto static work space in order to
increase speed by avoiding system memory allocation calls.
This call makes to work space <a href="ta_available.htm" target="_top"><span style='white-space: nowrap'>available</span></a>
 to
for other uses by the same thread.
This should be called when you are done using the
user atomic functions for a specific value of 
<code><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i></code>
.

<br>
<br>
<b><a name="clear.Restriction" id="clear.Restriction">Restriction</a></b>
<br>
The <code><font color="blue">clear</font></code> routine cannot be called
while in <a href="ta_in_parallel.htm" target="_top"><span style='white-space: nowrap'>parallel</span></a>
 execution mode.


<br>
<br>
<b><big><a name="Example" id="Example">Example</a></big></b>
<br>
The file <a href="checkpoint.cpp.htm" target="_top"><span style='white-space: nowrap'>checkpoint.cpp</span></a>
 contains an example and test
of these operations.
It returns true if it succeeds and false if it fails.


<hr>Input File: cppad/core/checkpoint.hpp

</body>
</html>

<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>The CppAD Wish List</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="The CppAD Wish List">
<meta name="keywords" id="keywords" content=" the cppad wish list see also purpose subgraph forward mode sparsity constant new atomic api dynamic parameters patterns dependency element-wise operations abs-normal windows install check_finite test_boolofvoid example optimization taping special operators checkpoint retape testing compilation speed base requirements adolc recomputation iterator interface convert tabs to spaces tracing atan2 ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_wish_list_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="bib.htm" target="_top">Prev</a>
</td><td><a href="whats_new.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>Appendix</option>
<option>wish_list</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Theory</option>
<option>AD</option>
<option>ADFun</option>
<option>preprocessor</option>
<option>multi_thread</option>
<option>utility</option>
<option>ipopt_solve</option>
<option>Example</option>
<option>speed</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>Appendix-&gt;</option>
<option>Faq</option>
<option>directory</option>
<option>glossary</option>
<option>Bib</option>
<option>wish_list</option>
<option>whats_new</option>
<option>deprecated</option>
<option>compare_c</option>
<option>numeric_ad</option>
<option>addon</option>
<option>License</option>
</select>
</td>
<td>wish_list</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>See Also</option>
<option>Purpose</option>
<option>Subgraph</option>
<option>---..Forward Mode</option>
<option>---..Sparsity</option>
<option>Constant</option>
<option>New Atomic API</option>
<option>---..Dynamic Parameters</option>
<option>---..Sparsity Patterns</option>
<option>---..Dependency</option>
<option>Element-wise Atomic Operations</option>
<option>Abs-normal</option>
<option>Windows Install</option>
<option>check_finite</option>
<option>test_boolofvoid</option>
<option>Example</option>
<option>Optimization</option>
<option>---..Taping</option>
<option>---..Special Operators</option>
<option>checkpoint</option>
<option>---..Retape</option>
<option>---..Testing</option>
<option>Compilation Speed</option>
<option>Base Requirements</option>
<option>Adolc</option>
<option>Forward Mode Recomputation</option>
<option>Iterator Interface</option>
<option>Convert Tabs to Spaces</option>
<option>Tracing</option>
<option>atan2</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@


<center><b><big><big>The CppAD Wish List</big></big></b></center>
<br>
<b><big><a name="See Also" id="See Also">See Also</a></big></b>

<br>
<a href="research.htm" target="_top"><span style='white-space: nowrap'>research</span></a>


<br>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
This items on this list are improvements and extensions to CppAD
that are currently being considered.


<br>
<br>
<b><big><a name="Subgraph" id="Subgraph">Subgraph</a></big></b>


<br>
<br>
<big><a name="Subgraph.Forward Mode" id="Subgraph.Forward Mode">Forward Mode</a></big>
<br>
The <a href="subgraph_jac_rev.htm" target="_top"><span style='white-space: nowrap'>subgraph_jac_rev</span></a>
 routine computes sparsity patterns
of Jacobians using reverse mode.
It is possible that a forward mode version of this method would be
better for some cases.

<br>
<br>
<big><a name="Subgraph.Sparsity" id="Subgraph.Sparsity">Sparsity</a></big>
<br>
The <a href="subgraph_sparsity.htm" target="_top"><span style='white-space: nowrap'>subgraph_sparsity</span></a>
 calculation treats
each atomic function call as if
all of its outputs depend on all of its inputs;
see <a href="subgraph_sparsity.htm#Atomic Function" target="_top"><span style='white-space: nowrap'>atomic&nbsp;function</span></a>
.
These sparsity patterns could be made more efficient
(could have fewer possibly non-zeros entries)
by using the sparsity patterns for the atomic functions.


<br>
<br>
<b><big><a name="Constant" id="Constant">Constant</a></big></b>
<br>
There should be a 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>.Constant(</span></font><i><font color="black"><span style='white-space: nowrap'>i</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>
 function,
similar to the <a href="seq_property.htm#Parameter" target="_top"><span style='white-space: nowrap'>Parameter</span></a>
 function,
that allows one to determine which dependent variables are
<a href="glossary.htm#Parameter.Constant" target="_top"><span style='white-space: nowrap'>constant&nbsp;parameters</span></a>
.


<br>
<br>
<b><big><a name="New Atomic API" id="New Atomic API">New Atomic API</a></big></b>
<br>
A new API for atomic functions could be created with the following
differences from the current API:

<br>
<br>
<big><a name="New Atomic API.Dynamic Parameters" id="New Atomic API.Dynamic Parameters">Dynamic Parameters</a></big>
<br>
The atomic functions would be more efficient if
the <a href="atomic_forward.htm#vx" target="_top"><span style='white-space: nowrap'>vx</span></a>
 and <a href="atomic_forward.htm#vy" target="_top"><span style='white-space: nowrap'>vy</span></a>

arguments had three possible values (instead of two):
constant parameter, dynamic parameter, and variable.

<br>
<br>
<big><a name="New Atomic API.Sparsity Patterns" id="New Atomic API.Sparsity Patterns">Sparsity Patterns</a></big>
<br>
Use <a href="sparse_rc.htm" target="_top"><span style='white-space: nowrap'>sparse_rc</span></a>
 to represent sparsity patterns
and calculate sparsity patterns using

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>afun</span></font></i><font color="blue"><span style='white-space: nowrap'>.jac_sparsity(</span></font><i><font color="black"><span style='white-space: nowrap'>select_domain</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>select_range</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>pattern_out</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>afun</span></font></i><font color="blue"><span style='white-space: nowrap'>.hes_sparsity(</span></font><i><font color="black"><span style='white-space: nowrap'>select_domain</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>select_range</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>pattern_out</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
see <a href="subgraph_sparsity.htm" target="_top"><span style='white-space: nowrap'>subgraph_sparsity</span></a>
.
This would be simpler for the user and just as efficient.

<br>
<br>
<big><a name="New Atomic API.Dependency" id="New Atomic API.Dependency">Dependency</a></big>
<br>
Add a <a href="for_jac_sparsity.htm#dependency" target="_top"><span style='white-space: nowrap'>dependency</span></a>
 argument
to the forward and reverse Jacobian sparsity patterns.


<br>
<br>
<b><big><a name="Element-wise Atomic Operations" id="Element-wise Atomic Operations">Element-wise Atomic Operations</a></big></b>
<br>
Add user atomic functions for element-wise addition, subtraction,
multiplication, and division.
Where the operands are <a href="simplevector.htm" target="_top"><span style='white-space: nowrap'>simple&nbsp;vectors</span></a>

with elements of type 
<code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>
.


<br>
<br>
<b><big><a name="Abs-normal" id="Abs-normal">Abs-normal</a></big></b>

<ol type="1"><li>
Change the <a href="abs_normal_fun.htm" target="_top"><span style='white-space: nowrap'>abs_normal_fun</span></a>
 to return the functions
<a href="abs_normal_fun.htm#g.z(x, u)" target="_top"><span style='white-space: nowrap'>z(x,&nbsp;u)</span></a>
 and
<a href="abs_normal_fun.htm#g.y(x, u)" target="_top"><span style='white-space: nowrap'>y(x,&nbsp;u)</span></a>
 instead of
<small>@(@
g(x, u)
@)@</small> and <small>@(@
a(x)
@)@</small>.
We can add a utility that computes <small>@(@
a(x)
@)@</small> using
<small>@(@
z(x, u)
@)@</small>, <small>@(@
a_i (x) = | z_i (x, a(x) ) |
@)@</small>
and <small>@(@
z_i
@)@</small> does not depends on <small>@(@
u_j
@)@</small> for <small>@(@
j \geq i
@)@</small>.
</li><li>

Avoid cancellation when computing the difference in the absolute value
function at the current point <small>@(@
\hat{x}
@)@</small> the displaced point
<small>@(@
x = \hat{x} + \Delta x
@)@</small>; i.e.,
<small>@[@

	|z_i (x, \tilde{a}(x) ) | - |z_i (\hat{x}, a(\hat{x}) ) |

@]@</small>
</li></ol>


<br>
<br>
<b><big><a name="Windows Install" id="Windows Install">Windows Install</a></big></b>
<br>
The windows install procedures below have not been kept up to date.
I would be good if someone took on the job of supporting an windows install.
<ol type="1"><li>
Download and install the open source program
<a href="http://www.7-zip.org" target="_top"><span style='white-space: nowrap'>http://www.7-zip.org</span></a>
.
</li><li>

Download and install the Visual Studio Express; for example
<a href="http://www.microsoft.com/en-us/download/confirmation.aspx?id=44914" target="_top"><span style='white-space: nowrap'>Visual&nbsp;Studio&nbsp;2013</span></a>

</li><li>

In a command window, execute the following commands:

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set&nbsp;PATH=</span></font><i><font color="black"><span style='white-space: nowrap'>path_to_7_zip</span></font></i><font color="blue"><span style='white-space: nowrap'>;%PATH%<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set&nbsp;PATH=</span></font><i><font color="black"><span style='white-space: nowrap'>path_to_cmake</span></font></i><font color="blue"><span style='white-space: nowrap'>;%PATH%<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set&nbsp;VCDIR=</span></font><i><font color="black"><span style='white-space: nowrap'>path_to_vcdir</span></font></i><font color="blue"><span style='white-space: nowrap'>;%PATH%<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;call&nbsp;&quot;%VCDIR%\vcvarsall.bat&quot;&nbsp;x86<br>
</span></font></code>
</li><li>
Use the following commands to extract the distribution from the
compressed archive:

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7z&nbsp;x&nbsp;cppad-</span></font><i><font color="black"><span style='white-space: nowrap'>version</span></font></i><font color="blue"><span style='white-space: nowrap'>.</span></font><i><font color="black"><span style='white-space: nowrap'>lic</span></font></i><font color="blue"><span style='white-space: nowrap'>.tgz<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7z&nbsp;x&nbsp;cppad-</span></font><i><font color="black"><span style='white-space: nowrap'>version</span></font></i><font color="blue"><span style='white-space: nowrap'>.</span></font><i><font color="black"><span style='white-space: nowrap'>lic</span></font></i><font color="blue"><span style='white-space: nowrap'>.tar<br>
</span></font></code>
The commands below are optional.
They run the CppAD tests using the default <a href="cmake.htm" target="_top"><span style='white-space: nowrap'>cmake</span></a>
 settings
(except for the <a href="cmake.htm#generator" target="_top"><span style='white-space: nowrap'>generator</span></a>
 option)

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mkdir&nbsp;build<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cd&nbsp;build<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmake&nbsp;-G&nbsp;&quot;NMake&nbsp;Makefiles&quot;&nbsp;..<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nmake&nbsp;check<br>
</span></font></code>
</li></ol>
<br>
<b><big><a name="check_finite" id="check_finite">check_finite</a></big></b>

<ol type="1"><li>
Sometimes one only gets infinite value during zero order forward
and nan when computing corresponding derivatives.
Change <a href="check_for_nan.htm" target="_top"><span style='white-space: nowrap'>check_for_nan</span></a>
 to <code><font color="blue">check_finite</font></code>
(not infinite or nan) so that error detection happens during zero
order forward instead of later.
</li><li>

In addition, the current <a href="check_for_nan.htm" target="_top"><span style='white-space: nowrap'>check_for_nan</span></a>
 writes the corresponding
zero order values to a temporary file.
It would be nice if the <code><font color="blue">check_finite</font></code> routine made writing
the zero order values optional.
</li></ol>


<br>
<br>
<b><big><a name="test_boolofvoid" id="test_boolofvoid">test_boolofvoid</a></big></b>
<br>
For general purpose use, the <a href="test_boolofvoid.htm" target="_top"><span style='white-space: nowrap'>test_boolofvoid</span></a>
 should be usable
without including a memory check at the end.

<br>
<br>
<b><big><a name="Example" id="Example">Example</a></big></b>
<br>
Split the <a href="listallexamples.htm" target="_top"><span style='white-space: nowrap'>example&nbsp;list</span></a>

into separate groups by the corresponding example subdirectory.


<br>
<br>
<b><big><a name="Optimization" id="Optimization">Optimization</a></big></b>


<br>
<br>
<big><a name="Optimization.Taping" id="Optimization.Taping">Taping</a></big>
<br>
Perhaps some of the optimization done while taping forward mode
should be delayed to the <code><font color="blue">optimization</font></code> step.

<br>
<br>
<big><a name="Optimization.Special Operators" id="Optimization.Special Operators">Special Operators</a></big>
<br>
Add special operators that can be implemented more efficiently, e.g.,

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;square(</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>)&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;*&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
and have the optimizer recognize when they should be used.
(They could also be in the user API, but it would not be expected
that the user would use them.)


<br>
<br>
<b><big><a name="checkpoint" id="checkpoint">checkpoint</a></big></b>


<br>
<br>
<big><a name="checkpoint.Retape" id="checkpoint.Retape">Retape</a></big>
<br>
Perhaps there should be a version of the
<a href="checkpoint.htm" target="_top"><span style='white-space: nowrap'>checkpoint</span></a>
 class that uses a tapeless AD package to compute
the derivative values.
This would allow for algorithms where the operations sequence
depends on the independent variable values.
There is a question as to how sparsity patterns would be determined
in this case.
Perhaps they would be passed into the constructor.
If it was known to be constant,
the user could compute the pattern using CppAD.
Otherwise, the user could input
a conservative estimate of the pattern that would be correct.

<br>
<br>
<big><a name="checkpoint.Testing" id="checkpoint.Testing">Testing</a></big>
<br>
There should be some examples and tests for both speed and memory use
that demonstrate that checkpointing is useful.



<br>
<br>
<b><big><a name="Compilation Speed" id="Compilation Speed">Compilation Speed</a></big></b>
<br>
Create a library corresponding to <code><font color="blue">AD&lt;double&gt;</font></code> so that
one does not need to re-compile all the header files every time.

<br>
<br>
<b><big><a name="Base Requirements" id="Base Requirements">Base Requirements</a></big></b>
<br>
Change the <a href="base_require.htm" target="_top"><span style='white-space: nowrap'>Base&nbsp;requirements</span></a>
 to use template
specialization instead of functions so that there is a default value
for each function. The default would result in a
<a href="cppad_assert.htm#Known" target="_top"><span style='white-space: nowrap'>known</span></a>
 assert when the operation is used and not
defined by the base class.
An example of this type of template specialization can be found in
the implementation of <a href="to_string.htm" target="_top"><span style='white-space: nowrap'>to_string</span></a>
.

<br>
<br>
<b><big><a name="Adolc" id="Adolc">Adolc</a></big></b>
<br>
Create a documentation page that shows how to convert Adolc commands to
CppAD commands.

<br>
<br>
<b><big><a name="Forward Mode Recomputation" id="Forward Mode Recomputation">Forward Mode Recomputation</a></big></b>
<br>
If the results of <a href="forward_order.htm" target="_top"><span style='white-space: nowrap'>forward_order</span></a>
 have already been computed and are still
stored in the <a href="adfun.htm" target="_top"><span style='white-space: nowrap'>ADFun</span></a>
 object (see <a href="size_order.htm" target="_top"><span style='white-space: nowrap'>size_order</span></a>
),
then they do not need to be recomputed and the results can just be returned.

<br>
<br>
<b><big><a name="Iterator Interface" id="Iterator Interface">Iterator Interface</a></big></b>
<br>
All of the CppAD simple vector interfaces should also have an
iterator version for the following reasons:
<ol type="1"><li>
It would not be necessary to copy information to simple vectors
when it was originally stored in a different type of container.
</li><li>

It would not be necessary to reallocate memory for a result that is
repeatedly calculated
(because an iterator for the result container would be passed in).
</li></ol>


<br>
<br>
<b><big><a name="Convert Tabs to Spaces" id="Convert Tabs to Spaces">Convert Tabs to Spaces</a></big></b>
<br>
Use spaces rather than tabs.
Currently, CppAD uses a tabs stops at column multiples of 8.
Automatic conversion to actual spaces should be easy
using the Unix <code><font color="blue">expand</font></code> command.

<br>
<br>
<b><big><a name="Tracing" id="Tracing">Tracing</a></big></b>
<br>
Add tracing the operation sequence to the user API and documentation.
Tracing the operation sequence is currently done by changing the CppAD
source code. Use the command
<code><font color='blue'><pre style='display:inline'> 
     grep '^# *define *CPPAD_.*_TRACE' cppad/local/sweep*.hpp
</pre></font></code>
to find all the possible tracing flags.

<br>
<br>
<b><big><a name="atan2" id="atan2">atan2</a></big></b>
<br>
The <a href="atan2.htm" target="_top"><span style='white-space: nowrap'>atan2</span></a>
 function could be made faster by adding
a special operator for it.


<hr>Input File: omh/appendix/wish_list.omh

</body>
</html>

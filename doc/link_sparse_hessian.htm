<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Speed Testing Sparse Hessian</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Speed Testing Sparse Hessian">
<meta name="keywords" id="keywords" content=" speed testing sparse hessian link_sparse_hessian test prototype method size repeat x row col n_sweep double ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_link_sparse_hessian_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="link_poly.htm" target="_top">Prev</a>
</td><td><a href="link_sparse_jacobian.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>speed</option>
<option>speed_main</option>
<option>link_sparse_hessian</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Theory</option>
<option>AD</option>
<option>ADFun</option>
<option>preprocessor</option>
<option>multi_thread</option>
<option>utility</option>
<option>ipopt_solve</option>
<option>Example</option>
<option>speed</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>speed-&gt;</option>
<option>speed_main</option>
<option>speed_utility</option>
<option>speed_double</option>
<option>speed_adolc</option>
<option>speed_cppad</option>
<option>speed_fadbad</option>
<option>speed_sacado</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>speed_main-&gt;</option>
<option>link_det_lu</option>
<option>link_det_minor</option>
<option>link_mat_mul</option>
<option>link_ode</option>
<option>link_poly</option>
<option>link_sparse_hessian</option>
<option>link_sparse_jacobian</option>
<option>microsoft_timer</option>
</select>
</td>
<td>link_sparse_hessian</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Prototype</option>
<option>Method</option>
<option>size</option>
<option>repeat</option>
<option>x</option>
<option>row</option>
<option>col</option>
<option>hessian</option>
<option>n_sweep</option>
<option>---..double</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@



<center><b><big><big>Speed Testing Sparse Hessian</big></big></b></center>
<br>
<b><big><a name="Prototype" id="Prototype">Prototype</a></big></b>

<br>

<code><font color="blue"><span style='white-space: nowrap'>extern&nbsp;bool&nbsp;link_sparse_hessian(<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>size</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>repeat</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&nbsp;&nbsp;&nbsp;,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppAD::vector&lt;double&gt;&amp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;CppAD::vector&lt;size_t&gt;&amp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>row</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;CppAD::vector&lt;size_t&gt;&amp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>col</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppAD::vector&lt;double&gt;&amp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>hessian</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&nbsp;&nbsp;,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_sweep</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
);<br>
</span></font></code>
<br>
<b><big><a name="Method" id="Method">Method</a></big></b>
<br>
Given a row index vector <small>@(@
row
@)@</small>
and a second column vector <small>@(@
col
@)@</small>,
the corresponding function
<small>@(@
f : \B{R}^n \rightarrow \B{R}
@)@</small>
is defined by <a href="sparse_hes_fun.htm" target="_top"><span style='white-space: nowrap'>sparse_hes_fun</span></a>
.
The non-zero entries in the Hessian of this function have
one of the following forms:
<small>@[@

	\DD{f}{x[row[k]]}{x[row[k]]}
	\; , \;
	\DD{f}{x[row[k]]}{x[col[k]]}
	\; , \;
	\DD{f}{x[col[k]]}{x[row[k]]}
	\; , \;
	\DD{f}{x[col[k]]}{x[col[k]]}

@]@</small>
for some <small>@(@
k
@)@</small> between zero and <small>@(@
K-1
@)@</small>.
All the other terms of the Hessian are zero.

<br>
<br>
<b><big><a name="size" id="size">size</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>size</span></font></i></code>
, referred to as <small>@(@
n
@)@</small> below,
is the dimension of the domain space for <small>@(@
f(x)
@)@</small>.

<br>
<br>
<b><big><a name="repeat" id="repeat">repeat</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>repeat</span></font></i></code>
 is the number of times
to repeat the test
(with a different value for 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
 corresponding to
each repetition).

<br>
<br>
<b><big><a name="x" id="x">x</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppAD::vector&lt;double&gt;&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
and its size is <small>@(@
n
@)@</small>; i.e., 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>.size()&nbsp;==&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>size</span></font></i></code>
.
The input value of the elements of 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
 does not matter.
On output, it has been set to the
argument value for which the function,
or its derivative, is being evaluated.
The value of this vector need not change with each repetition.

<br>
<br>
<b><big><a name="row" id="row">row</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>row</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;CppAD::vector&lt;size_t&gt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>row</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
Its size defines the value <small>@(@
K
@)@</small>.
It contains the row indices for the corresponding function <small>@(@
f(x)
@)@</small>.
All the elements of 
<code><i><font color="black"><span style='white-space: nowrap'>row</span></font></i></code>
 are between zero and <small>@(@
n-1
@)@</small>.

<br>
<br>
<b><big><a name="col" id="col">col</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>col</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;CppAD::vector&lt;size_t&gt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>col</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
Its size must be the same as 
<code><i><font color="black"><span style='white-space: nowrap'>row</span></font></i></code>
; i.e., <small>@(@
K
@)@</small>.
It contains the column indices for the corresponding function
<small>@(@
f(x)
@)@</small>.
All the elements of 
<code><i><font color="black"><span style='white-space: nowrap'>col</span></font></i></code>
 are between zero and <small>@(@
n-1
@)@</small>.
There are no duplicated entries requested, to be specific,
if 
<code><i><font color="black"><span style='white-space: nowrap'>k1</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;!=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>k2</span></font></i></code>
 then

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>row</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k1</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>col</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k1</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;)&nbsp;!=&nbsp;(&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>row</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k2</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>col</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k2</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;)<br>
</span></font></code>
Furthermore, the entries are lower triangular; i.e.,

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>col</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;&lt;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>row</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>]<br>
</span></font></code>
.


<br>
<br>
<b><big><a name="hessian" id="hessian">hessian</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>hessian</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppAD::vector&lt;double&gt;&amp;&nbsp;&nbsp;hessian<br>
</span></font></code>
and its size is 
<code><i><font color="black"><span style='white-space: nowrap'>K</span></font></i></code>
.
The input value of its elements does not matter.
The output value of its elements is the Hessian of the function <small>@(@
f(x)
@)@</small>.
To be more specific, for
<small>@(@
k = 0 , \ldots , K-1
@)@</small>,
<small>@[@

	\DD{f}{ x[ \R{row}[k] ] }{ x[ \R{col}[k] ]} = \R{hessian} [k]

@]@</small>

<br>
<br>
<b><big><a name="n_sweep" id="n_sweep">n_sweep</a></big></b>
<br>
The input value of 
<code><i><font color="black"><span style='white-space: nowrap'>n_sweep</span></font></i></code>
 does not matter. On output,
it is the value <a href="sparse_hessian.htm#n_sweep" target="_top"><span style='white-space: nowrap'>n_sweep</span></a>
 corresponding
to the evaluation of 
<code><i><font color="black"><span style='white-space: nowrap'>hessian</span></font></i></code>
.
This is also the number of colors corresponding to the
<a href="sparse_hessian.htm#work.color_method" target="_top"><span style='white-space: nowrap'>coloring&nbsp;method</span></a>
,
which can be set to <a href="speed_main.htm#Sparsity Options.colpack" target="_top"><span style='white-space: nowrap'>colpack</span></a>
,
and is otherwise <code><font color="blue">cppad</font></code>.


<br>
<br>
<big><a name="n_sweep.double" id="n_sweep.double">double</a></big>
<br>
In the case where 
<code><i><font color="black"><span style='white-space: nowrap'>package</span></font></i></code>
 is <code><font color="blue">double</font></code>,
only the first element of 
<code><i><font color="black"><span style='white-space: nowrap'>hessian</span></font></i></code>
 is used and it is actually
the value of <small>@(@
f(x)
@)@</small> (derivatives are not computed).


<hr>Input File: speed/src/link_sparse_hessian.cpp

</body>
</html>

<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Tan and Tanh as User Atomic Operations: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Tan and Tanh as User Atomic Operations: Example and Test">
<meta name="keywords" id="keywords" content=" tan tanh user atomic operations: example test tangent operation theory sparsity start class definition constructor forward reverse for_sparse_jac rev_sparse_jac rev_sparse_hes end use function recording large x values ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_atomic_tangent.cpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://coin-or.github.io/CppAD/" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="atomic_set_sparsity.cpp.htm" target="_top">Prev</a>
</td><td><a href="atomic_eigen_mat_mul.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>AD</option>
<option>ADValued</option>
<option>atomic</option>
<option>atomic_base</option>
<option>atomic_tangent.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>ADValued-&gt;</option>
<option>Arithmetic</option>
<option>unary_standard_math</option>
<option>binary_math</option>
<option>CondExp</option>
<option>Discrete</option>
<option>numeric_limits</option>
<option>atomic</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>atomic-&gt;</option>
<option>checkpoint</option>
<option>atomic_base</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>atomic_base-&gt;</option>
<option>atomic_ctor</option>
<option>atomic_option</option>
<option>atomic_afun</option>
<option>atomic_forward</option>
<option>atomic_reverse</option>
<option>atomic_for_sparse_jac</option>
<option>atomic_rev_sparse_jac</option>
<option>atomic_for_sparse_hes</option>
<option>atomic_rev_sparse_hes</option>
<option>atomic_base_clear</option>
<option>atomic_get_started.cpp</option>
<option>atomic_norm_sq.cpp</option>
<option>atomic_reciprocal.cpp</option>
<option>atomic_set_sparsity.cpp</option>
<option>atomic_tangent.cpp</option>
<option>atomic_eigen_mat_mul.cpp</option>
<option>atomic_eigen_mat_inv.cpp</option>
<option>atomic_eigen_cholesky.cpp</option>
<option>atomic_mat_mul.cpp</option>
</select>
</td>
<td>atomic_tangent.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Theory</option>
<option>sparsity</option>
<option>Start Class Definition</option>
<option>Constructor</option>
<option>forward</option>
<option>reverse</option>
<option>for_sparse_jac</option>
<option>rev_sparse_jac</option>
<option>rev_sparse_hes</option>
<option>End Class Definition</option>
<option>Use Atomic Function</option>
<option>---..Constructor</option>
<option>---..Recording</option>
<option>---..forward</option>
<option>---..reverse</option>
<option>---..for_sparse_jac</option>
<option>---..rev_sparse_jac</option>
<option>---..rev_sparse_hes</option>
<option>---..Large x Values</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<center><b><big><big>Tan and Tanh as User Atomic Operations: Example and Test</big></big></b></center>
<br>
<b><big><a name="Theory" id="Theory">Theory</a></big></b>
<br>
The code below uses the <a href="tan_forward.htm" target="_top"><span style='white-space: nowrap'>tan_forward</span></a>
 and <a href="tan_reverse.htm" target="_top"><span style='white-space: nowrap'>tan_reverse</span></a>

to implement the tangent and hyperbolic tangent
functions as user atomic operations.

<br>
<br>
<b><big><a name="sparsity" id="sparsity">sparsity</a></big></b>
<br>
This atomic operation can use both set and bool sparsity patterns.



<br>
<br>
<b><big><a name="Start Class Definition" id="Start Class Definition">Start Class Definition</a></big></b>

<pre><tt><b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/cppad.hpp&gt;</font>
<b><font color="#0000FF">namespace</font></b> <font color="#FF0000">{</font> <i><font color="#9A1900">// Begin empty namespace</font></i>
<b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">;</font>
<i><font color="#9A1900">//</font></i>
<i><font color="#9A1900">// a utility to compute the union of two sets.</font></i>
<b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>set_union<font color="#990000">;</font>
<i><font color="#9A1900">//</font></i>
<b><font color="#0000FF">class</font></b> <font color="#008080">atomic_tangent</font> <font color="#990000">:</font> <b><font color="#0000FF">public</font></b> CppAD<font color="#990000">::</font>atomic_base<font color="#990000">&lt;</font><font color="#009900">float</font><font color="#990000">&gt;</font> <font color="#FF0000">{</font></tt></pre>
<br>
<b><big><a name="Constructor" id="Constructor">Constructor</a></big></b>

<pre><tt><b><font color="#0000FF">private</font></b><font color="#990000">:</font>
     <b><font color="#0000FF">const</font></b> <font color="#009900">bool</font> hyperbolic_<font color="#990000">;</font> <i><font color="#9A1900">// is this hyperbolic tangent</font></i>
<b><font color="#0000FF">public</font></b><font color="#990000">:</font>
     <i><font color="#9A1900">// constructor</font></i>
     <b><font color="#000000">atomic_tangent</font></b><font color="#990000">(</font><b><font color="#0000FF">const</font></b> <font color="#009900">char</font><font color="#990000">*</font> name<font color="#990000">,</font> <font color="#009900">bool</font> hyperbolic<font color="#990000">)</font>
     <font color="#990000">:</font> CppAD<font color="#990000">::</font>atomic_base<font color="#990000">&lt;</font><font color="#009900">float</font><font color="#990000">&gt;(</font>name<font color="#990000">),</font>
     <b><font color="#000000">hyperbolic_</font></b><font color="#990000">(</font>hyperbolic<font color="#990000">)</font>
     <font color="#FF0000">{</font> <font color="#FF0000">}</font>
<b><font color="#0000FF">private</font></b><font color="#990000">:</font></tt></pre>
<br>
<b><big><a name="forward" id="forward">forward</a></big></b>

<pre><tt>     <i><font color="#9A1900">// forward mode routine called by CppAD</font></i>
     <font color="#009900">bool</font> <b><font color="#000000">forward</font></b><font color="#990000">(</font>
          <font color="#008080">size_t</font>                    p <font color="#990000">,</font>
          <font color="#008080">size_t</font>                    q <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>      vx <font color="#990000">,</font>
                vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>     vzy <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">float</font><font color="#990000">&gt;&amp;</font>     tx <font color="#990000">,</font>
                vector<font color="#990000">&lt;</font><font color="#009900">float</font><font color="#990000">&gt;&amp;</font>    tzy
     <font color="#990000">)</font>
     <font color="#FF0000">{</font>    <font color="#008080">size_t</font> q1 <font color="#990000">=</font> q <font color="#990000">+</font> <font color="#993399">1</font><font color="#990000">;</font>
<b><font color="#000080"># ifndef</font></b> NDEBUG
          <font color="#008080">size_t</font> n  <font color="#990000">=</font> tx<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font>  <font color="#990000">/</font> q1<font color="#990000">;</font>
          <font color="#008080">size_t</font> m  <font color="#990000">=</font> tzy<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">/</font> q1<font color="#990000">;</font>
<b><font color="#000080"># endif</font></b>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> n <font color="#990000">==</font> <font color="#993399">1</font> <font color="#990000">);</font>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> m <font color="#990000">==</font> <font color="#993399">2</font> <font color="#990000">);</font>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> p <font color="#990000">&lt;=</font> q <font color="#990000">);</font>
          <font color="#008080">size_t</font> j<font color="#990000">,</font> k<font color="#990000">;</font>

          <i><font color="#9A1900">// check if this is during the call to old_tan(id, ax, ay)</font></i>
          <b><font color="#0000FF">if</font></b><font color="#990000">(</font> vx<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">&gt;</font> <font color="#993399">0</font> <font color="#990000">)</font>
          <font color="#FF0000">{</font>    <i><font color="#9A1900">// set variable flag for both y an z</font></i>
               vzy<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> vx<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">];</font>
               vzy<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">=</font> vx<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">];</font>
          <font color="#FF0000">}</font>

          <b><font color="#0000FF">if</font></b><font color="#990000">(</font> p <font color="#990000">==</font> <font color="#993399">0</font> <font color="#990000">)</font>
          <font color="#FF0000">{</font>    <i><font color="#9A1900">// z^{(0)} = tan( x^{(0)} ) or tanh( x^{(0)} )</font></i>
               <b><font color="#0000FF">if</font></b><font color="#990000">(</font> hyperbolic_ <font color="#990000">)</font>
                    tzy<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#000000">tanh</font></b><font color="#990000">(</font> tx<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">);</font>
               <b><font color="#0000FF">else</font></b> tzy<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#000000">tan</font></b><font color="#990000">(</font> tx<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">);</font>

               <i><font color="#9A1900">// y^{(0)} = z^{(0)} * z^{(0)}</font></i>
               tzy<font color="#990000">[</font>q1 <font color="#990000">+</font> <font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> tzy<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">*</font> tzy<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">];</font>

               p<font color="#990000">++;</font>
          <font color="#FF0000">}</font>
          <b><font color="#0000FF">for</font></b><font color="#990000">(</font>j <font color="#990000">=</font> p<font color="#990000">;</font> j <font color="#990000">&lt;=</font> q<font color="#990000">;</font> j<font color="#990000">++)</font>
          <font color="#FF0000">{</font>    <font color="#009900">float</font> j_inv <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">.</font>f <font color="#990000">/</font> <font color="#009900">float</font><font color="#990000">(</font>j<font color="#990000">);</font>
               <b><font color="#0000FF">if</font></b><font color="#990000">(</font> hyperbolic_ <font color="#990000">)</font>
                    j_inv <font color="#990000">=</font> <font color="#990000">-</font> j_inv<font color="#990000">;</font>

               <i><font color="#9A1900">// z^{(j)} = x^{(j)} +- sum_{k=1}^j k x^{(k)} y^{(j-k)} / j</font></i>
               tzy<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> tx<font color="#990000">[</font>j<font color="#990000">];</font>
               <b><font color="#0000FF">for</font></b><font color="#990000">(</font>k <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">;</font> k <font color="#990000">&lt;=</font> j<font color="#990000">;</font> k<font color="#990000">++)</font>
                    tzy<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">+=</font> tx<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">*</font> tzy<font color="#990000">[</font>q1 <font color="#990000">+</font> j<font color="#990000">-</font>k<font color="#990000">]</font> <font color="#990000">*</font> k <font color="#990000">*</font> j_inv<font color="#990000">;</font>

               <i><font color="#9A1900">// y^{(j)} = sum_{k=0}^j z^{(k)} z^{(j-k)}</font></i>
               tzy<font color="#990000">[</font>q1 <font color="#990000">+</font> j<font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">.;</font>
               <b><font color="#0000FF">for</font></b><font color="#990000">(</font>k <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> k <font color="#990000">&lt;=</font> j<font color="#990000">;</font> k<font color="#990000">++)</font>
                    tzy<font color="#990000">[</font>q1 <font color="#990000">+</font> j<font color="#990000">]</font> <font color="#990000">+=</font> tzy<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">*</font> tzy<font color="#990000">[</font>j<font color="#990000">-</font>k<font color="#990000">];</font>
          <font color="#FF0000">}</font>

          <i><font color="#9A1900">// All orders are implemented and there are no possible errors</font></i>
          <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
     <font color="#FF0000">}</font></tt></pre>
<br>
<b><big><a name="reverse" id="reverse">reverse</a></big></b>

<pre><tt>     <i><font color="#9A1900">// reverse mode routine called by CppAD</font></i>
     <b><font color="#0000FF">virtual</font></b> <font color="#009900">bool</font> <b><font color="#000000">reverse</font></b><font color="#990000">(</font>
          <font color="#008080">size_t</font>                    q <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">float</font><font color="#990000">&gt;&amp;</font>     tx <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">float</font><font color="#990000">&gt;&amp;</font>    tzy <font color="#990000">,</font>
                vector<font color="#990000">&lt;</font><font color="#009900">float</font><font color="#990000">&gt;&amp;</font>     px <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">float</font><font color="#990000">&gt;&amp;</font>    pzy
     <font color="#990000">)</font>
     <font color="#FF0000">{</font>    <font color="#008080">size_t</font> q1 <font color="#990000">=</font> q <font color="#990000">+</font> <font color="#993399">1</font><font color="#990000">;</font>
<b><font color="#000080"># ifndef</font></b> NDEBUG
          <font color="#008080">size_t</font> n  <font color="#990000">=</font> tx<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font>  <font color="#990000">/</font> q1<font color="#990000">;</font>
          <font color="#008080">size_t</font> m  <font color="#990000">=</font> tzy<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">/</font> q1<font color="#990000">;</font>
<b><font color="#000080"># endif</font></b>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> px<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font>  <font color="#990000">==</font> n <font color="#990000">*</font> q1 <font color="#990000">);</font>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> pzy<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> m <font color="#990000">*</font> q1 <font color="#990000">);</font>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> n <font color="#990000">==</font> <font color="#993399">1</font> <font color="#990000">);</font>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> m <font color="#990000">==</font> <font color="#993399">2</font> <font color="#990000">);</font>

          <font color="#008080">size_t</font> j<font color="#990000">,</font> k<font color="#990000">;</font>

          <i><font color="#9A1900">// copy because partials w.r.t. y and z need to change</font></i>
          <font color="#008080">vector&lt;float&gt;</font> qzy <font color="#990000">=</font> pzy<font color="#990000">;</font>

          <i><font color="#9A1900">// initialize accumultion of reverse mode partials</font></i>
          <b><font color="#0000FF">for</font></b><font color="#990000">(</font>k <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> k <font color="#990000">&lt;</font> q1<font color="#990000">;</font> k<font color="#990000">++)</font>
               px<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">.;</font>

          <i><font color="#9A1900">// eliminate positive orders</font></i>
          <b><font color="#0000FF">for</font></b><font color="#990000">(</font>j <font color="#990000">=</font> q<font color="#990000">;</font> j <font color="#990000">&gt;</font> <font color="#993399">0</font><font color="#990000">;</font> j<font color="#990000">--)</font>
          <font color="#FF0000">{</font>    <font color="#009900">float</font> j_inv <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">.</font>f <font color="#990000">/</font> <font color="#009900">float</font><font color="#990000">(</font>j<font color="#990000">);</font>
               <b><font color="#0000FF">if</font></b><font color="#990000">(</font> hyperbolic_ <font color="#990000">)</font>
                    j_inv <font color="#990000">=</font> <font color="#990000">-</font> j_inv<font color="#990000">;</font>

               <i><font color="#9A1900">// H_{x^{(k)}} += delta(j-k) +- H_{z^{(j)} y^{(j-k)} * k / j</font></i>
               px<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">+=</font> qzy<font color="#990000">[</font>j<font color="#990000">];</font>
               <b><font color="#0000FF">for</font></b><font color="#990000">(</font>k <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">;</font> k <font color="#990000">&lt;=</font> j<font color="#990000">;</font> k<font color="#990000">++)</font>
                    px<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">+=</font> qzy<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">*</font> tzy<font color="#990000">[</font>q1 <font color="#990000">+</font> j<font color="#990000">-</font>k<font color="#990000">]</font> <font color="#990000">*</font> k <font color="#990000">*</font> j_inv<font color="#990000">;</font>

               <i><font color="#9A1900">// H_{y^{j-k)} += +- H_{z^{(j)} x^{(k)} * k / j</font></i>
               <b><font color="#0000FF">for</font></b><font color="#990000">(</font>k <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">;</font> k <font color="#990000">&lt;=</font> j<font color="#990000">;</font> k<font color="#990000">++)</font>
                    qzy<font color="#990000">[</font>q1 <font color="#990000">+</font> j<font color="#990000">-</font>k<font color="#990000">]</font> <font color="#990000">+=</font> qzy<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">*</font> tx<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">*</font> k <font color="#990000">*</font> j_inv<font color="#990000">;</font>

               <i><font color="#9A1900">// H_{z^{(k)}} += H_{y^{(j-1)}} * z^{(j-k-1)} * 2.</font></i>
               <b><font color="#0000FF">for</font></b><font color="#990000">(</font>k <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> k <font color="#990000">&lt;</font> j<font color="#990000">;</font> k<font color="#990000">++)</font>
                    qzy<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">+=</font> qzy<font color="#990000">[</font>q1 <font color="#990000">+</font> j<font color="#990000">-</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">*</font> tzy<font color="#990000">[</font>j<font color="#990000">-</font>k<font color="#990000">-</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">*</font> <font color="#993399">2</font><font color="#990000">.</font>f<font color="#990000">;</font>
          <font color="#FF0000">}</font>

          <i><font color="#9A1900">// eliminate order zero</font></i>
          <b><font color="#0000FF">if</font></b><font color="#990000">(</font> hyperbolic_ <font color="#990000">)</font>
               px<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">+=</font> qzy<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">*</font> <font color="#990000">(</font><font color="#993399">1</font><font color="#990000">.</font>f <font color="#990000">-</font> tzy<font color="#990000">[</font>q1 <font color="#990000">+</font> <font color="#993399">0</font><font color="#990000">]);</font>
          <b><font color="#0000FF">else</font></b>
               px<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">+=</font> qzy<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">*</font> <font color="#990000">(</font><font color="#993399">1</font><font color="#990000">.</font>f <font color="#990000">+</font> tzy<font color="#990000">[</font>q1 <font color="#990000">+</font> <font color="#993399">0</font><font color="#990000">]);</font>

          <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
     <font color="#FF0000">}</font></tt></pre>
<br>
<b><big><a name="for_sparse_jac" id="for_sparse_jac">for_sparse_jac</a></big></b>

<pre><tt>     <i><font color="#9A1900">// forward Jacobian sparsity routine called by CppAD</font></i>
     <b><font color="#0000FF">virtual</font></b> <font color="#009900">bool</font> <b><font color="#000000">for_sparse_jac</font></b><font color="#990000">(</font>
          <font color="#008080">size_t</font>                                p <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>                   r <font color="#990000">,</font>
                vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>                   s <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">float</font><font color="#990000">&gt;&amp;</font>                  x <font color="#990000">)</font>
     <font color="#FF0000">{</font>
<b><font color="#000080"># ifndef</font></b> NDEBUG
          <font color="#008080">size_t</font> n <font color="#990000">=</font> r<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">/</font> p<font color="#990000">;</font>
          <font color="#008080">size_t</font> m <font color="#990000">=</font> s<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">/</font> p<font color="#990000">;</font>
<b><font color="#000080"># endif</font></b>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> n <font color="#990000">==</font> x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">);</font>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> n <font color="#990000">==</font> <font color="#993399">1</font> <font color="#990000">);</font>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> m <font color="#990000">==</font> <font color="#993399">2</font> <font color="#990000">);</font>

          <i><font color="#9A1900">// sparsity for S(x) = f'(x) * R</font></i>
          <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> p<font color="#990000">;</font> j<font color="#990000">++)</font>
          <font color="#FF0000">{</font>    s<font color="#990000">[</font><font color="#993399">0</font> <font color="#990000">*</font> p <font color="#990000">+</font> j<font color="#990000">]</font> <font color="#990000">=</font> r<font color="#990000">[</font>j<font color="#990000">];</font>
               s<font color="#990000">[</font><font color="#993399">1</font> <font color="#990000">*</font> p <font color="#990000">+</font> j<font color="#990000">]</font> <font color="#990000">=</font> r<font color="#990000">[</font>j<font color="#990000">];</font>
          <font color="#FF0000">}</font>

          <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
     <font color="#FF0000">}</font>
     <i><font color="#9A1900">// forward Jacobian sparsity routine called by CppAD</font></i>
     <b><font color="#0000FF">virtual</font></b> <font color="#009900">bool</font> <b><font color="#000000">for_sparse_jac</font></b><font color="#990000">(</font>
          <font color="#008080">size_t</font>                                p <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font> std<font color="#990000">::</font>set<font color="#990000">&lt;</font>size_t<font color="#990000">&gt;</font> <font color="#990000">&gt;&amp;</font>     r <font color="#990000">,</font>
                vector<font color="#990000">&lt;</font> std<font color="#990000">::</font>set<font color="#990000">&lt;</font>size_t<font color="#990000">&gt;</font> <font color="#990000">&gt;&amp;</font>     s <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">float</font><font color="#990000">&gt;&amp;</font>                  x <font color="#990000">)</font>
     <font color="#FF0000">{</font>
<b><font color="#000080"># ifndef</font></b> NDEBUG
          <font color="#008080">size_t</font> n <font color="#990000">=</font> r<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font>
          <font color="#008080">size_t</font> m <font color="#990000">=</font> s<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font>
<b><font color="#000080"># endif</font></b>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> n <font color="#990000">==</font> x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">);</font>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> n <font color="#990000">==</font> <font color="#993399">1</font> <font color="#990000">);</font>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> m <font color="#990000">==</font> <font color="#993399">2</font> <font color="#990000">);</font>

          <i><font color="#9A1900">// sparsity for S(x) = f'(x) * R</font></i>
          s<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> r<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">];</font>
          s<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">=</font> r<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">];</font>

          <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
     <font color="#FF0000">}</font></tt></pre>
<br>
<b><big><a name="rev_sparse_jac" id="rev_sparse_jac">rev_sparse_jac</a></big></b>

<pre><tt>     <i><font color="#9A1900">// reverse Jacobian sparsity routine called by CppAD</font></i>
     <b><font color="#0000FF">virtual</font></b> <font color="#009900">bool</font> <b><font color="#000000">rev_sparse_jac</font></b><font color="#990000">(</font>
          <font color="#008080">size_t</font>                                p <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>                  rt <font color="#990000">,</font>
                vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>                  st <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">float</font><font color="#990000">&gt;&amp;</font>                  x <font color="#990000">)</font>
     <font color="#FF0000">{</font>
<b><font color="#000080"># ifndef</font></b> NDEBUG
          <font color="#008080">size_t</font> n <font color="#990000">=</font> st<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">/</font> p<font color="#990000">;</font>
          <font color="#008080">size_t</font> m <font color="#990000">=</font> rt<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">/</font> p<font color="#990000">;</font>
<b><font color="#000080"># endif</font></b>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> n <font color="#990000">==</font> <font color="#993399">1</font> <font color="#990000">);</font>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> m <font color="#990000">==</font> <font color="#993399">2</font> <font color="#990000">);</font>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> n <font color="#990000">==</font> x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">);</font>

          <i><font color="#9A1900">// sparsity for S(x)^T = f'(x)^T * R^T</font></i>
          <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> p<font color="#990000">;</font> j<font color="#990000">++)</font>
               st<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> rt<font color="#990000">[</font><font color="#993399">0</font> <font color="#990000">*</font> p <font color="#990000">+</font> j<font color="#990000">]</font> <font color="#990000">|</font> rt<font color="#990000">[</font><font color="#993399">1</font> <font color="#990000">*</font> p <font color="#990000">+</font> j<font color="#990000">];</font>

          <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
     <font color="#FF0000">}</font>
     <i><font color="#9A1900">// reverse Jacobian sparsity routine called by CppAD</font></i>
     <b><font color="#0000FF">virtual</font></b> <font color="#009900">bool</font> <b><font color="#000000">rev_sparse_jac</font></b><font color="#990000">(</font>
          <font color="#008080">size_t</font>                                p <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font> std<font color="#990000">::</font>set<font color="#990000">&lt;</font>size_t<font color="#990000">&gt;</font> <font color="#990000">&gt;&amp;</font>    rt <font color="#990000">,</font>
                vector<font color="#990000">&lt;</font> std<font color="#990000">::</font>set<font color="#990000">&lt;</font>size_t<font color="#990000">&gt;</font> <font color="#990000">&gt;&amp;</font>    st <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">float</font><font color="#990000">&gt;&amp;</font>                  x <font color="#990000">)</font>
     <font color="#FF0000">{</font>
<b><font color="#000080"># ifndef</font></b> NDEBUG
          <font color="#008080">size_t</font> n <font color="#990000">=</font> st<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font>
          <font color="#008080">size_t</font> m <font color="#990000">=</font> rt<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font>
<b><font color="#000080"># endif</font></b>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> n <font color="#990000">==</font> <font color="#993399">1</font> <font color="#990000">);</font>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> m <font color="#990000">==</font> <font color="#993399">2</font> <font color="#990000">);</font>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> n <font color="#990000">==</font> x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">);</font>

          <i><font color="#9A1900">// sparsity for S(x)^T = f'(x)^T * R^T</font></i>
          st<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#000000">set_union</font></b><font color="#990000">(</font>rt<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">],</font> rt<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]);</font>
          <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
     <font color="#FF0000">}</font></tt></pre>
<br>
<b><big><a name="rev_sparse_hes" id="rev_sparse_hes">rev_sparse_hes</a></big></b>

<pre><tt>     <i><font color="#9A1900">// reverse Hessian sparsity routine called by CppAD</font></i>
     <b><font color="#0000FF">virtual</font></b> <font color="#009900">bool</font> <b><font color="#000000">rev_sparse_hes</font></b><font color="#990000">(</font>
          <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>                   vx<font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>                   s <font color="#990000">,</font>
                vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>                   t <font color="#990000">,</font>
          <font color="#008080">size_t</font>                                p <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>                   r <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>                   u <font color="#990000">,</font>
                vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>                   v <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">float</font><font color="#990000">&gt;&amp;</font>                  x <font color="#990000">)</font>
     <font color="#FF0000">{</font>
<b><font color="#000080"># ifndef</font></b> NDEBUG
          <font color="#008080">size_t</font> m <font color="#990000">=</font> s<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font>
          <font color="#008080">size_t</font> n <font color="#990000">=</font> t<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font>
<b><font color="#000080"># endif</font></b>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> n <font color="#990000">);</font>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> r<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> n <font color="#990000">*</font> p <font color="#990000">);</font>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> u<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> m <font color="#990000">*</font> p <font color="#990000">);</font>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> v<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> n <font color="#990000">*</font> p <font color="#990000">);</font>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> n <font color="#990000">==</font> <font color="#993399">1</font> <font color="#990000">);</font>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> m <font color="#990000">==</font> <font color="#993399">2</font> <font color="#990000">);</font>

          <i><font color="#9A1900">// There are no cross term second derivatives for this case,</font></i>
          <i><font color="#9A1900">// so it is not necessary to vx.</font></i>

          <i><font color="#9A1900">// sparsity for T(x) = S(x) * f'(x)</font></i>
          t<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font>  s<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">|</font> s<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">];</font>

          <i><font color="#9A1900">// V(x) = f'(x)^T * g''(y) * f'(x) * R  +  g'(y) * f''(x) * R</font></i>
          <i><font color="#9A1900">// U(x) = g''(y) * f'(x) * R</font></i>
          <i><font color="#9A1900">// S(x) = g'(y)</font></i>

          <i><font color="#9A1900">// back propagate the sparsity for U, note both components</font></i>
          <i><font color="#9A1900">// of f'(x) may be non-zero;</font></i>
          <font color="#008080">size_t</font> j<font color="#990000">;</font>
          <b><font color="#0000FF">for</font></b><font color="#990000">(</font>j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> p<font color="#990000">;</font> j<font color="#990000">++)</font>
               v<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> u<font color="#990000">[</font> <font color="#993399">0</font> <font color="#990000">*</font> p <font color="#990000">+</font> j <font color="#990000">]</font> <font color="#990000">|</font> u<font color="#990000">[</font> <font color="#993399">1</font> <font color="#990000">*</font> p <font color="#990000">+</font> j <font color="#990000">];</font>

          <i><font color="#9A1900">// include forward Jacobian sparsity in Hessian sparsity</font></i>
          <i><font color="#9A1900">// (note sparsty for f''(x) * R same as for R)</font></i>
          <b><font color="#0000FF">if</font></b><font color="#990000">(</font> s<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">|</font> s<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">)</font>
          <font color="#FF0000">{</font>    <b><font color="#0000FF">for</font></b><font color="#990000">(</font>j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> p<font color="#990000">;</font> j<font color="#990000">++)</font>
               <font color="#FF0000">{</font>    <i><font color="#9A1900">// Visual Studio 2013 generates warning without bool below</font></i>
                    v<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">|=</font> <font color="#009900">bool</font><font color="#990000">(</font> r<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">);</font>
               <font color="#FF0000">}</font>
          <font color="#FF0000">}</font>

          <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
     <font color="#FF0000">}</font>
     <i><font color="#9A1900">// reverse Hessian sparsity routine called by CppAD</font></i>
     <b><font color="#0000FF">virtual</font></b> <font color="#009900">bool</font> <b><font color="#000000">rev_sparse_hes</font></b><font color="#990000">(</font>
          <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>                   vx<font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>                   s <font color="#990000">,</font>
                vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>                   t <font color="#990000">,</font>
          <font color="#008080">size_t</font>                                p <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font> std<font color="#990000">::</font>set<font color="#990000">&lt;</font>size_t<font color="#990000">&gt;</font> <font color="#990000">&gt;&amp;</font>     r <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font> std<font color="#990000">::</font>set<font color="#990000">&lt;</font>size_t<font color="#990000">&gt;</font> <font color="#990000">&gt;&amp;</font>     u <font color="#990000">,</font>
                vector<font color="#990000">&lt;</font> std<font color="#990000">::</font>set<font color="#990000">&lt;</font>size_t<font color="#990000">&gt;</font> <font color="#990000">&gt;&amp;</font>     v <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">float</font><font color="#990000">&gt;&amp;</font>                  x <font color="#990000">)</font>
     <font color="#FF0000">{</font>
<b><font color="#000080"># ifndef</font></b> NDEBUG
          <font color="#008080">size_t</font> m <font color="#990000">=</font> s<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font>
          <font color="#008080">size_t</font> n <font color="#990000">=</font> t<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font>
<b><font color="#000080"># endif</font></b>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> n <font color="#990000">);</font>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> r<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> n <font color="#990000">);</font>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> u<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> m <font color="#990000">);</font>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> v<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> n <font color="#990000">);</font>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> n <font color="#990000">==</font> <font color="#993399">1</font> <font color="#990000">);</font>
          <b><font color="#000000">assert</font></b><font color="#990000">(</font> m <font color="#990000">==</font> <font color="#993399">2</font> <font color="#990000">);</font>

          <i><font color="#9A1900">// There are no cross term second derivatives for this case,</font></i>
          <i><font color="#9A1900">// so it is not necessary to vx.</font></i>

          <i><font color="#9A1900">// sparsity for T(x) = S(x) * f'(x)</font></i>
          t<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font>  s<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">|</font> s<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">];</font>

          <i><font color="#9A1900">// V(x) = f'(x)^T * g''(y) * f'(x) * R  +  g'(y) * f''(x) * R</font></i>
          <i><font color="#9A1900">// U(x) = g''(y) * f'(x) * R</font></i>
          <i><font color="#9A1900">// S(x) = g'(y)</font></i>

          <i><font color="#9A1900">// back propagate the sparsity for U, note both components</font></i>
          <i><font color="#9A1900">// of f'(x) may be non-zero;</font></i>
          v<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#000000">set_union</font></b><font color="#990000">(</font>u<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">],</font> u<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]);</font>

          <i><font color="#9A1900">// include forward Jacobian sparsity in Hessian sparsity</font></i>
          <i><font color="#9A1900">// (note sparsty for f''(x) * R same as for R)</font></i>
          <b><font color="#0000FF">if</font></b><font color="#990000">(</font> s<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">|</font> s<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">)</font>
               v<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#000000">set_union</font></b><font color="#990000">(</font>v<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">],</font> r<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]);</font>

          <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
     <font color="#FF0000">}</font></tt></pre>
<br>
<b><big><a name="End Class Definition" id="End Class Definition">End Class Definition</a></big></b>

<pre style='display:inline'><tt>
<font color="#FF0000">}</font><font color="#990000">;</font> <i><font color="#9A1900">// End of atomic_tangent class</font></i>
<font color="#FF0000">}</font>  <i><font color="#9A1900">// End empty namespace</font></i>

</tt></pre>
<b><big><a name="Use Atomic Function" id="Use Atomic Function">Use Atomic Function</a></big></b>

<pre><tt><font color="#009900">bool</font> <b><font color="#000000">tangent</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
<font color="#FF0000">{</font>    <font color="#009900">bool</font> ok <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
     <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>AD<font color="#990000">;</font>
     <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>NearEqual<font color="#990000">;</font>
     <font color="#009900">float</font> eps <font color="#990000">=</font> <font color="#993399">10</font><font color="#990000">.</font>f <font color="#990000">*</font> CppAD<font color="#990000">::</font>numeric_limits<font color="#990000">&lt;</font><font color="#009900">float</font><font color="#990000">&gt;::</font><b><font color="#000000">epsilon</font></b><font color="#990000">();</font></tt></pre>
<br>
<b><a name="Use Atomic Function.Constructor" id="Use Atomic Function.Constructor">Constructor</a></b>

<pre style='display:inline'><tt>
     <i><font color="#9A1900">// --------------------------------------------------------------------</font></i>
     <i><font color="#9A1900">// Creater a tan and tanh object</font></i>
     <font color="#008080">atomic_tangent</font> <b><font color="#000000">my_tan</font></b><font color="#990000">(</font><font color="#FF0000">"my_tan"</font><font color="#990000">,</font> <b><font color="#0000FF">false</font></b><font color="#990000">),</font> <b><font color="#000000">my_tanh</font></b><font color="#990000">(</font><font color="#FF0000">"my_tanh"</font><font color="#990000">,</font> <b><font color="#0000FF">true</font></b><font color="#990000">);</font>
</tt></pre>
<br>
<b><a name="Use Atomic Function.Recording" id="Use Atomic Function.Recording">Recording</a></b>

<pre><tt>     <i><font color="#9A1900">// domain space vector</font></i>
     <font color="#008080">size_t</font> n  <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">;</font>
     <font color="#009900">float</font>  x0 <font color="#990000">=</font> <font color="#993399">0.5</font><font color="#990000">;</font>
     CppAD<font color="#990000">::</font><font color="#008080">vector&lt; AD&lt;float&gt; &gt;</font> <b><font color="#000000">ax</font></b><font color="#990000">(</font>n<font color="#990000">);</font>
     ax<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font>     <font color="#990000">=</font> x0<font color="#990000">;</font>

     <i><font color="#9A1900">// declare independent variables and start tape recording</font></i>
     CppAD<font color="#990000">::</font><b><font color="#000000">Independent</font></b><font color="#990000">(</font>ax<font color="#990000">);</font>

     <i><font color="#9A1900">// range space vector</font></i>
     <font color="#008080">size_t</font> m <font color="#990000">=</font> <font color="#993399">3</font><font color="#990000">;</font>
     CppAD<font color="#990000">::</font><font color="#008080">vector&lt; AD&lt;float&gt; &gt;</font> <b><font color="#000000">af</font></b><font color="#990000">(</font>m<font color="#990000">);</font>

     <i><font color="#9A1900">// temporary vector for computations</font></i>
     <i><font color="#9A1900">// (my_tan and my_tanh computes tan or tanh and its square)</font></i>
     CppAD<font color="#990000">::</font><font color="#008080">vector&lt; AD&lt;float&gt; &gt;</font> <b><font color="#000000">az</font></b><font color="#990000">(</font><font color="#993399">2</font><font color="#990000">);</font>

     <i><font color="#9A1900">// call atomic tan function and store tan(x) in f[0] (ignore tan(x)^2)</font></i>
     <b><font color="#000000">my_tan</font></b><font color="#990000">(</font>ax<font color="#990000">,</font> az<font color="#990000">);</font>
     af<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> az<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">];</font>

     <i><font color="#9A1900">// call atomic tanh function and store tanh(x) in f[1] (ignore tanh(x)^2)</font></i>
     <b><font color="#000000">my_tanh</font></b><font color="#990000">(</font>ax<font color="#990000">,</font> az<font color="#990000">);</font>
     af<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">=</font> az<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">];</font>

     <i><font color="#9A1900">// put a constant in f[2] = tanh(1.) (for sparsity pattern testing)</font></i>
     CppAD<font color="#990000">::</font><font color="#008080">vector&lt; AD&lt;float&gt; &gt;</font> <b><font color="#000000">one</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">);</font>
     one<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">.;</font>
     <b><font color="#000000">my_tanh</font></b><font color="#990000">(</font>one<font color="#990000">,</font> az<font color="#990000">);</font>
     af<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">]</font> <font color="#990000">=</font> az<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">];</font>

     <i><font color="#9A1900">// create f: x -&gt; f and stop tape recording</font></i>
     CppAD<font color="#990000">::</font><font color="#008080">ADFun&lt;float&gt;</font> F<font color="#990000">;</font>
     F<font color="#990000">.</font><b><font color="#000000">Dependent</font></b><font color="#990000">(</font>ax<font color="#990000">,</font> af<font color="#990000">);</font></tt></pre>
<br>
<b><a name="Use Atomic Function.forward" id="Use Atomic Function.forward">forward</a></b>

<pre><tt>     <i><font color="#9A1900">// check function value</font></i>
     <font color="#009900">float</font> tan <font color="#990000">=</font> std<font color="#990000">::</font><b><font color="#000000">tan</font></b><font color="#990000">(</font>x0<font color="#990000">);</font>
     ok <font color="#990000">&amp;=</font> <b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>af<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">,</font> tan<font color="#990000">,</font>  eps<font color="#990000">,</font> eps<font color="#990000">);</font>
     <font color="#009900">float</font> tanh <font color="#990000">=</font> std<font color="#990000">::</font><b><font color="#000000">tanh</font></b><font color="#990000">(</font>x0<font color="#990000">);</font>
     ok <font color="#990000">&amp;=</font> <b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>af<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">,</font> tanh<font color="#990000">,</font>  eps<font color="#990000">,</font> eps<font color="#990000">);</font>

     <i><font color="#9A1900">// check zero order forward</font></i>
     CppAD<font color="#990000">::</font><font color="#008080">vector&lt;float&gt;</font> <b><font color="#000000">x</font></b><font color="#990000">(</font>n<font color="#990000">),</font> <b><font color="#000000">f</font></b><font color="#990000">(</font>m<font color="#990000">);</font>
     x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> x0<font color="#990000">;</font>
     f    <font color="#990000">=</font> F<font color="#990000">.</font><b><font color="#000000">Forward</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">,</font> x<font color="#990000">);</font>
     ok <font color="#990000">&amp;=</font> <b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>f<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">,</font> tan<font color="#990000">,</font>  eps<font color="#990000">,</font> eps<font color="#990000">);</font>
     ok <font color="#990000">&amp;=</font> <b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>f<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">,</font> tanh<font color="#990000">,</font>  eps<font color="#990000">,</font> eps<font color="#990000">);</font>

     <i><font color="#9A1900">// compute first partial of f w.r.t. x[0] using forward mode</font></i>
     CppAD<font color="#990000">::</font><font color="#008080">vector&lt;float&gt;</font> <b><font color="#000000">dx</font></b><font color="#990000">(</font>n<font color="#990000">),</font> <b><font color="#000000">df</font></b><font color="#990000">(</font>m<font color="#990000">);</font>
     dx<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">.;</font>
     df    <font color="#990000">=</font> F<font color="#990000">.</font><b><font color="#000000">Forward</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">,</font> dx<font color="#990000">);</font></tt></pre>
<br>
<b><a name="Use Atomic Function.reverse" id="Use Atomic Function.reverse">reverse</a></b>

<pre><tt>     <i><font color="#9A1900">// compute derivative of tan - tanh using reverse mode</font></i>
     CppAD<font color="#990000">::</font><font color="#008080">vector&lt;float&gt;</font> <b><font color="#000000">w</font></b><font color="#990000">(</font>m<font color="#990000">),</font> <b><font color="#000000">dw</font></b><font color="#990000">(</font>n<font color="#990000">);</font>
     w<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font>  <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">.;</font>
     w<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font>  <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">.;</font>
     w<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">]</font>  <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">.;</font>
     dw    <font color="#990000">=</font> F<font color="#990000">.</font><b><font color="#000000">Reverse</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">,</font> w<font color="#990000">);</font>

     <i><font color="#9A1900">// tan'(x)   = 1 + tan(x)  * tan(x)</font></i>
     <i><font color="#9A1900">// tanh'(x)  = 1 - tanh(x) * tanh(x)</font></i>
     <font color="#009900">float</font> tanp  <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">.</font>f <font color="#990000">+</font> tan <font color="#990000">*</font> tan<font color="#990000">;</font>
     <font color="#009900">float</font> tanhp <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">.</font>f <font color="#990000">-</font> tanh <font color="#990000">*</font> tanh<font color="#990000">;</font>
     ok   <font color="#990000">&amp;=</font> <b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>df<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">],</font> tanp<font color="#990000">,</font> eps<font color="#990000">,</font> eps<font color="#990000">);</font>
     ok   <font color="#990000">&amp;=</font> <b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>df<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">],</font> tanhp<font color="#990000">,</font> eps<font color="#990000">,</font> eps<font color="#990000">);</font>
     ok   <font color="#990000">&amp;=</font> <b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>dw<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">],</font> w<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]*</font>tanp <font color="#990000">+</font> w<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]*</font>tanhp<font color="#990000">,</font> eps<font color="#990000">,</font> eps<font color="#990000">);</font>

     <i><font color="#9A1900">// compute second partial of f w.r.t. x[0] using forward mode</font></i>
     CppAD<font color="#990000">::</font><font color="#008080">vector&lt;float&gt;</font> <b><font color="#000000">ddx</font></b><font color="#990000">(</font>n<font color="#990000">),</font> <b><font color="#000000">ddf</font></b><font color="#990000">(</font>m<font color="#990000">);</font>
     ddx<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">.;</font>
     ddf    <font color="#990000">=</font> F<font color="#990000">.</font><b><font color="#000000">Forward</font></b><font color="#990000">(</font><font color="#993399">2</font><font color="#990000">,</font> ddx<font color="#990000">);</font>

     <i><font color="#9A1900">// compute second derivative of tan - tanh using reverse mode</font></i>
     CppAD<font color="#990000">::</font><font color="#008080">vector&lt;float&gt;</font> <b><font color="#000000">ddw</font></b><font color="#990000">(</font><font color="#993399">2</font><font color="#990000">);</font>
     ddw   <font color="#990000">=</font> F<font color="#990000">.</font><b><font color="#000000">Reverse</font></b><font color="#990000">(</font><font color="#993399">2</font><font color="#990000">,</font> w<font color="#990000">);</font>

     <i><font color="#9A1900">// tan''(x)   = 2 *  tan(x) * tan'(x)</font></i>
     <i><font color="#9A1900">// tanh''(x)  = - 2 * tanh(x) * tanh'(x)</font></i>
     <i><font color="#9A1900">// Note that second order Taylor coefficient for u half the</font></i>
     <i><font color="#9A1900">// corresponding second derivative.</font></i>
     <font color="#009900">float</font> two    <font color="#990000">=</font> <font color="#993399">2</font><font color="#990000">;</font>
     <font color="#009900">float</font> tanpp  <font color="#990000">=</font>   two <font color="#990000">*</font> tan <font color="#990000">*</font> tanp<font color="#990000">;</font>
     <font color="#009900">float</font> tanhpp <font color="#990000">=</font> <font color="#990000">-</font> two <font color="#990000">*</font> tanh <font color="#990000">*</font> tanhp<font color="#990000">;</font>
     ok   <font color="#990000">&amp;=</font> <b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>two <font color="#990000">*</font> ddf<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">],</font> tanpp<font color="#990000">,</font> eps<font color="#990000">,</font> eps<font color="#990000">);</font>
     ok   <font color="#990000">&amp;=</font> <b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>two <font color="#990000">*</font> ddf<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">],</font> tanhpp<font color="#990000">,</font> eps<font color="#990000">,</font> eps<font color="#990000">);</font>
     ok   <font color="#990000">&amp;=</font> <b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>ddw<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">],</font> w<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]*</font>tanp  <font color="#990000">+</font> w<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]*</font>tanhp <font color="#990000">,</font> eps<font color="#990000">,</font> eps<font color="#990000">);</font>
     ok   <font color="#990000">&amp;=</font> <b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>ddw<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">],</font> w<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]*</font>tanpp <font color="#990000">+</font> w<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]*</font>tanhpp<font color="#990000">,</font> eps<font color="#990000">,</font> eps<font color="#990000">);</font></tt></pre>
<br>
<b><a name="Use Atomic Function.for_sparse_jac" id="Use Atomic Function.for_sparse_jac">for_sparse_jac</a></b>

<pre><tt>     <i><font color="#9A1900">// Forward mode computation of sparsity pattern for F.</font></i>
     <font color="#008080">size_t</font> p <font color="#990000">=</font> n<font color="#990000">;</font>
     <i><font color="#9A1900">// user vectorBool because m and n are small</font></i>
     CppAD<font color="#990000">::</font><font color="#008080">vectorBool</font> <b><font color="#000000">r1</font></b><font color="#990000">(</font>p<font color="#990000">),</font> <b><font color="#000000">s1</font></b><font color="#990000">(</font>m <font color="#990000">*</font> p<font color="#990000">);</font>
     r1<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>            <i><font color="#9A1900">// propagate sparsity for x[0]</font></i>
     s1    <font color="#990000">=</font> F<font color="#990000">.</font><b><font color="#000000">ForSparseJac</font></b><font color="#990000">(</font>p<font color="#990000">,</font> r1<font color="#990000">);</font>
     ok  <font color="#990000">&amp;=</font> <font color="#990000">(</font>s1<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">==</font> <b><font color="#0000FF">true</font></b><font color="#990000">);</font>  <i><font color="#9A1900">// f[0] depends on x[0]</font></i>
     ok  <font color="#990000">&amp;=</font> <font color="#990000">(</font>s1<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">==</font> <b><font color="#0000FF">true</font></b><font color="#990000">);</font>  <i><font color="#9A1900">// f[1] depends on x[0]</font></i>
     ok  <font color="#990000">&amp;=</font> <font color="#990000">(</font>s1<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">]</font> <font color="#990000">==</font> <b><font color="#0000FF">false</font></b><font color="#990000">);</font> <i><font color="#9A1900">// f[2] does not depend on x[0]</font></i></tt></pre>
<br>
<b><a name="Use Atomic Function.rev_sparse_jac" id="Use Atomic Function.rev_sparse_jac">rev_sparse_jac</a></b>

<pre><tt>     <i><font color="#9A1900">// Reverse mode computation of sparsity pattern for F.</font></i>
     <font color="#008080">size_t</font> q <font color="#990000">=</font> m<font color="#990000">;</font>
     CppAD<font color="#990000">::</font><font color="#008080">vectorBool</font> <b><font color="#000000">s2</font></b><font color="#990000">(</font>q <font color="#990000">*</font> m<font color="#990000">),</font> <b><font color="#000000">r2</font></b><font color="#990000">(</font>q <font color="#990000">*</font> n<font color="#990000">);</font>
     <i><font color="#9A1900">// Sparsity pattern for identity matrix</font></i>
     <font color="#008080">size_t</font> i<font color="#990000">,</font> j<font color="#990000">;</font>
     <b><font color="#0000FF">for</font></b><font color="#990000">(</font>i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> q<font color="#990000">;</font> i<font color="#990000">++)</font>
     <font color="#FF0000">{</font>    <b><font color="#0000FF">for</font></b><font color="#990000">(</font>j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> m<font color="#990000">;</font> j<font color="#990000">++)</font>
               s2<font color="#990000">[</font>i <font color="#990000">*</font> q <font color="#990000">+</font> j<font color="#990000">]</font> <font color="#990000">=</font> <font color="#990000">(</font>i <font color="#990000">==</font> j<font color="#990000">);</font>
     <font color="#FF0000">}</font>
     r2   <font color="#990000">=</font> F<font color="#990000">.</font><b><font color="#000000">RevSparseJac</font></b><font color="#990000">(</font>q<font color="#990000">,</font> s2<font color="#990000">);</font>
     ok  <font color="#990000">&amp;=</font> <font color="#990000">(</font>r2<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">==</font> <b><font color="#0000FF">true</font></b><font color="#990000">);</font>  <i><font color="#9A1900">// f[0] depends on x[0]</font></i>
     ok  <font color="#990000">&amp;=</font> <font color="#990000">(</font>r2<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">==</font> <b><font color="#0000FF">true</font></b><font color="#990000">);</font>  <i><font color="#9A1900">// f[1] depends on x[0]</font></i>
     ok  <font color="#990000">&amp;=</font> <font color="#990000">(</font>r2<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">]</font> <font color="#990000">==</font> <b><font color="#0000FF">false</font></b><font color="#990000">);</font> <i><font color="#9A1900">// f[2] does not depend on x[0]</font></i></tt></pre>
<br>
<b><a name="Use Atomic Function.rev_sparse_hes" id="Use Atomic Function.rev_sparse_hes">rev_sparse_hes</a></b>

<pre><tt>     <i><font color="#9A1900">// Hessian sparsity for f[0]</font></i>
     CppAD<font color="#990000">::</font><font color="#008080">vectorBool</font> <b><font color="#000000">s3</font></b><font color="#990000">(</font>m<font color="#990000">),</font> <b><font color="#000000">h</font></b><font color="#990000">(</font>p <font color="#990000">*</font> n<font color="#990000">);</font>
     s3<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
     s3<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>
     s3<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>
     h    <font color="#990000">=</font> F<font color="#990000">.</font><b><font color="#000000">RevSparseHes</font></b><font color="#990000">(</font>p<font color="#990000">,</font> s3<font color="#990000">);</font>
     ok  <font color="#990000">&amp;=</font> <font color="#990000">(</font>h<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">==</font> <b><font color="#0000FF">true</font></b><font color="#990000">);</font>  <i><font color="#9A1900">// Hessian is non-zero</font></i>

     <i><font color="#9A1900">// Hessian sparsity for f[2]</font></i>
     s3<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>
     s3<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
     h    <font color="#990000">=</font> F<font color="#990000">.</font><b><font color="#000000">RevSparseHes</font></b><font color="#990000">(</font>p<font color="#990000">,</font> s3<font color="#990000">);</font>
     ok  <font color="#990000">&amp;=</font> <font color="#990000">(</font>h<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">==</font> <b><font color="#0000FF">false</font></b><font color="#990000">);</font>  <i><font color="#9A1900">// Hessian is zero</font></i></tt></pre>
<br>
<b><a name="Use Atomic Function.Large x Values" id="Use Atomic Function.Large x Values">Large x Values</a></b>

<pre><tt>     <i><font color="#9A1900">// check tanh results for a large value of x</font></i>
     x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font>  <font color="#990000">=</font> std<font color="#990000">::</font>numeric_limits<font color="#990000">&lt;</font><font color="#009900">float</font><font color="#990000">&gt;::</font><b><font color="#000000">max</font></b><font color="#990000">()</font> <font color="#990000">/</font> two<font color="#990000">;</font>
     f     <font color="#990000">=</font> F<font color="#990000">.</font><b><font color="#000000">Forward</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">,</font> x<font color="#990000">);</font>
     tanh  <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">.;</font>
     ok   <font color="#990000">&amp;=</font> <b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>f<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">],</font> tanh<font color="#990000">,</font> eps<font color="#990000">,</font> eps<font color="#990000">);</font>
     df    <font color="#990000">=</font> F<font color="#990000">.</font><b><font color="#000000">Forward</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">,</font> dx<font color="#990000">);</font>
     tanhp <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">.;</font>
     ok   <font color="#990000">&amp;=</font> <b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>df<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">],</font> tanhp<font color="#990000">,</font> eps<font color="#990000">,</font> eps<font color="#990000">);</font>

     <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
<font color="#FF0000">}</font></tt></pre>

<hr>Input File: example/atomic/tangent.cpp

</body>
</html>

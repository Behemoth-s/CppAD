<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Nonlinear Programming Using CppAD and Ipopt: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Nonlinear Programming Using CppAD and Ipopt: Example and Test">
<meta name="keywords" id="keywords" content=" nonlinear programming using cppad ipopt: example test ipopt Ad purpose configuration requirement ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_ipopt_nlp_get_started.cpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://coin-or.github.io/CppAD/" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="cppad_ipopt_nlp.htm" target="_top">Prev</a>
</td><td><a href="ipopt_nlp_ode.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>Appendix</option>
<option>deprecated</option>
<option>cppad_ipopt_nlp</option>
<option>ipopt_nlp_get_started.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>Appendix-&gt;</option>
<option>Faq</option>
<option>directory</option>
<option>Theory</option>
<option>glossary</option>
<option>Bib</option>
<option>wish_list</option>
<option>whats_new</option>
<option>deprecated</option>
<option>compare_c</option>
<option>numeric_ad</option>
<option>addon</option>
<option>License</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>deprecated-&gt;</option>
<option>include_deprecated</option>
<option>FunDeprecated</option>
<option>CompareChange</option>
<option>omp_max_thread</option>
<option>TrackNewDel</option>
<option>omp_alloc</option>
<option>memory_leak</option>
<option>epsilon</option>
<option>test_vector</option>
<option>cppad_ipopt_nlp</option>
<option>old_atomic</option>
<option>zdouble</option>
<option>autotools</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>cppad_ipopt_nlp-&gt;</option>
<option>ipopt_nlp_get_started.cpp</option>
<option>ipopt_nlp_ode</option>
<option>ipopt_ode_speed.cpp</option>
</select>
</td>
<td>ipopt_nlp_get_started.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Purpose</option>
<option>Configuration Requirement</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@


<center><b><big><big>Nonlinear Programming Using CppAD and Ipopt: Example and Test</big></big></b></center>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
This example program demonstrates how to use the class cppad_ipopt_nlp to
solve the example problem in the Ipopt documentation; i.e., the problem
<small>@[@

\begin{array}{lc}
{\rm minimize \; }      &  x_1 * x_4 * (x_1 + x_2 + x_3) + x_3
\\
{\rm subject \; to \; } &  x_1 * x_2 * x_3 * x_4  \geq 25
\\
                        &  x_1^2 + x_2^2 + x_3^2 + x_4^2 = 40
\\
                        &  1 \leq x_1, x_2, x_3, x_4 \leq 5
\end{array}

@]@</small>


<br>
<br>
<b><big><a name="Configuration Requirement" id="Configuration Requirement">Configuration Requirement</a></big></b>
<br>
This example will be compiled and tested provided that
a value for 
<code><i><font color="black"><span style='white-space: nowrap'>ipopt_prefix</span></font></i></code>

is specified on the <a href="cmake.htm" target="_top"><span style='white-space: nowrap'>cmake</span></a>
 command line.

<code><font color="blue">
<pre><tt>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad_ipopt_nlp.hpp&gt;</font>

<b><font color="#0000FF">namespace</font></b> <font color="#FF0000">{</font>
     <b><font color="#0000FF">using</font></b> <b><font color="#0000FF">namespace</font></b> cppad_ipopt<font color="#990000">;</font>

     <b><font color="#0000FF">class</font></b> <font color="#008080">FG_info</font> <font color="#990000">:</font> <b><font color="#0000FF">public</font></b> cppad_ipopt_fg_info
     <font color="#FF0000">{</font>
     <b><font color="#0000FF">private</font></b><font color="#990000">:</font>
          <font color="#009900">bool</font> retape_<font color="#990000">;</font>
     <b><font color="#0000FF">public</font></b><font color="#990000">:</font>
          <i><font color="#9A1900">// derived class part of constructor</font></i>
          <b><font color="#000000">FG_info</font></b><font color="#990000">(</font><font color="#009900">bool</font> retape_in<font color="#990000">)</font>
          <font color="#990000">:</font> <b><font color="#000000">retape_</font></b> <font color="#990000">(</font>retape_in<font color="#990000">)</font>
          <font color="#FF0000">{</font> <font color="#FF0000">}</font>
          <i><font color="#9A1900">// Evaluation of the objective f(x), and constraints g(x)</font></i>
          <i><font color="#9A1900">// using an Algorithmic Differentiation (AD) class.</font></i>
          <font color="#008080">ADVector</font> <b><font color="#000000">eval_r</font></b><font color="#990000">(</font><font color="#008080">size_t</font> k<font color="#990000">,</font> <b><font color="#0000FF">const</font></b> ADVector<font color="#990000">&amp;</font>  x<font color="#990000">)</font>
          <font color="#FF0000">{</font>    <font color="#008080">ADVector</font> <b><font color="#000000">fg</font></b><font color="#990000">(</font><font color="#993399">3</font><font color="#990000">);</font>

               <i><font color="#9A1900">// Fortran style indexing</font></i>
               <font color="#008080">ADNumber</font> x1 <font color="#990000">=</font> x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">];</font>
               <font color="#008080">ADNumber</font> x2 <font color="#990000">=</font> x<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">];</font>
               <font color="#008080">ADNumber</font> x3 <font color="#990000">=</font> x<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">];</font>
               <font color="#008080">ADNumber</font> x4 <font color="#990000">=</font> x<font color="#990000">[</font><font color="#993399">3</font><font color="#990000">];</font>
               <i><font color="#9A1900">// f(x)</font></i>
               fg<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> x1 <font color="#990000">*</font> x4 <font color="#990000">*</font> <font color="#990000">(</font>x1 <font color="#990000">+</font> x2 <font color="#990000">+</font> x3<font color="#990000">)</font> <font color="#990000">+</font> x3<font color="#990000">;</font>
               <i><font color="#9A1900">// g_1 (x)</font></i>
               fg<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">=</font> x1 <font color="#990000">*</font> x2 <font color="#990000">*</font> x3 <font color="#990000">*</font> x4<font color="#990000">;</font>
               <i><font color="#9A1900">// g_2 (x)</font></i>
               fg<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">]</font> <font color="#990000">=</font> x1 <font color="#990000">*</font> x1 <font color="#990000">+</font> x2 <font color="#990000">*</font> x2 <font color="#990000">+</font> x3 <font color="#990000">*</font> x3 <font color="#990000">+</font> x4 <font color="#990000">*</font> x4<font color="#990000">;</font>
               <b><font color="#0000FF">return</font></b> fg<font color="#990000">;</font>
          <font color="#FF0000">}</font>
          <font color="#009900">bool</font> <b><font color="#000000">retape</font></b><font color="#990000">(</font><font color="#008080">size_t</font> k<font color="#990000">)</font>
          <font color="#FF0000">{</font>    <b><font color="#0000FF">return</font></b> retape_<font color="#990000">;</font> <font color="#FF0000">}</font>
     <font color="#FF0000">}</font><font color="#990000">;</font>
<font color="#FF0000">}</font>

<font color="#009900">bool</font> <b><font color="#000000">ipopt_get_started</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
<font color="#FF0000">{</font>    <font color="#009900">bool</font> ok <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
     <font color="#008080">size_t</font> j<font color="#990000">;</font>


     <i><font color="#9A1900">// number of independent variables (domain dimension for f and g)</font></i>
     <font color="#008080">size_t</font> n <font color="#990000">=</font> <font color="#993399">4</font><font color="#990000">;</font>
     <i><font color="#9A1900">// number of constraints (range dimension for g)</font></i>
     <font color="#008080">size_t</font> m <font color="#990000">=</font> <font color="#993399">2</font><font color="#990000">;</font>
     <i><font color="#9A1900">// initial value of the independent variables</font></i>
     <font color="#008080">NumberVector</font> <b><font color="#000000">x_i</font></b><font color="#990000">(</font>n<font color="#990000">);</font>
     x_i<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">1.0</font><font color="#990000">;</font>
     x_i<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">5.0</font><font color="#990000">;</font>
     x_i<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">5.0</font><font color="#990000">;</font>
     x_i<font color="#990000">[</font><font color="#993399">3</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">1.0</font><font color="#990000">;</font>
     <i><font color="#9A1900">// lower and upper limits for x</font></i>
     <font color="#008080">NumberVector</font> <b><font color="#000000">x_l</font></b><font color="#990000">(</font>n<font color="#990000">);</font>
     <font color="#008080">NumberVector</font> <b><font color="#000000">x_u</font></b><font color="#990000">(</font>n<font color="#990000">);</font>
     <b><font color="#0000FF">for</font></b><font color="#990000">(</font>j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> j<font color="#990000">++)</font>
     <font color="#FF0000">{</font>    x_l<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">1.0</font><font color="#990000">;</font>
          x_u<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">5.0</font><font color="#990000">;</font>
     <font color="#FF0000">}</font>
     <i><font color="#9A1900">// lower and upper limits for g</font></i>
     <font color="#008080">NumberVector</font> <b><font color="#000000">g_l</font></b><font color="#990000">(</font>m<font color="#990000">);</font>
     <font color="#008080">NumberVector</font> <b><font color="#000000">g_u</font></b><font color="#990000">(</font>m<font color="#990000">);</font>
     g_l<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">25.0</font><font color="#990000">;</font>     g_u<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">1.0e19</font><font color="#990000">;</font>
     g_l<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">40.0</font><font color="#990000">;</font>     g_u<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">40.0</font><font color="#990000">;</font>

     <font color="#008080">size_t</font> icase<font color="#990000">;</font>
     <b><font color="#0000FF">for</font></b><font color="#990000">(</font>icase <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> icase <font color="#990000">&lt;=</font> <font color="#993399">1</font><font color="#990000">;</font> icase<font color="#990000">++)</font>
     <font color="#FF0000">{</font>    <i><font color="#9A1900">// Should cppad_ipopt_nlp retape the operation sequence for</font></i>
          <i><font color="#9A1900">// every new x. Can test both true and false cases because</font></i>
          <i><font color="#9A1900">// the operation sequence does not depend on x (for this case).</font></i>
          <font color="#009900">bool</font> retape <font color="#990000">=</font> icase <font color="#990000">!=</font> <font color="#993399">0</font><font color="#990000">;</font>

          <i><font color="#9A1900">// object in derived class</font></i>
          <font color="#008080">FG_info</font> <b><font color="#000000">fg_info</font></b><font color="#990000">(</font>retape<font color="#990000">);</font>

          <i><font color="#9A1900">// create the Ipopt interface</font></i>
          <font color="#008080">cppad_ipopt_solution</font> solution<font color="#990000">;</font>
          Ipopt<font color="#990000">::</font><font color="#008080">SmartPtr&lt;Ipopt::TNLP&gt;</font> cppad_nlp <font color="#990000">=</font> <b><font color="#0000FF">new</font></b> <b><font color="#000000">cppad_ipopt_nlp</font></b><font color="#990000">(</font>
          n<font color="#990000">,</font> m<font color="#990000">,</font> x_i<font color="#990000">,</font> x_l<font color="#990000">,</font> x_u<font color="#990000">,</font> g_l<font color="#990000">,</font> g_u<font color="#990000">,</font> <font color="#990000">&amp;</font>fg_info<font color="#990000">,</font> <font color="#990000">&amp;</font>solution
          <font color="#990000">);</font>

          <i><font color="#9A1900">// Create an instance of the IpoptApplication</font></i>
          <b><font color="#0000FF">using</font></b> Ipopt<font color="#990000">::</font>IpoptApplication<font color="#990000">;</font>
          Ipopt<font color="#990000">::</font><font color="#008080">SmartPtr&lt;IpoptApplication&gt;</font> app <font color="#990000">=</font> <b><font color="#0000FF">new</font></b> <b><font color="#000000">IpoptApplication</font></b><font color="#990000">();</font>

          <i><font color="#9A1900">// turn off any printing</font></i>
          app<font color="#990000">-&gt;</font><b><font color="#000000">Options</font></b><font color="#990000">()-&gt;</font><b><font color="#000000">SetIntegerValue</font></b><font color="#990000">(</font><font color="#FF0000">"print_level"</font><font color="#990000">,</font> <font color="#993399">0</font><font color="#990000">);</font>
          app<font color="#990000">-&gt;</font><b><font color="#000000">Options</font></b><font color="#990000">()-&gt;</font><b><font color="#000000">SetStringValue</font></b><font color="#990000">(</font><font color="#FF0000">"sb"</font><font color="#990000">,</font> <font color="#FF0000">"yes"</font><font color="#990000">);</font>

          <i><font color="#9A1900">// maximum number of iterations</font></i>
          app<font color="#990000">-&gt;</font><b><font color="#000000">Options</font></b><font color="#990000">()-&gt;</font><b><font color="#000000">SetIntegerValue</font></b><font color="#990000">(</font><font color="#FF0000">"max_iter"</font><font color="#990000">,</font> <font color="#993399">10</font><font color="#990000">);</font>

          <i><font color="#9A1900">// approximate accuracy in first order necessary conditions;</font></i>
          <i><font color="#9A1900">// see Mathematical Programming, Volume 106, Number 1,</font></i>
          <i><font color="#9A1900">// Pages 25-57, Equation (6)</font></i>
          app<font color="#990000">-&gt;</font><b><font color="#000000">Options</font></b><font color="#990000">()-&gt;</font><b><font color="#000000">SetNumericValue</font></b><font color="#990000">(</font><font color="#FF0000">"tol"</font><font color="#990000">,</font> <font color="#993399">1e-9</font><font color="#990000">);</font>

          <i><font color="#9A1900">// derivative testing</font></i>
          app<font color="#990000">-&gt;</font><b><font color="#000000">Options</font></b><font color="#990000">()-&gt;</font>
          <b><font color="#000000">SetStringValue</font></b><font color="#990000">(</font><font color="#FF0000">"derivative_test"</font><font color="#990000">,</font> <font color="#FF0000">"second-order"</font><font color="#990000">);</font>
          app<font color="#990000">-&gt;</font><b><font color="#000000">Options</font></b><font color="#990000">()-&gt;</font> <b><font color="#000000">SetNumericValue</font></b><font color="#990000">(</font>
               <font color="#FF0000">"point_perturbation_radius"</font><font color="#990000">,</font> <font color="#993399">0</font><font color="#990000">.</font>
          <font color="#990000">);</font>

          <i><font color="#9A1900">// Initialize the IpoptApplication and process the options</font></i>
          Ipopt<font color="#990000">::</font><font color="#008080">ApplicationReturnStatus</font> status <font color="#990000">=</font> app<font color="#990000">-&gt;</font><b><font color="#000000">Initialize</font></b><font color="#990000">();</font>
          ok    <font color="#990000">&amp;=</font> status <font color="#990000">==</font> Ipopt<font color="#990000">::</font>Solve_Succeeded<font color="#990000">;</font>

          <i><font color="#9A1900">// Run the IpoptApplication</font></i>
          status <font color="#990000">=</font> app<font color="#990000">-&gt;</font><b><font color="#000000">OptimizeTNLP</font></b><font color="#990000">(</font>cppad_nlp<font color="#990000">);</font>
          ok    <font color="#990000">&amp;=</font> status <font color="#990000">==</font> Ipopt<font color="#990000">::</font>Solve_Succeeded<font color="#990000">;</font>

          <i><font color="#9A1900">/*</font></i>
<i><font color="#9A1900">          Check some of the solution values</font></i>
<i><font color="#9A1900">          */</font></i>
          ok <font color="#990000">&amp;=</font> solution<font color="#990000">.</font>status <font color="#990000">==</font> cppad_ipopt_solution<font color="#990000">::</font>success<font color="#990000">;</font>
          <i><font color="#9A1900">//</font></i>
          <font color="#009900">double</font> check_x<font color="#990000">[]</font>   <font color="#990000">=</font> <font color="#FF0000">{</font> <font color="#993399">1.000000</font><font color="#990000">,</font> <font color="#993399">4.743000</font><font color="#990000">,</font> <font color="#993399">3.82115</font><font color="#990000">,</font> <font color="#993399">1.379408</font> <font color="#FF0000">}</font><font color="#990000">;</font>
          <font color="#009900">double</font> check_z_l<font color="#990000">[]</font> <font color="#990000">=</font> <font color="#FF0000">{</font> <font color="#993399">1.087871</font><font color="#990000">,</font> <font color="#993399">0</font><font color="#990000">.,</font>       <font color="#993399">0</font><font color="#990000">.,</font>      <font color="#993399">0</font><font color="#990000">.</font>       <font color="#FF0000">}</font><font color="#990000">;</font>
          <font color="#009900">double</font> check_z_u<font color="#990000">[]</font> <font color="#990000">=</font> <font color="#FF0000">{</font> <font color="#993399">0</font><font color="#990000">.,</font>       <font color="#993399">0</font><font color="#990000">.,</font>       <font color="#993399">0</font><font color="#990000">.,</font>      <font color="#993399">0</font><font color="#990000">.</font>       <font color="#FF0000">}</font><font color="#990000">;</font>
          <font color="#009900">double</font> rel_tol     <font color="#990000">=</font> <font color="#993399">1e-6</font><font color="#990000">;</font>  <i><font color="#9A1900">// relative tolerance</font></i>
          <font color="#009900">double</font> abs_tol     <font color="#990000">=</font> <font color="#993399">1e-6</font><font color="#990000">;</font>  <i><font color="#9A1900">// absolute tolerance</font></i>
          <b><font color="#0000FF">for</font></b><font color="#990000">(</font>j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> j<font color="#990000">++)</font>
          <font color="#FF0000">{</font>    ok <font color="#990000">&amp;=</font> CppAD<font color="#990000">::</font><b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>
               check_x<font color="#990000">[</font>j<font color="#990000">],</font>   solution<font color="#990000">.</font>x<font color="#990000">[</font>j<font color="#990000">],</font>   rel_tol<font color="#990000">,</font> abs_tol
               <font color="#990000">);</font>
               ok <font color="#990000">&amp;=</font> CppAD<font color="#990000">::</font><b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>
               check_z_l<font color="#990000">[</font>j<font color="#990000">],</font> solution<font color="#990000">.</font>z_l<font color="#990000">[</font>j<font color="#990000">],</font> rel_tol<font color="#990000">,</font> abs_tol
               <font color="#990000">);</font>
               ok <font color="#990000">&amp;=</font> CppAD<font color="#990000">::</font><b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>
               check_z_u<font color="#990000">[</font>j<font color="#990000">],</font> solution<font color="#990000">.</font>z_u<font color="#990000">[</font>j<font color="#990000">],</font> rel_tol<font color="#990000">,</font> abs_tol
               <font color="#990000">);</font>
          <font color="#FF0000">}</font>
     <font color="#FF0000">}</font>

     <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
<font color="#FF0000">}</font>
</tt></pre>
</font></code>
<hr>Input File: cppad_ipopt/example/get_started.cpp

</body>
</html>

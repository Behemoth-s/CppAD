<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>ODE Fitting Using Simple Representation</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="ODE Fitting Using Simple Representation">
<meta name="keywords" id="keywords" content=" ode fitting using simple representation cppad_ipopt_nlp example source ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_ipopt_nlp_ode_simple.hpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://coin-or.github.io/CppAD/" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="ipopt_nlp_ode_simple.htm" target="_top">Prev</a>
</td><td><a href="ipopt_nlp_ode_fast.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>Appendix</option>
<option>deprecated</option>
<option>cppad_ipopt_nlp</option>
<option>ipopt_nlp_ode</option>
<option>ipopt_nlp_ode_simple</option>
<option>ipopt_nlp_ode_simple.hpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>cppad_ipopt_nlp-&gt;</option>
<option>ipopt_nlp_get_started.cpp</option>
<option>ipopt_nlp_ode</option>
<option>ipopt_ode_speed.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>ipopt_nlp_ode-&gt;</option>
<option>ipopt_nlp_ode_problem</option>
<option>ipopt_nlp_ode_simple</option>
<option>ipopt_nlp_ode_fast</option>
<option>ipopt_nlp_ode_run.hpp</option>
<option>ipopt_nlp_ode_check.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>ipopt_nlp_ode_simple-&gt;</option>
<option>ipopt_nlp_ode_simple.hpp</option>
</select>
</td>
<td>ipopt_nlp_ode_simple.hpp</td>
<td>Headings</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<center><b><big><big>ODE Fitting Using Simple Representation</big></big></b></center>
<code><font color="blue"><pre><tt><b><font color="#000080"># include</font></b> <font color="#FF0000">"ode_problem.hpp"</font>

<i><font color="#9A1900">// define in the empty namespace</font></i>
<b><font color="#0000FF">namespace</font></b> <font color="#FF0000">{</font>
     <b><font color="#0000FF">using</font></b> <b><font color="#0000FF">namespace</font></b> cppad_ipopt<font color="#990000">;</font>

     <b><font color="#0000FF">class</font></b> <font color="#008080">FG_simple</font> <font color="#990000">:</font> <b><font color="#0000FF">public</font></b> cppad_ipopt_fg_info
     <font color="#FF0000">{</font>
     <b><font color="#0000FF">private</font></b><font color="#990000">:</font>
          <font color="#009900">bool</font>       retape_<font color="#990000">;</font>
          <font color="#008080">SizeVector</font> N_<font color="#990000">;</font>
          <font color="#008080">SizeVector</font> S_<font color="#990000">;</font>
     <b><font color="#0000FF">public</font></b><font color="#990000">:</font>
          <i><font color="#9A1900">// derived class part of constructor</font></i>
          <b><font color="#000000">FG_simple</font></b><font color="#990000">(</font><font color="#009900">bool</font> retape_in<font color="#990000">,</font> <b><font color="#0000FF">const</font></b> SizeVector<font color="#990000">&amp;</font> N<font color="#990000">)</font>
          <font color="#990000">:</font> <b><font color="#000000">retape_</font></b> <font color="#990000">(</font>retape_in<font color="#990000">),</font> <b><font color="#000000">N_</font></b><font color="#990000">(</font>N<font color="#990000">)</font>
          <font color="#FF0000">{</font>    <b><font color="#000000">assert</font></b><font color="#990000">(</font> N_<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">==</font> <font color="#993399">0</font> <font color="#990000">);</font>
               S_<font color="#990000">.</font><b><font color="#000000">resize</font></b><font color="#990000">(</font> N<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">);</font>
               S_<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
               <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> N_<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font> i<font color="#990000">++)</font>
                    S_<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">=</font> S_<font color="#990000">[</font>i<font color="#990000">-</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">+</font> N_<font color="#990000">[</font>i<font color="#990000">];</font>
          <font color="#FF0000">}</font>
          <i><font color="#9A1900">// Evaluation of the objective f(x), and constraints g(x)</font></i>
          <i><font color="#9A1900">// using an Algorithmic Differentiation (AD) class.</font></i>
          <font color="#008080">ADVector</font> <b><font color="#000000">eval_r</font></b><font color="#990000">(</font><font color="#008080">size_t</font> not_used<font color="#990000">,</font> <b><font color="#0000FF">const</font></b> ADVector<font color="#990000">&amp;</font>  x<font color="#990000">)</font>
          <font color="#FF0000">{</font>    <b><font color="#000000">count_eval_r</font></b><font color="#990000">();</font>

               <i><font color="#9A1900">// temporary indices</font></i>
               <font color="#008080">size_t</font> i<font color="#990000">,</font> j<font color="#990000">,</font> k<font color="#990000">;</font>
               <i><font color="#9A1900">// # of components of x corresponding to values for y</font></i>
               <font color="#008080">size_t</font> ny_inx <font color="#990000">=</font> <font color="#990000">(</font>S_<font color="#990000">[</font>Nz<font color="#990000">]</font> <font color="#990000">+</font> <font color="#993399">1</font><font color="#990000">)</font> <font color="#990000">*</font> Ny<font color="#990000">;</font>
               <i><font color="#9A1900">// # of constraints (range dimension of g)</font></i>
               <font color="#008080">size_t</font> m <font color="#990000">=</font> ny_inx<font color="#990000">;</font>
               <i><font color="#9A1900">// # of components in x (domain dimension for f and g)</font></i>
               <b><font color="#000000">assert</font></b> <font color="#990000">(</font> x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> ny_inx <font color="#990000">+</font> Na <font color="#990000">);</font>
               <i><font color="#9A1900">// vector for return value</font></i>
               <font color="#008080">ADVector</font> <b><font color="#000000">fg</font></b><font color="#990000">(</font>m <font color="#990000">+</font> <font color="#993399">1</font><font color="#990000">);</font>
               <i><font color="#9A1900">// vector of parameters</font></i>
               <font color="#008080">ADVector</font> <b><font color="#000000">a</font></b><font color="#990000">(</font>Na<font color="#990000">);</font>
               <b><font color="#0000FF">for</font></b><font color="#990000">(</font>j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> Na<font color="#990000">;</font> j<font color="#990000">++)</font>
                    a<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> x<font color="#990000">[</font>ny_inx <font color="#990000">+</font> j<font color="#990000">];</font>
               <i><font color="#9A1900">// vector for value of y(t)</font></i>
               <font color="#008080">ADVector</font> <b><font color="#000000">y</font></b><font color="#990000">(</font>Ny<font color="#990000">);</font>
               <i><font color="#9A1900">// objective function -------------------------------</font></i>
               fg<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">.;</font>
               <b><font color="#0000FF">for</font></b><font color="#990000">(</font>k <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> k <font color="#990000">&lt;</font> Nz<font color="#990000">;</font> k<font color="#990000">++)</font>
               <font color="#FF0000">{</font>    <b><font color="#0000FF">for</font></b><font color="#990000">(</font>j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> Ny<font color="#990000">;</font> j<font color="#990000">++)</font>
                         y<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> x<font color="#990000">[</font>Ny<font color="#990000">*</font>S_<font color="#990000">[</font>k<font color="#990000">+</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">+</font> j<font color="#990000">];</font>
                    fg<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">+=</font> eval_H<font color="#990000">&lt;</font>ADNumber<font color="#990000">&gt;(</font>k<font color="#990000">+</font><font color="#993399">1</font><font color="#990000">,</font> y<font color="#990000">,</font> a<font color="#990000">);</font>
               <font color="#FF0000">}</font>
               <i><font color="#9A1900">// initial condition ---------------------------------</font></i>
               <font color="#008080">ADVector</font> F <font color="#990000">=</font> <b><font color="#000000">eval_F</font></b><font color="#990000">(</font>a<font color="#990000">);</font>
               <b><font color="#0000FF">for</font></b><font color="#990000">(</font>j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> Ny<font color="#990000">;</font> j<font color="#990000">++)</font>
               <font color="#FF0000">{</font>    y<font color="#990000">[</font>j<font color="#990000">]</font>    <font color="#990000">=</font> x<font color="#990000">[</font>j<font color="#990000">];</font>
                    fg<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">+</font>j<font color="#990000">]</font> <font color="#990000">=</font> y<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">-</font> F<font color="#990000">[</font>j<font color="#990000">];</font>
               <font color="#FF0000">}</font>
               <i><font color="#9A1900">// trapezoidal approximation --------------------------</font></i>
               <font color="#008080">ADVector</font> <b><font color="#000000">ym</font></b><font color="#990000">(</font>Ny<font color="#990000">),</font> <b><font color="#000000">G</font></b><font color="#990000">(</font>Ny<font color="#990000">),</font> <b><font color="#000000">Gm</font></b><font color="#990000">(</font>Ny<font color="#990000">);</font>
               G <font color="#990000">=</font> <b><font color="#000000">eval_G</font></b><font color="#990000">(</font>y<font color="#990000">,</font> a<font color="#990000">);</font>
               <font color="#008080">ADNumber</font> dy<font color="#990000">;</font>
               <b><font color="#0000FF">for</font></b><font color="#990000">(</font>k <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> k <font color="#990000">&lt;</font> Nz<font color="#990000">;</font> k<font color="#990000">++)</font>
               <font color="#FF0000">{</font>    <i><font color="#9A1900">// interval between data points</font></i>
                    <font color="#008080">Number</font> T  <font color="#990000">=</font> s<font color="#990000">[</font>k<font color="#990000">+</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">-</font> s<font color="#990000">[</font>k<font color="#990000">];</font>
                    <i><font color="#9A1900">// integration step size</font></i>
                    <font color="#008080">Number</font> dt <font color="#990000">=</font> T <font color="#990000">/</font> <b><font color="#000000">Number</font></b><font color="#990000">(</font> N_<font color="#990000">[</font>k<font color="#990000">+</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">);</font>
                    <b><font color="#0000FF">for</font></b><font color="#990000">(</font>j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> N_<font color="#990000">[</font>k<font color="#990000">+</font><font color="#993399">1</font><font color="#990000">];</font> j<font color="#990000">++)</font>
                    <font color="#FF0000">{</font>    <font color="#008080">size_t</font> Index <font color="#990000">=</font> <font color="#990000">(</font>j <font color="#990000">+</font> S_<font color="#990000">[</font>k<font color="#990000">])</font> <font color="#990000">*</font> Ny<font color="#990000">;</font>
                         <i><font color="#9A1900">// y(t) at end of last step</font></i>
                         ym <font color="#990000">=</font> y<font color="#990000">;</font>
                         <i><font color="#9A1900">// G(y, a) at end of last step</font></i>
                         Gm <font color="#990000">=</font> G<font color="#990000">;</font>
                         <i><font color="#9A1900">// value of y(t) at end of this step</font></i>
                         <b><font color="#0000FF">for</font></b><font color="#990000">(</font>i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> Ny<font color="#990000">;</font> i<font color="#990000">++)</font>
                              y<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">=</font> x<font color="#990000">[</font>Ny <font color="#990000">+</font> Index <font color="#990000">+</font> i<font color="#990000">];</font>
                         <i><font color="#9A1900">// G(y, a) at end of this step</font></i>
                         G <font color="#990000">=</font> <b><font color="#000000">eval_G</font></b><font color="#990000">(</font>y<font color="#990000">,</font> a<font color="#990000">);</font>
                         <i><font color="#9A1900">// trapezoidal approximation residual</font></i>
                         <b><font color="#0000FF">for</font></b><font color="#990000">(</font>i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> Ny<font color="#990000">;</font> i<font color="#990000">++)</font>
                         <font color="#FF0000">{</font>    dy <font color="#990000">=</font> <font color="#990000">(</font>G<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">+</font> Gm<font color="#990000">[</font>i<font color="#990000">])</font> <font color="#990000">*</font> dt <font color="#990000">/</font> <font color="#993399">2</font><font color="#990000">;</font>
                              fg<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">+</font>Ny<font color="#990000">+</font>Index<font color="#990000">+</font>i<font color="#990000">]</font> <font color="#990000">=</font>
                                   y<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">-</font> ym<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">-</font> dy<font color="#990000">;</font>
                         <font color="#FF0000">}</font>
                    <font color="#FF0000">}</font>
               <font color="#FF0000">}</font>
               <b><font color="#0000FF">return</font></b> fg<font color="#990000">;</font>
          <font color="#FF0000">}</font>
          <i><font color="#9A1900">// The operations sequence for r_eval does not depend on u,</font></i>
          <i><font color="#9A1900">// hence retape = false should work and be faster.</font></i>
          <font color="#009900">bool</font> <b><font color="#000000">retape</font></b><font color="#990000">(</font><font color="#008080">size_t</font> k<font color="#990000">)</font>
          <font color="#FF0000">{</font>    <b><font color="#0000FF">return</font></b> retape_<font color="#990000">;</font> <font color="#FF0000">}</font>
     <font color="#FF0000">}</font><font color="#990000">;</font>

<font color="#FF0000">}</font></tt></pre>
</font></code>
<hr>Input File: cppad_ipopt/example/ode_simple.hpp

</body>
</html>

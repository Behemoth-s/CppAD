<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Define Matrix Multiply as a User Atomic Operation</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Define Matrix Multiply as a User Atomic Operation">
<meta name="keywords" id="keywords" content=" define matrix multiply user atomic operation syntax example begin source extra call information indexing one reverse partials order set union cppad callback functions declare mat_mul function ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_old_mat_mul.hpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="old_mat_mul.cpp.htm" target="_top">Prev</a>
</td><td><a href="zdouble.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>Appendix</option>
<option>deprecated</option>
<option>old_atomic</option>
<option>old_mat_mul.cpp</option>
<option>old_mat_mul.hpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>deprecated-&gt;</option>
<option>include_deprecated</option>
<option>FunDeprecated</option>
<option>CompareChange</option>
<option>omp_max_thread</option>
<option>TrackNewDel</option>
<option>omp_alloc</option>
<option>memory_leak</option>
<option>epsilon</option>
<option>test_vector</option>
<option>cppad_ipopt_nlp</option>
<option>old_atomic</option>
<option>zdouble</option>
<option>autotools</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>old_atomic-&gt;</option>
<option>old_reciprocal.cpp</option>
<option>old_usead_1.cpp</option>
<option>old_usead_2.cpp</option>
<option>old_tan.cpp</option>
<option>old_mat_mul.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>old_mat_mul.cpp-&gt;</option>
<option>old_mat_mul.hpp</option>
</select>
</td>
<td>old_mat_mul.hpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Example</option>
<option>Begin Source</option>
<option>Extra Call Information</option>
<option>Matrix Indexing</option>
<option>One Matrix Multiply</option>
<option>Reverse Partials One Order</option>
<option>Set Union</option>
<option>CppAD User Atomic Callback Functions</option>
<option>Declare mat_mul Function</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<center><b><big><big>Define Matrix Multiply as a User Atomic Operation</big></big></b></center>
<br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>
<br>
This file is located in the <code><font color="blue">example</font></code> directory.
It can be copied to the current working directory and included
with the syntax

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;include&nbsp;&quot;old_mat_mul.hpp&quot;<br>
</span></font></code>
<br>
<b><big><a name="Example" id="Example">Example</a></big></b>
<br>
The file <a href="old_mat_mul.cpp.htm" target="_top"><span style='white-space: nowrap'>old_mat_mul.cpp</span></a>
 contains an example use of
<code><font color="blue">old_mat_mul.hpp</font></code>.

<br>
<br>
<b><big><a name="Begin Source" id="Begin Source">Begin Source</a></big></b>

<pre style='display:inline'><tt>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/cppad.hpp&gt;</font>      <i><font color="#9A1900">// Include CppAD definitions</font></i>
<b><font color="#0000FF">namespace</font></b> <font color="#FF0000">{</font>                      <i><font color="#9A1900">// Begin empty namespace</font></i>
    <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">;</font>        <i><font color="#9A1900">// Let vector denote CppAD::vector</font></i>
</tt></pre>
<br>
<b><big><a name="Extra Call Information" id="Extra Call Information">Extra Call Information</a></big></b>

<pre><tt>    <i><font color="#9A1900">// Information we will attach to each mat_mul call</font></i>
    <b><font color="#0000FF">struct</font></b> <font color="#008080">call_info</font> <font color="#FF0000">{</font>
        <font color="#008080">size_t</font> nr_result<font color="#990000">;</font>
        <font color="#008080">size_t</font> n_middle<font color="#990000">;</font>
        <font color="#008080">size_t</font> nc_result<font color="#990000">;</font>
        <font color="#008080">vector&lt;bool&gt;</font>  vx<font color="#990000">;</font>
    <font color="#FF0000">}</font><font color="#990000">;</font>
    <font color="#008080">vector&lt;call_info&gt;</font> info_<font color="#990000">;</font> <i><font color="#9A1900">// vector of call information</font></i>

    <i><font color="#9A1900">// number of orders for this operation (k + 1)</font></i>
    <font color="#008080">size_t</font> n_order_ <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
    <i><font color="#9A1900">// number of rows in the result matrix</font></i>
    <font color="#008080">size_t</font> nr_result_ <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
    <i><font color="#9A1900">// number of columns in left matrix and number of rows in right matrix</font></i>
    <font color="#008080">size_t</font> n_middle_ <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
    <i><font color="#9A1900">// number of columns in the result matrix</font></i>
    <font color="#008080">size_t</font> nc_result_ <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
    <i><font color="#9A1900">// which components of x are variables</font></i>
    vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;*</font> vx_ <font color="#990000">=</font> CPPAD_NULL<font color="#990000">;</font>

    <i><font color="#9A1900">// get the information corresponding to this call</font></i>
    <font color="#009900">void</font> <b><font color="#000000">get_info</font></b><font color="#990000">(</font><font color="#008080">size_t</font> id<font color="#990000">,</font> <font color="#008080">size_t</font> k<font color="#990000">,</font> <font color="#008080">size_t</font> n<font color="#990000">,</font> <font color="#008080">size_t</font> m<font color="#990000">)</font>
    <font color="#FF0000">{</font>   n_order_   <font color="#990000">=</font> k <font color="#990000">+</font> <font color="#993399">1</font><font color="#990000">;</font>
        nr_result_ <font color="#990000">=</font> info_<font color="#990000">[</font>id<font color="#990000">].</font>nr_result<font color="#990000">;</font>
        n_middle_  <font color="#990000">=</font> info_<font color="#990000">[</font>id<font color="#990000">].</font>n_middle<font color="#990000">;</font>
        nc_result_ <font color="#990000">=</font> info_<font color="#990000">[</font>id<font color="#990000">].</font>nc_result<font color="#990000">;</font>
        vx_        <font color="#990000">=</font> <font color="#990000">&amp;(</font>info_<font color="#990000">[</font>id<font color="#990000">].</font>vx<font color="#990000">);</font>

        <b><font color="#000000">assert</font></b><font color="#990000">(</font>n <font color="#990000">==</font> nr_result_ <font color="#990000">*</font> n_middle_ <font color="#990000">+</font> n_middle_ <font color="#990000">*</font> nc_result_<font color="#990000">);</font>
        <b><font color="#000000">assert</font></b><font color="#990000">(</font>m <font color="#990000">==</font>  nr_result_ <font color="#990000">*</font> nc_result_<font color="#990000">);</font>
    <font color="#FF0000">}</font>
</tt></pre>
<b><big><a name="Matrix Indexing" id="Matrix Indexing">Matrix Indexing</a></big></b>

<pre><tt>    <i><font color="#9A1900">// Convert left matrix index pair and order to a single argument index</font></i>
    <font color="#008080">size_t</font> <b><font color="#000000">left</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i<font color="#990000">,</font> <font color="#008080">size_t</font> j<font color="#990000">,</font> <font color="#008080">size_t</font> ell<font color="#990000">)</font>
    <font color="#FF0000">{</font>   <b><font color="#000000">assert</font></b><font color="#990000">(</font> i <font color="#990000">&lt;</font> nr_result_ <font color="#990000">);</font>
        <b><font color="#000000">assert</font></b><font color="#990000">(</font> j <font color="#990000">&lt;</font> n_middle_ <font color="#990000">);</font>
        <b><font color="#0000FF">return</font></b> <font color="#990000">(</font>i <font color="#990000">*</font> n_middle_ <font color="#990000">+</font> j<font color="#990000">)</font> <font color="#990000">*</font> n_order_ <font color="#990000">+</font> ell<font color="#990000">;</font>
    <font color="#FF0000">}</font>
    <i><font color="#9A1900">// Convert right matrix index pair and order to a single argument index</font></i>
    <font color="#008080">size_t</font> <b><font color="#000000">right</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i<font color="#990000">,</font> <font color="#008080">size_t</font> j<font color="#990000">,</font> <font color="#008080">size_t</font> ell<font color="#990000">)</font>
    <font color="#FF0000">{</font>   <b><font color="#000000">assert</font></b><font color="#990000">(</font> i <font color="#990000">&lt;</font> n_middle_ <font color="#990000">);</font>
        <b><font color="#000000">assert</font></b><font color="#990000">(</font> j <font color="#990000">&lt;</font> nc_result_ <font color="#990000">);</font>
        <font color="#008080">size_t</font> offset <font color="#990000">=</font> nr_result_ <font color="#990000">*</font> n_middle_<font color="#990000">;</font>
        <b><font color="#0000FF">return</font></b> <font color="#990000">(</font>offset <font color="#990000">+</font> i <font color="#990000">*</font> nc_result_ <font color="#990000">+</font> j<font color="#990000">)</font> <font color="#990000">*</font> n_order_ <font color="#990000">+</font> ell<font color="#990000">;</font>
    <font color="#FF0000">}</font>
    <i><font color="#9A1900">// Convert result matrix index pair and order to a single result index</font></i>
    <font color="#008080">size_t</font> <b><font color="#000000">result</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i<font color="#990000">,</font> <font color="#008080">size_t</font> j<font color="#990000">,</font> <font color="#008080">size_t</font> ell<font color="#990000">)</font>
    <font color="#FF0000">{</font>   <b><font color="#000000">assert</font></b><font color="#990000">(</font> i <font color="#990000">&lt;</font> nr_result_ <font color="#990000">);</font>
        <b><font color="#000000">assert</font></b><font color="#990000">(</font> j <font color="#990000">&lt;</font> nc_result_ <font color="#990000">);</font>
        <b><font color="#0000FF">return</font></b> <font color="#990000">(</font>i <font color="#990000">*</font> nc_result_ <font color="#990000">+</font> j<font color="#990000">)</font> <font color="#990000">*</font> n_order_ <font color="#990000">+</font> ell<font color="#990000">;</font>
    <font color="#FF0000">}</font></tt></pre>
<br>
<b><big><a name="One Matrix Multiply" id="One Matrix Multiply">One Matrix Multiply</a></big></b>
<br>
Forward mode matrix multiply left times right and sum into result:
<pre><tt>    <font color="#009900">void</font> <b><font color="#000000">multiply_and_sum</font></b><font color="#990000">(</font>
        <font color="#008080">size_t</font>                order_left <font color="#990000">,</font>
        <font color="#008080">size_t</font>                order_right<font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>         tx <font color="#990000">,</font>
        vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>               ty <font color="#990000">)</font>
    <font color="#FF0000">{</font>   <font color="#008080">size_t</font> i<font color="#990000">,</font> j<font color="#990000">;</font>
        <font color="#008080">size_t</font> order_result <font color="#990000">=</font> order_left <font color="#990000">+</font> order_right<font color="#990000">;</font>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font>i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> nr_result_<font color="#990000">;</font> i<font color="#990000">++)</font>
        <font color="#FF0000">{</font>   <b><font color="#0000FF">for</font></b><font color="#990000">(</font>j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> nc_result_<font color="#990000">;</font> j<font color="#990000">++)</font>
            <font color="#FF0000">{</font>   <font color="#009900">double</font> sum <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">.;</font>
                <font color="#008080">size_t</font> middle<font color="#990000">,</font> im_left<font color="#990000">,</font> mj_right<font color="#990000">,</font> ij_result<font color="#990000">;</font>
                <b><font color="#0000FF">for</font></b><font color="#990000">(</font>middle <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> middle <font color="#990000">&lt;</font> n_middle_<font color="#990000">;</font> middle<font color="#990000">++)</font>
                <font color="#FF0000">{</font>   im_left  <font color="#990000">=</font> <b><font color="#000000">left</font></b><font color="#990000">(</font>i<font color="#990000">,</font> middle<font color="#990000">,</font> order_left<font color="#990000">);</font>
                    mj_right <font color="#990000">=</font> <b><font color="#000000">right</font></b><font color="#990000">(</font>middle<font color="#990000">,</font> j<font color="#990000">,</font> order_right<font color="#990000">);</font>
                    sum     <font color="#990000">+=</font> tx<font color="#990000">[</font>im_left<font color="#990000">]</font> <font color="#990000">*</font> tx<font color="#990000">[</font>mj_right<font color="#990000">];</font>
                <font color="#FF0000">}</font>
                ij_result <font color="#990000">=</font> <b><font color="#000000">result</font></b><font color="#990000">(</font>i<font color="#990000">,</font> j<font color="#990000">,</font> order_result<font color="#990000">);</font>
                ty<font color="#990000">[</font> ij_result <font color="#990000">]</font> <font color="#990000">+=</font> sum<font color="#990000">;</font>
            <font color="#FF0000">}</font>
        <font color="#FF0000">}</font>
        <b><font color="#0000FF">return</font></b><font color="#990000">;</font>
    <font color="#FF0000">}</font></tt></pre>
<br>
<b><big><a name="Reverse Partials One Order" id="Reverse Partials One Order">Reverse Partials One Order</a></big></b>
<br>
Compute reverse mode partials for one order and sum into px:
<pre><tt>    <font color="#009900">void</font> <b><font color="#000000">reverse_multiply</font></b><font color="#990000">(</font>
        <font color="#008080">size_t</font>                order_left <font color="#990000">,</font>
        <font color="#008080">size_t</font>                order_right<font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>         tx <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>         ty <font color="#990000">,</font>
        vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>               px <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>         py <font color="#990000">)</font>
    <font color="#FF0000">{</font>   <font color="#008080">size_t</font> i<font color="#990000">,</font> j<font color="#990000">;</font>
        <font color="#008080">size_t</font> order_result <font color="#990000">=</font> order_left <font color="#990000">+</font> order_right<font color="#990000">;</font>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font>i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> nr_result_<font color="#990000">;</font> i<font color="#990000">++)</font>
        <font color="#FF0000">{</font>   <b><font color="#0000FF">for</font></b><font color="#990000">(</font>j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> nc_result_<font color="#990000">;</font> j<font color="#990000">++)</font>
            <font color="#FF0000">{</font>   <font color="#008080">size_t</font> middle<font color="#990000">,</font> im_left<font color="#990000">,</font> mj_right<font color="#990000">,</font> ij_result<font color="#990000">;</font>
                <b><font color="#0000FF">for</font></b><font color="#990000">(</font>middle <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> middle <font color="#990000">&lt;</font> n_middle_<font color="#990000">;</font> middle<font color="#990000">++)</font>
                <font color="#FF0000">{</font>   ij_result <font color="#990000">=</font> <b><font color="#000000">result</font></b><font color="#990000">(</font>i<font color="#990000">,</font> j<font color="#990000">,</font> order_result<font color="#990000">);</font>
                    im_left   <font color="#990000">=</font> <b><font color="#000000">left</font></b><font color="#990000">(</font>i<font color="#990000">,</font> middle<font color="#990000">,</font> order_left<font color="#990000">);</font>
                    mj_right  <font color="#990000">=</font> <b><font color="#000000">right</font></b><font color="#990000">(</font>middle<font color="#990000">,</font> j<font color="#990000">,</font> order_right<font color="#990000">);</font>
                    <i><font color="#9A1900">// sum       += tx[im_left]  * tx[mj_right];</font></i>
                    px<font color="#990000">[</font>im_left<font color="#990000">]</font>  <font color="#990000">+=</font> tx<font color="#990000">[</font>mj_right<font color="#990000">]</font> <font color="#990000">*</font> py<font color="#990000">[</font>ij_result<font color="#990000">];</font>
                    px<font color="#990000">[</font>mj_right<font color="#990000">]</font> <font color="#990000">+=</font> tx<font color="#990000">[</font>im_left<font color="#990000">]</font>  <font color="#990000">*</font> py<font color="#990000">[</font>ij_result<font color="#990000">];</font>
                <font color="#FF0000">}</font>
            <font color="#FF0000">}</font>
        <font color="#FF0000">}</font>
        <b><font color="#0000FF">return</font></b><font color="#990000">;</font>
    <font color="#FF0000">}</font></tt></pre>
<br>
<b><big><a name="Set Union" id="Set Union">Set Union</a></big></b>

<pre style='display:inline'><tt>
    <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>set_union<font color="#990000">;</font>
</tt></pre>
<br>
<b><big><a name="CppAD User Atomic Callback Functions" id="CppAD User Atomic Callback Functions">CppAD User Atomic Callback Functions</a></big></b>

<pre><tt>    <i><font color="#9A1900">// ----------------------------------------------------------------------</font></i>
    <i><font color="#9A1900">// forward mode routine called by CppAD</font></i>
    <font color="#009900">bool</font> <b><font color="#000000">mat_mul_forward</font></b><font color="#990000">(</font>
        <font color="#008080">size_t</font>                   id <font color="#990000">,</font>
        <font color="#008080">size_t</font>                    k <font color="#990000">,</font>
        <font color="#008080">size_t</font>                    n <font color="#990000">,</font>
        <font color="#008080">size_t</font>                    m <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>      vx <font color="#990000">,</font>
        vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>            vy <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>    tx <font color="#990000">,</font>
        vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>          ty
    <font color="#990000">)</font>
    <font color="#FF0000">{</font>   <font color="#008080">size_t</font> i<font color="#990000">,</font> j<font color="#990000">,</font> ell<font color="#990000">;</font>
        <b><font color="#000000">get_info</font></b><font color="#990000">(</font>id<font color="#990000">,</font> k<font color="#990000">,</font> n<font color="#990000">,</font> m<font color="#990000">);</font>

        <i><font color="#9A1900">// check if this is during the call to mat_mul(id, ax, ay)</font></i>
        <b><font color="#0000FF">if</font></b><font color="#990000">(</font> vx<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">&gt;</font> <font color="#993399">0</font> <font color="#990000">)</font>
        <font color="#FF0000">{</font>   <b><font color="#000000">assert</font></b><font color="#990000">(</font> k <font color="#990000">==</font> <font color="#993399">0</font> <font color="#990000">&amp;&amp;</font> vx<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">&gt;</font> <font color="#993399">0</font> <font color="#990000">);</font>

            <i><font color="#9A1900">// store the vx information in info_</font></i>
            <b><font color="#000000">assert</font></b><font color="#990000">(</font> vx_<font color="#990000">-&gt;</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">0</font> <font color="#990000">);</font>
            info_<font color="#990000">[</font>id<font color="#990000">].</font>vx<font color="#990000">.</font><b><font color="#000000">resize</font></b><font color="#990000">(</font>n<font color="#990000">);</font>
            <b><font color="#0000FF">for</font></b><font color="#990000">(</font>j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> j<font color="#990000">++)</font>
                info_<font color="#990000">[</font>id<font color="#990000">].</font>vx<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> vx<font color="#990000">[</font>j<font color="#990000">];</font>
            <b><font color="#000000">assert</font></b><font color="#990000">(</font> vx_<font color="#990000">-&gt;</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> n <font color="#990000">);</font>

            <i><font color="#9A1900">// now compute vy</font></i>
            <b><font color="#0000FF">for</font></b><font color="#990000">(</font>i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> nr_result_<font color="#990000">;</font> i<font color="#990000">++)</font>
            <font color="#FF0000">{</font>   <b><font color="#0000FF">for</font></b><font color="#990000">(</font>j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> nc_result_<font color="#990000">;</font> j<font color="#990000">++)</font>
                <font color="#FF0000">{</font>   <i><font color="#9A1900">// compute vy[ result(i, j, 0) ]</font></i>
                    <font color="#009900">bool</font>   var <font color="#990000">=</font> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>
                    <font color="#009900">bool</font>   nz_left<font color="#990000">,</font> nz_right<font color="#990000">;</font>
                    <font color="#008080">size_t</font> middle<font color="#990000">,</font> im_left<font color="#990000">,</font> mj_right<font color="#990000">,</font> ij_result<font color="#990000">;</font>
                    <b><font color="#0000FF">for</font></b><font color="#990000">(</font>middle <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> middle <font color="#990000">&lt;</font> n_middle_<font color="#990000">;</font> middle<font color="#990000">++)</font>
                    <font color="#FF0000">{</font>   im_left  <font color="#990000">=</font> <b><font color="#000000">left</font></b><font color="#990000">(</font>i<font color="#990000">,</font> middle<font color="#990000">,</font> k<font color="#990000">);</font>
                        mj_right <font color="#990000">=</font> <b><font color="#000000">right</font></b><font color="#990000">(</font>middle<font color="#990000">,</font> j<font color="#990000">,</font> k<font color="#990000">);</font>
                        nz_left  <font color="#990000">=</font> vx<font color="#990000">[</font>im_left<font color="#990000">]</font>  <font color="#990000">|</font> <font color="#990000">(</font>tx<font color="#990000">[</font>im_left<font color="#990000">]</font> <font color="#990000">!=</font> <font color="#993399">0</font><font color="#990000">.);</font>
                        nz_right <font color="#990000">=</font> vx<font color="#990000">[</font>mj_right<font color="#990000">]</font> <font color="#990000">|</font> <font color="#990000">(</font>tx<font color="#990000">[</font>mj_right<font color="#990000">]!=</font> <font color="#993399">0</font><font color="#990000">.);</font>
                        <i><font color="#9A1900">// if not multiplying by the constant zero</font></i>
                        <b><font color="#0000FF">if</font></b><font color="#990000">(</font> nz_left <font color="#990000">&amp;</font> nz_right <font color="#990000">)</font>
                            var <font color="#990000">|=</font> <font color="#990000">(</font>vx<font color="#990000">[</font>im_left<font color="#990000">]</font> <font color="#990000">|</font> vx<font color="#990000">[</font>mj_right<font color="#990000">]);</font>
                    <font color="#FF0000">}</font>
                    ij_result     <font color="#990000">=</font> <b><font color="#000000">result</font></b><font color="#990000">(</font>i<font color="#990000">,</font> j<font color="#990000">,</font> k<font color="#990000">);</font>
                    vy<font color="#990000">[</font>ij_result<font color="#990000">]</font> <font color="#990000">=</font> var<font color="#990000">;</font>
                <font color="#FF0000">}</font>
            <font color="#FF0000">}</font>
        <font color="#FF0000">}</font>

        <i><font color="#9A1900">// initialize result as zero</font></i>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font>i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> nr_result_<font color="#990000">;</font> i<font color="#990000">++)</font>
        <font color="#FF0000">{</font>   <b><font color="#0000FF">for</font></b><font color="#990000">(</font>j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> nc_result_<font color="#990000">;</font> j<font color="#990000">++)</font>
                ty<font color="#990000">[</font> <b><font color="#000000">result</font></b><font color="#990000">(</font>i<font color="#990000">,</font> j<font color="#990000">,</font> k<font color="#990000">)</font> <font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">.;</font>
        <font color="#FF0000">}</font>
        <i><font color="#9A1900">// sum the product of proper orders</font></i>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font>ell <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> ell <font color="#990000">&lt;=</font>k<font color="#990000">;</font> ell<font color="#990000">++)</font>
            <b><font color="#000000">multiply_and_sum</font></b><font color="#990000">(</font>ell<font color="#990000">,</font> k<font color="#990000">-</font>ell<font color="#990000">,</font> tx<font color="#990000">,</font> ty<font color="#990000">);</font>

        <i><font color="#9A1900">// All orders are implemented and there are no possible error</font></i>
        <i><font color="#9A1900">// conditions, so always return true.</font></i>
        <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    <font color="#FF0000">}</font>
    <i><font color="#9A1900">// ----------------------------------------------------------------------</font></i>
    <i><font color="#9A1900">// reverse mode routine called by CppAD</font></i>
    <font color="#009900">bool</font> <b><font color="#000000">mat_mul_reverse</font></b><font color="#990000">(</font>
        <font color="#008080">size_t</font>                   id <font color="#990000">,</font>
        <font color="#008080">size_t</font>                    k <font color="#990000">,</font>
        <font color="#008080">size_t</font>                    n <font color="#990000">,</font>
        <font color="#008080">size_t</font>                    m <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>    tx <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>    ty <font color="#990000">,</font>
        vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>          px <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>    py
    <font color="#990000">)</font>
    <font color="#FF0000">{</font>   <b><font color="#000000">get_info</font></b><font color="#990000">(</font>id<font color="#990000">,</font> k<font color="#990000">,</font> n<font color="#990000">,</font> m<font color="#990000">);</font>

        <font color="#008080">size_t</font> ell <font color="#990000">=</font> n <font color="#990000">*</font> n_order_<font color="#990000">;</font>
        <b><font color="#0000FF">while</font></b><font color="#990000">(</font>ell<font color="#990000">--)</font>
            px<font color="#990000">[</font>ell<font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">.;</font>

        <font color="#008080">size_t</font> order <font color="#990000">=</font> n_order_<font color="#990000">;</font>
        <b><font color="#0000FF">while</font></b><font color="#990000">(</font>order<font color="#990000">--)</font>
        <font color="#FF0000">{</font>   <i><font color="#9A1900">// reverse sum the products for specified order</font></i>
            <b><font color="#0000FF">for</font></b><font color="#990000">(</font>ell <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> ell <font color="#990000">&lt;=</font>order<font color="#990000">;</font> ell<font color="#990000">++)</font>
                <b><font color="#000000">reverse_multiply</font></b><font color="#990000">(</font>ell<font color="#990000">,</font> order<font color="#990000">-</font>ell<font color="#990000">,</font> tx<font color="#990000">,</font> ty<font color="#990000">,</font> px<font color="#990000">,</font> py<font color="#990000">);</font>
        <font color="#FF0000">}</font>

        <i><font color="#9A1900">// All orders are implemented and there are no possible error</font></i>
        <i><font color="#9A1900">// conditions, so always return true.</font></i>
        <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    <font color="#FF0000">}</font>

    <i><font color="#9A1900">// ----------------------------------------------------------------------</font></i>
    <i><font color="#9A1900">// forward Jacobian sparsity routine called by CppAD</font></i>
    <font color="#009900">bool</font> <b><font color="#000000">mat_mul_for_jac_sparse</font></b><font color="#990000">(</font>
        <font color="#008080">size_t</font>                               id <font color="#990000">,</font>
        <font color="#008080">size_t</font>                                n <font color="#990000">,</font>
        <font color="#008080">size_t</font>                                m <font color="#990000">,</font>
        <font color="#008080">size_t</font>                                p <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font> std<font color="#990000">::</font>set<font color="#990000">&lt;</font>size_t<font color="#990000">&gt;</font> <font color="#990000">&gt;&amp;</font>     r <font color="#990000">,</font>
        vector<font color="#990000">&lt;</font> std<font color="#990000">::</font>set<font color="#990000">&lt;</font>size_t<font color="#990000">&gt;</font> <font color="#990000">&gt;&amp;</font>           s <font color="#990000">)</font>
    <font color="#FF0000">{</font>   <font color="#008080">size_t</font> i<font color="#990000">,</font> j<font color="#990000">,</font> k<font color="#990000">,</font> im_left<font color="#990000">,</font> middle<font color="#990000">,</font> mj_right<font color="#990000">,</font> ij_result<font color="#990000">;</font>
        k <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
        <b><font color="#000000">get_info</font></b><font color="#990000">(</font>id<font color="#990000">,</font> k<font color="#990000">,</font> n<font color="#990000">,</font> m<font color="#990000">);</font>

        <b><font color="#0000FF">for</font></b><font color="#990000">(</font>i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> nr_result_<font color="#990000">;</font> i<font color="#990000">++)</font>
        <font color="#FF0000">{</font>   <b><font color="#0000FF">for</font></b><font color="#990000">(</font>j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> nc_result_<font color="#990000">;</font> j<font color="#990000">++)</font>
            <font color="#FF0000">{</font>   ij_result <font color="#990000">=</font> <b><font color="#000000">result</font></b><font color="#990000">(</font>i<font color="#990000">,</font> j<font color="#990000">,</font> k<font color="#990000">);</font>
                s<font color="#990000">[</font>ij_result<font color="#990000">].</font><b><font color="#000000">clear</font></b><font color="#990000">();</font>
                <b><font color="#0000FF">for</font></b><font color="#990000">(</font>middle <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> middle <font color="#990000">&lt;</font> n_middle_<font color="#990000">;</font> middle<font color="#990000">++)</font>
                <font color="#FF0000">{</font>   im_left   <font color="#990000">=</font> <b><font color="#000000">left</font></b><font color="#990000">(</font>i<font color="#990000">,</font> middle<font color="#990000">,</font> k<font color="#990000">);</font>
                    mj_right  <font color="#990000">=</font> <b><font color="#000000">right</font></b><font color="#990000">(</font>middle<font color="#990000">,</font> j<font color="#990000">,</font> k<font color="#990000">);</font>

                    <i><font color="#9A1900">// s[ij_result] = union( s[ij_result], r[im_left] )</font></i>
                    s<font color="#990000">[</font>ij_result<font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#000000">set_union</font></b><font color="#990000">(</font>s<font color="#990000">[</font>ij_result<font color="#990000">],</font> r<font color="#990000">[</font>im_left<font color="#990000">]);</font>

                    <i><font color="#9A1900">// s[ij_result] = union( s[ij_result], r[mj_right] )</font></i>
                    s<font color="#990000">[</font>ij_result<font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#000000">set_union</font></b><font color="#990000">(</font>s<font color="#990000">[</font>ij_result<font color="#990000">],</font> r<font color="#990000">[</font>mj_right<font color="#990000">]);</font>
                <font color="#FF0000">}</font>
            <font color="#FF0000">}</font>
        <font color="#FF0000">}</font>
        <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    <font color="#FF0000">}</font>
    <i><font color="#9A1900">// ----------------------------------------------------------------------</font></i>
    <i><font color="#9A1900">// reverse Jacobian sparsity routine called by CppAD</font></i>
    <font color="#009900">bool</font> <b><font color="#000000">mat_mul_rev_jac_sparse</font></b><font color="#990000">(</font>
        <font color="#008080">size_t</font>                               id <font color="#990000">,</font>
        <font color="#008080">size_t</font>                                n <font color="#990000">,</font>
        <font color="#008080">size_t</font>                                m <font color="#990000">,</font>
        <font color="#008080">size_t</font>                                p <font color="#990000">,</font>
        vector<font color="#990000">&lt;</font> std<font color="#990000">::</font>set<font color="#990000">&lt;</font>size_t<font color="#990000">&gt;</font> <font color="#990000">&gt;&amp;</font>           r <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font> std<font color="#990000">::</font>set<font color="#990000">&lt;</font>size_t<font color="#990000">&gt;</font> <font color="#990000">&gt;&amp;</font>     s <font color="#990000">)</font>
    <font color="#FF0000">{</font>   <font color="#008080">size_t</font> i<font color="#990000">,</font> j<font color="#990000">,</font> k<font color="#990000">,</font> im_left<font color="#990000">,</font> middle<font color="#990000">,</font> mj_right<font color="#990000">,</font> ij_result<font color="#990000">;</font>
        k <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
        <b><font color="#000000">get_info</font></b><font color="#990000">(</font>id<font color="#990000">,</font> k<font color="#990000">,</font> n<font color="#990000">,</font> m<font color="#990000">);</font>

        <b><font color="#0000FF">for</font></b><font color="#990000">(</font>j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> j<font color="#990000">++)</font>
            r<font color="#990000">[</font>j<font color="#990000">].</font><b><font color="#000000">clear</font></b><font color="#990000">();</font>

        <b><font color="#0000FF">for</font></b><font color="#990000">(</font>i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> nr_result_<font color="#990000">;</font> i<font color="#990000">++)</font>
        <font color="#FF0000">{</font>   <b><font color="#0000FF">for</font></b><font color="#990000">(</font>j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> nc_result_<font color="#990000">;</font> j<font color="#990000">++)</font>
            <font color="#FF0000">{</font>   ij_result <font color="#990000">=</font> <b><font color="#000000">result</font></b><font color="#990000">(</font>i<font color="#990000">,</font> j<font color="#990000">,</font> k<font color="#990000">);</font>
                <b><font color="#0000FF">for</font></b><font color="#990000">(</font>middle <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> middle <font color="#990000">&lt;</font> n_middle_<font color="#990000">;</font> middle<font color="#990000">++)</font>
                <font color="#FF0000">{</font>   im_left   <font color="#990000">=</font> <b><font color="#000000">left</font></b><font color="#990000">(</font>i<font color="#990000">,</font> middle<font color="#990000">,</font> k<font color="#990000">);</font>
                    mj_right  <font color="#990000">=</font> <b><font color="#000000">right</font></b><font color="#990000">(</font>middle<font color="#990000">,</font> j<font color="#990000">,</font> k<font color="#990000">);</font>

                    <i><font color="#9A1900">// r[im_left] = union( r[im_left], s[ij_result] )</font></i>
                    r<font color="#990000">[</font>im_left<font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#000000">set_union</font></b><font color="#990000">(</font>r<font color="#990000">[</font>im_left<font color="#990000">],</font> s<font color="#990000">[</font>ij_result<font color="#990000">]);</font>

                    <i><font color="#9A1900">// r[mj_right] = union( r[mj_right], s[ij_result] )</font></i>
                    r<font color="#990000">[</font>mj_right<font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#000000">set_union</font></b><font color="#990000">(</font>r<font color="#990000">[</font>mj_right<font color="#990000">],</font> s<font color="#990000">[</font>ij_result<font color="#990000">]);</font>
                <font color="#FF0000">}</font>
            <font color="#FF0000">}</font>
        <font color="#FF0000">}</font>
        <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    <font color="#FF0000">}</font>
    <i><font color="#9A1900">// ----------------------------------------------------------------------</font></i>
    <i><font color="#9A1900">// reverse Hessian sparsity routine called by CppAD</font></i>
    <font color="#009900">bool</font> <b><font color="#000000">mat_mul_rev_hes_sparse</font></b><font color="#990000">(</font>
        <font color="#008080">size_t</font>                               id <font color="#990000">,</font>
        <font color="#008080">size_t</font>                                n <font color="#990000">,</font>
        <font color="#008080">size_t</font>                                m <font color="#990000">,</font>
        <font color="#008080">size_t</font>                                p <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font> std<font color="#990000">::</font>set<font color="#990000">&lt;</font>size_t<font color="#990000">&gt;</font> <font color="#990000">&gt;&amp;</font>     r <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>                   s <font color="#990000">,</font>
        vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>                         t <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font> std<font color="#990000">::</font>set<font color="#990000">&lt;</font>size_t<font color="#990000">&gt;</font> <font color="#990000">&gt;&amp;</font>     u <font color="#990000">,</font>
        vector<font color="#990000">&lt;</font> std<font color="#990000">::</font>set<font color="#990000">&lt;</font>size_t<font color="#990000">&gt;</font> <font color="#990000">&gt;&amp;</font>           v <font color="#990000">)</font>
    <font color="#FF0000">{</font>   <font color="#008080">size_t</font> i<font color="#990000">,</font> j<font color="#990000">,</font> k<font color="#990000">,</font> im_left<font color="#990000">,</font> middle<font color="#990000">,</font> mj_right<font color="#990000">,</font> ij_result<font color="#990000">;</font>
        k <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
        <b><font color="#000000">get_info</font></b><font color="#990000">(</font>id<font color="#990000">,</font> k<font color="#990000">,</font> n<font color="#990000">,</font> m<font color="#990000">);</font>

        <b><font color="#0000FF">for</font></b><font color="#990000">(</font>j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> j<font color="#990000">++)</font>
        <font color="#FF0000">{</font>   t<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>
            v<font color="#990000">[</font>j<font color="#990000">].</font><b><font color="#000000">clear</font></b><font color="#990000">();</font>
        <font color="#FF0000">}</font>

        <b><font color="#000000">assert</font></b><font color="#990000">(</font> vx_<font color="#990000">-&gt;</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> n <font color="#990000">);</font>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font>i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> nr_result_<font color="#990000">;</font> i<font color="#990000">++)</font>
        <font color="#FF0000">{</font>   <b><font color="#0000FF">for</font></b><font color="#990000">(</font>j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> nc_result_<font color="#990000">;</font> j<font color="#990000">++)</font>
            <font color="#FF0000">{</font>   ij_result <font color="#990000">=</font> <b><font color="#000000">result</font></b><font color="#990000">(</font>i<font color="#990000">,</font> j<font color="#990000">,</font> k<font color="#990000">);</font>
                <b><font color="#0000FF">for</font></b><font color="#990000">(</font>middle <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> middle <font color="#990000">&lt;</font> n_middle_<font color="#990000">;</font> middle<font color="#990000">++)</font>
                <font color="#FF0000">{</font>   im_left   <font color="#990000">=</font> <b><font color="#000000">left</font></b><font color="#990000">(</font>i<font color="#990000">,</font> middle<font color="#990000">,</font> k<font color="#990000">);</font>
                    mj_right  <font color="#990000">=</font> <b><font color="#000000">right</font></b><font color="#990000">(</font>middle<font color="#990000">,</font> j<font color="#990000">,</font> k<font color="#990000">);</font>

                    <i><font color="#9A1900">// back propagate Jacobian sparsity</font></i>
                    t<font color="#990000">[</font>im_left<font color="#990000">]</font>   <font color="#990000">=</font> <font color="#990000">(</font>t<font color="#990000">[</font>im_left<font color="#990000">]</font> <font color="#990000">|</font> s<font color="#990000">[</font>ij_result<font color="#990000">]);</font>
                    t<font color="#990000">[</font>mj_right<font color="#990000">]</font>  <font color="#990000">=</font> <font color="#990000">(</font>t<font color="#990000">[</font>mj_right<font color="#990000">]</font> <font color="#990000">|</font> s<font color="#990000">[</font>ij_result<font color="#990000">]);</font>
                    <i><font color="#9A1900">// Visual Studio C++ 2008 warns unsafe mix of int and</font></i>
                    <i><font color="#9A1900">// bool if we use the following code directly above:</font></i>
                    <i><font color="#9A1900">// t[im_left]  |= s[ij_result];</font></i>
                    <i><font color="#9A1900">// t[mj_right] |= s[ij_result];</font></i>

                    <i><font color="#9A1900">// back propagate Hessian sparsity</font></i>
                    <i><font color="#9A1900">// v[im_left]  = union( v[im_left],  u[ij_result] )</font></i>
                    <i><font color="#9A1900">// v[mj_right] = union( v[mj_right], u[ij_result] )</font></i>
                    v<font color="#990000">[</font>im_left<font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#000000">set_union</font></b><font color="#990000">(</font>v<font color="#990000">[</font>im_left<font color="#990000">],</font>  u<font color="#990000">[</font>ij_result<font color="#990000">]</font> <font color="#990000">);</font>
                    v<font color="#990000">[</font>mj_right<font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#000000">set_union</font></b><font color="#990000">(</font>v<font color="#990000">[</font>mj_right<font color="#990000">],</font> u<font color="#990000">[</font>ij_result<font color="#990000">]</font> <font color="#990000">);</font>

                    <i><font color="#9A1900">// Check for case where the (i,j) result element</font></i>
                    <i><font color="#9A1900">// is in reverse Jacobian and both left and right</font></i>
                    <i><font color="#9A1900">// operands in multiplication are variables</font></i>
                    <b><font color="#0000FF">if</font></b><font color="#990000">(</font>s<font color="#990000">[</font>ij_result<font color="#990000">]</font> <font color="#990000">&amp;</font> <font color="#990000">(*</font>vx_<font color="#990000">)[</font>im_left<font color="#990000">]</font> <font color="#990000">&amp;</font> <font color="#990000">(*</font>vx_<font color="#990000">)[</font>mj_right<font color="#990000">])</font>
                    <font color="#FF0000">{</font>   <i><font color="#9A1900">// v[im_left] = union( v[im_left], r[mj_right] )</font></i>
                        v<font color="#990000">[</font>im_left<font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#000000">set_union</font></b><font color="#990000">(</font>v<font color="#990000">[</font>im_left<font color="#990000">],</font> r<font color="#990000">[</font>mj_right<font color="#990000">]</font> <font color="#990000">);</font>
                        <i><font color="#9A1900">// v[mj_right] = union( v[mj_right], r[im_left] )</font></i>
                        v<font color="#990000">[</font>mj_right<font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#000000">set_union</font></b><font color="#990000">(</font>v<font color="#990000">[</font>mj_right<font color="#990000">],</font> r<font color="#990000">[</font>im_left<font color="#990000">]</font> <font color="#990000">);</font>
                    <font color="#FF0000">}</font>
                <font color="#FF0000">}</font>
            <font color="#FF0000">}</font>
        <font color="#FF0000">}</font>
        <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    <font color="#FF0000">}</font></tt></pre>
<br>
<b><big><a name="Declare mat_mul Function" id="Declare mat_mul Function">Declare mat_mul Function</a></big></b>
<br>
Declare the <code><font color="blue">AD&lt;double&gt;</font></code> routine 
<code><font color="blue"><span style='white-space: nowrap'>mat_mul(</span></font><i><font color="black"><span style='white-space: nowrap'>id</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ax</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ay</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>

and end empty namespace
(we could use any <a href="simplevector.htm" target="_top"><span style='white-space: nowrap'>simple&nbsp;vector&nbsp;template&nbsp;class</span></a>

instead of <code><font color="blue">CppAD::vector</font></code>):
<pre><tt>    <b><font color="#000000">CPPAD_USER_ATOMIC</font></b><font color="#990000">(</font>
        mat_mul                 <font color="#990000">,</font>
        CppAD<font color="#990000">::</font>vector           <font color="#990000">,</font>
        <font color="#009900">double</font>                  <font color="#990000">,</font>
        mat_mul_forward         <font color="#990000">,</font>
        mat_mul_reverse         <font color="#990000">,</font>
        mat_mul_for_jac_sparse  <font color="#990000">,</font>
        mat_mul_rev_jac_sparse  <font color="#990000">,</font>
        mat_mul_rev_hes_sparse
    <font color="#990000">)</font>
<font color="#FF0000">}</font> <i><font color="#9A1900">// End empty namespace</font></i></tt></pre>

<hr>Input File: example/deprecated/old_mat_mul.hpp

</body>
</html>

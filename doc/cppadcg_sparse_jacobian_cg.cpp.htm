<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Cppadcg Speed: Source Generation: Sparse Jacobian</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Cppadcg Speed: Source Generation: Sparse Jacobian">
<meta name="keywords" id="keywords" content=" cppadcg speed: source generation: sparse jacobian syntax purpose subgraph optimize seed size_vec sparse_jacobian.c choose_row_col implementation ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_cppadcg_sparse_jacobian_cg.cpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="cppadcg_sparse_jacobian.c.htm" target="_top">Prev</a>
</td><td><a href="speed_sacado.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>speed</option>
<option>speed_cppadcg</option>
<option>cppadcg_sparse_jacobian.cpp</option>
<option>cppadcg_sparse_jacobian_cg.cpp</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_speed_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_speed_cppadcg_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppadcg_sparse_jacobian.cpp_htm.js'></script>
</td>
<td>cppadcg_sparse_jacobian_cg.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Purpose</option>
<option>subgraph</option>
<option>optimize</option>
<option>seed</option>
<option>size_vec</option>
<option>sparse_jacobian.c</option>
<option>choose_row_col</option>
<option>Implementation</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@


<center><b><big><big>Cppadcg Speed: Source Generation: Sparse Jacobian</big></big></b></center>
<br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><font color="blue"><span style='white-space: nowrap'>sparse_jacobian_cg(</span></font><i><font color="black"><span style='white-space: nowrap'>subgraph</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>optimize</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>seed</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>size_vec</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>


<br>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
This program generates C++ source code that computes the Jacobian of the
function <a href="sparse_jac_fun.htm" target="_top"><span style='white-space: nowrap'>sparse_jac_fun</span></a>
.

<br>
<br>
<b><big><a name="subgraph" id="subgraph">subgraph</a></big></b>
<br>
If 
<code><i><font color="black"><span style='white-space: nowrap'>subgraph</span></font></i></code>
 is true (false),
the generated source code uses (does not use) <a href="subgraph_jac_rev.htm" target="_top"><span style='white-space: nowrap'>subgraph_jac_rev</span></a>
.

<br>
<br>
<b><big><a name="optimize" id="optimize">optimize</a></big></b>
<br>
If 
<code><i><font color="black"><span style='white-space: nowrap'>optimize</span></font></i></code>
 is true (false),
the AD function object is optimized (is not optimized)
before the source code is generated.

<br>
<br>
<b><big><a name="seed" id="seed">seed</a></big></b>
<br>
Is the random number seed used during the choice of
row and column vectors in the sparse Jacobian.

<br>
<br>
<b><big><a name="size_vec" id="size_vec">size_vec</a></big></b>
<br>
For 
<code><i><font color="black"><span style='white-space: nowrap'>i</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;0,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>...</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>size_vec</span></font></i><font color="blue"><span style='white-space: nowrap'>.size()-1</span></font></code>
,

<code><i><font color="black"><span style='white-space: nowrap'>size_vec</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>i</span></font></i><font color="blue"><span style='white-space: nowrap'>]</span></font></code>
 is a positive integer specifying the
dimension of the domain space for the function.

<br>
<br>
<b><big><a name="sparse_jacobian.c" id="sparse_jacobian.c">sparse_jacobian.c</a></big></b>
<br>
The source code is written to the file
<code><font color="blue">sparse_jacobian.c</font></code> in the current working directory.
The corresponding function call has the following syntax:

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>flag</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;sparse_jacobian_c(<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>subgraph</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>optimize</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>seed</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>size</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>nnz</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>y</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;)<br>
</span></font></code>
see <a href="cppadcg_sparse_jacobian.c.htm" target="_top"><span style='white-space: nowrap'>cppadcg_sparse_jacobian.c</span></a>
.

<br>
<br>
<b><big><a name="choose_row_col" id="choose_row_col">choose_row_col</a></big></b>
<br>
The row vector 
<code><i><font color="black"><span style='white-space: nowrap'>row</span></font></i></code>
 and column vector 
<code><i><font color="black"><span style='white-space: nowrap'>col</span></font></i></code>

that define the sparsity pattern are be determined by calling

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;choose_row_col_sparse_jacobian(</span></font><i><font color="black"><span style='white-space: nowrap'>seed</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>m</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>row</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>col</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
where 
<code><i><font color="black"><span style='white-space: nowrap'>seed</span></font></i></code>
 is the random number seed,

<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>
 is the size,
and 
<code><i><font color="black"><span style='white-space: nowrap'>m</span></font></i></code>
 is 
<code><font color="blue"><span style='white-space: nowrap'>2*</span></font><i><font color="black"><span style='white-space: nowrap'>size</span></font></i></code>
.


<br>
<br>
<b><big><a name="Implementation" id="Implementation">Implementation</a></big></b>

<pre><tt><b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/cg/cppadcg.hpp&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/speed/sparse_jac_fun.hpp&gt;</font>
<i><font color="#9A1900">//</font></i>
<b><font color="#0000FF">extern</font></b> <font color="#009900">void</font> <b><font color="#000000">choose_row_col_sparse_jacobian</font></b><font color="#990000">(</font><font color="#008080">size_t</font> seed<font color="#990000">,</font>
    <font color="#008080">size_t</font> n<font color="#990000">,</font> <font color="#008080">size_t</font> m<font color="#990000">,</font> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>size_t<font color="#990000">&gt;&amp;</font> row<font color="#990000">,</font> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>size_t<font color="#990000">&gt;&amp;</font> col
<font color="#990000">);</font>

<b><font color="#0000FF">namespace</font></b> <font color="#FF0000">{</font>

<font color="#FF0000">}</font>

<font color="#009900">void</font> <b><font color="#000000">sparse_jacobian_cg</font></b><font color="#990000">(</font>
    <font color="#009900">bool</font> subgraph                         <font color="#990000">,</font>
    <font color="#009900">bool</font> optimize                         <font color="#990000">,</font>
    <font color="#008080">size_t</font> seed                           <font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>size_t<font color="#990000">&gt;&amp;</font> size_vec <font color="#990000">)</font>
<font color="#FF0000">{</font>
    <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">;</font>
    <b><font color="#0000FF">typedef</font></b> <font color="#008080">vector&lt;size_t&gt;</font>          s_vector<font color="#990000">;</font>
    <b><font color="#0000FF">typedef</font></b> CppAD<font color="#990000">::</font>cg<font color="#990000">::</font><font color="#008080">CG&lt;double&gt;</font>   c_double<font color="#990000">;</font>
    <b><font color="#0000FF">typedef</font></b> CppAD<font color="#990000">::</font><font color="#008080">AD&lt;c_double&gt;</font>     ac_double<font color="#990000">;</font>
    <b><font color="#0000FF">typedef</font></b> <font color="#008080">vector&lt;c_double&gt;</font>        c_vector<font color="#990000">;</font>
    <b><font color="#0000FF">typedef</font></b> <font color="#008080">vector&lt;ac_double&gt;</font>       ac_vector<font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// optimization options: no conditional skips or compare operators</font></i>
    std<font color="#990000">::</font><font color="#008080">string</font> optimize_options <font color="#990000">=</font>
        <font color="#FF0000">"no_conditional_skip no_compare_op no_print_for_op"</font><font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// Open file sparse_jacobian.c were souce code will be written</font></i>
    std<font color="#990000">::</font><font color="#008080">fstream</font> fs<font color="#990000">;</font>
    fs<font color="#990000">.</font><b><font color="#000000">open</font></b><font color="#990000">(</font><font color="#FF0000">"sparse_jacobian.c"</font><font color="#990000">,</font> std<font color="#990000">::</font>fstream<font color="#990000">::</font>out<font color="#990000">);</font>
    fs <font color="#990000">&lt;&lt;</font> <font color="#FF0000">"# include &lt;assert.h&gt;</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font><font color="#990000">;</font>
    fs <font color="#990000">&lt;&lt;</font> <font color="#FF0000">"# include &lt;math.h&gt;</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font><font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// -----------------------------------------------------------------------</font></i>
    <i><font color="#9A1900">// loop over sizes</font></i>
    <i><font color="#9A1900">// -----------------------------------------------------------------------</font></i>
    <font color="#008080">size_t</font> n_size <font color="#990000">=</font> size_vec<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> n_size<font color="#990000">;</font> <font color="#990000">++</font>i<font color="#990000">)</font>
    <font color="#FF0000">{</font>
        <font color="#008080">size_t</font> n     <font color="#990000">=</font> size_vec<font color="#990000">[</font>i<font color="#990000">];</font> <i><font color="#9A1900">// number of independent variables</font></i>
        <font color="#008080">size_t</font> m     <font color="#990000">=</font> <font color="#993399">2</font> <font color="#990000">*</font> n<font color="#990000">;</font>       <i><font color="#9A1900">// number of dependent variables</font></i>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// determine row and colunn vectors in sparsity pattern</font></i>
        <font color="#008080">s_vector</font> row<font color="#990000">,</font> col<font color="#990000">;</font>
        <b><font color="#000000">choose_row_col_sparse_jacobian</font></b><font color="#990000">(</font>seed<font color="#990000">,</font> n<font color="#990000">,</font> m<font color="#990000">,</font> row<font color="#990000">,</font> col<font color="#990000">);</font>
        <i><font color="#9A1900">//</font></i>
        <font color="#008080">ac_vector</font> <b><font color="#000000">ac_x</font></b><font color="#990000">(</font>n<font color="#990000">);</font>          <i><font color="#9A1900">// AD domain space vector</font></i>
        <font color="#008080">ac_vector</font> <b><font color="#000000">ac_y</font></b><font color="#990000">(</font>m<font color="#990000">);</font>          <i><font color="#9A1900">// AD range space vector y = f(x)</font></i>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// declare sparsity pattern</font></i>
        CppAD<font color="#990000">::</font><font color="#008080">sparse_rc&lt;s_vector&gt;</font>  sparsity<font color="#990000">;</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// declare subset where Jacobian is evaluated</font></i>
        <i><font color="#9A1900">// equal to entire sparsity pattern and using c_double</font></i>
        CppAD<font color="#990000">::</font><font color="#008080">sparse_rc&lt;s_vector&gt;</font> subset_pattern<font color="#990000">;</font>
        <font color="#008080">size_t</font> nr  <font color="#990000">=</font> m<font color="#990000">;</font>
        <font color="#008080">size_t</font> nc  <font color="#990000">=</font> n<font color="#990000">;</font>
        <font color="#008080">size_t</font> nnz <font color="#990000">=</font> row<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font>
        subset_pattern<font color="#990000">.</font><b><font color="#000000">resize</font></b><font color="#990000">(</font>nr<font color="#990000">,</font> nc<font color="#990000">,</font> nnz<font color="#990000">);</font>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> k <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> k <font color="#990000">&lt;</font> nnz<font color="#990000">;</font> k<font color="#990000">++)</font>
            subset_pattern<font color="#990000">.</font><b><font color="#000000">set</font></b><font color="#990000">(</font>k<font color="#990000">,</font> row<font color="#990000">[</font>k<font color="#990000">],</font> col<font color="#990000">[</font>k<font color="#990000">]);</font>
        CppAD<font color="#990000">::</font><font color="#008080">sparse_rcv&lt;s_vector, c_vector&gt;</font> <b><font color="#000000">c_subset</font></b><font color="#990000">(</font> subset_pattern <font color="#990000">);</font>
        <b><font color="#0000FF">const</font></b> c_vector<font color="#990000">&amp;</font> <b><font color="#000000">c_subset_val</font></b><font color="#990000">(</font> c_subset<font color="#990000">.</font><b><font color="#000000">val</font></b><font color="#990000">()</font> <font color="#990000">);</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// coloring method</font></i>
        std<font color="#990000">::</font><font color="#008080">string</font> coloring <font color="#990000">=</font> <font color="#FF0000">"cppad"</font><font color="#990000">;</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// maximum number of colors at once</font></i>
        <font color="#008080">size_t</font> group_max <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">;</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// do not even record comparison operators</font></i>
        <font color="#008080">size_t</font> abort_op_index <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
        <font color="#009900">bool</font> record_compare   <font color="#990000">=</font> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// values of independent variables do not matter</font></i>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> j<font color="#990000">++)</font>
            ac_x<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#000000">ac_double</font></b><font color="#990000">(</font> <font color="#009900">double</font><font color="#990000">(</font>j<font color="#990000">)</font> <font color="#990000">/</font> <font color="#009900">double</font><font color="#990000">(</font>n<font color="#990000">)</font> <font color="#990000">);</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// declare independent variables</font></i>
        CppAD<font color="#990000">::</font><b><font color="#000000">Independent</font></b><font color="#990000">(</font>ac_x<font color="#990000">,</font> abort_op_index<font color="#990000">,</font> record_compare<font color="#990000">);</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// AD computation of f(x) (order zero derivative is function value)</font></i>
        <font color="#008080">size_t</font> order <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
        CppAD<font color="#990000">::</font>sparse_jac_fun<font color="#990000">&lt;</font>ac_double<font color="#990000">&gt;(</font>m<font color="#990000">,</font> n<font color="#990000">,</font> ac_x<font color="#990000">,</font> row<font color="#990000">,</font> col<font color="#990000">,</font> order<font color="#990000">,</font> ac_y<font color="#990000">);</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// create function object f : x -&gt; y</font></i>
        CppAD<font color="#990000">::</font><font color="#008080">ADFun&lt;c_double&gt;</font> c_f<font color="#990000">;</font>
        c_f<font color="#990000">.</font><b><font color="#000000">Dependent</font></b><font color="#990000">(</font>ac_x<font color="#990000">,</font> ac_y<font color="#990000">);</font>
        <i><font color="#9A1900">//</font></i>
        <b><font color="#0000FF">if</font></b><font color="#990000">(</font> optimize <font color="#990000">)</font>
            c_f<font color="#990000">.</font><b><font color="#000000">optimize</font></b><font color="#990000">(</font>optimize_options<font color="#990000">);</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// source code generator used for sparse_jacobian_c(x) = d/dx f(x)</font></i>
        CppAD<font color="#990000">::</font>cg<font color="#990000">::</font><font color="#008080">CodeHandler&lt;double&gt;</font> code_handler<font color="#990000">;</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// declare the independent variables in sparse_jacobian_c</font></i>
        <font color="#008080">c_vector</font> <b><font color="#000000">c_x</font></b><font color="#990000">(</font>n<font color="#990000">);</font>
        code_handler<font color="#990000">.</font><b><font color="#000000">makeVariables</font></b><font color="#990000">(</font>c_x<font color="#990000">);</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// evaluate sparse sparse jacobian as a function of c_x</font></i>
        <b><font color="#0000FF">if</font></b><font color="#990000">(</font> subgraph <font color="#990000">)</font>
        <font color="#FF0000">{</font>   <i><font color="#9A1900">// user reverse mode becasue forward not yet implemented</font></i>
            c_f<font color="#990000">.</font><b><font color="#000000">subgraph_jac_rev</font></b><font color="#990000">(</font>c_x<font color="#990000">,</font> c_subset<font color="#990000">);</font>
        <font color="#FF0000">}</font>
        <b><font color="#0000FF">else</font></b>
        <font color="#FF0000">{</font>
            <i><font color="#9A1900">// calculate the Jacobian sparsity pattern for this function</font></i>
            <i><font color="#9A1900">// using forward mode</font></i>
            <font color="#009900">bool</font> transpose     <font color="#990000">=</font> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>
            <font color="#009900">bool</font> internal_bool <font color="#990000">=</font> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>
            <font color="#009900">bool</font> dependency    <font color="#990000">=</font> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>
            <b><font color="#000000">CPPAD_ASSERT_UNKNOWN</font></b><font color="#990000">(</font> n <font color="#990000">==</font> c_f<font color="#990000">.</font><b><font color="#000000">Domain</font></b><font color="#990000">()</font> <font color="#990000">)</font>
            CppAD<font color="#990000">::</font><font color="#008080">sparse_rc&lt;s_vector&gt;</font> identity<font color="#990000">;</font>
            identity<font color="#990000">.</font><b><font color="#000000">resize</font></b><font color="#990000">(</font>n<font color="#990000">,</font> n<font color="#990000">,</font> n<font color="#990000">);</font>
            <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> k <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> k <font color="#990000">&lt;</font> n<font color="#990000">;</font> k<font color="#990000">++)</font>
                identity<font color="#990000">.</font><b><font color="#000000">set</font></b><font color="#990000">(</font>k<font color="#990000">,</font> k<font color="#990000">,</font> k<font color="#990000">);</font>
            c_f<font color="#990000">.</font><b><font color="#000000">for_jac_sparsity</font></b><font color="#990000">(</font>
                identity<font color="#990000">,</font> transpose<font color="#990000">,</font> dependency<font color="#990000">,</font> internal_bool<font color="#990000">,</font> sparsity
            <font color="#990000">);</font>
            <i><font color="#9A1900">//</font></i>
            <i><font color="#9A1900">// structure that holds some of the work done by sparse_jac_for</font></i>
            CppAD<font color="#990000">::</font><font color="#008080">sparse_jac_work</font> work<font color="#990000">;</font>
            <i><font color="#9A1900">//</font></i>
            <i><font color="#9A1900">// calculate the Jacobian at this x</font></i>
            c_f<font color="#990000">.</font><b><font color="#000000">sparse_jac_for</font></b><font color="#990000">(</font>
                group_max<font color="#990000">,</font> c_x<font color="#990000">,</font> c_subset<font color="#990000">,</font> sparsity<font color="#990000">,</font> coloring<font color="#990000">,</font> work
            <font color="#990000">);</font>
        <font color="#FF0000">}</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// set the dependent variables in sparse_jacobiain(x)</font></i>
        <font color="#008080">c_vector</font> <b><font color="#000000">c_y</font></b><font color="#990000">(</font>nnz<font color="#990000">);</font>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> k <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> k <font color="#990000">&lt;</font> nnz<font color="#990000">;</font> k<font color="#990000">++)</font>
            c_y<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">=</font> c_subset_val<font color="#990000">[</font>k<font color="#990000">];</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// Mapping from variables in this program to variables in source_code</font></i>
        <i><font color="#9A1900">// independent variable = x</font></i>
        <i><font color="#9A1900">// dependent variable   = y</font></i>
        <i><font color="#9A1900">// temporary variable   = v</font></i>
        CppAD<font color="#990000">::</font>cg<font color="#990000">::</font><font color="#008080">LanguageC&lt;double&gt;</font> <b><font color="#000000">langC</font></b><font color="#990000">(</font><font color="#FF0000">"double"</font><font color="#990000">);</font>
        CppAD<font color="#990000">::</font>cg<font color="#990000">::</font><font color="#008080">LangCDefaultVariableNameGenerator&lt;double&gt;</font> nameGen<font color="#990000">;</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// generate the source code</font></i>
        std<font color="#990000">::</font><font color="#008080">ostringstream</font> source_code<font color="#990000">;</font>
        code_handler<font color="#990000">.</font><b><font color="#000000">generateCode</font></b><font color="#990000">(</font>source_code<font color="#990000">,</font> langC<font color="#990000">,</font> c_y<font color="#990000">,</font> nameGen<font color="#990000">);</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// number of temporary variables</font></i>
        <font color="#008080">size_t</font> nv <font color="#990000">=</font> code_handler<font color="#990000">.</font><b><font color="#000000">getTemporaryVariableCount</font></b><font color="#990000">();</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// wrap the string generated by code_handler into a function</font></i>
        <i><font color="#9A1900">// sparse_jacobian_&lt;size&gt;[_opt][_sub](x, y)</font></i>
        std<font color="#990000">::</font><font color="#008080">string</font> name <font color="#990000">=</font> <font color="#FF0000">"sparse_jacobian_"</font> <font color="#990000">+</font> CppAD<font color="#990000">::</font><b><font color="#000000">to_string</font></b><font color="#990000">(</font>size_vec<font color="#990000">[</font>i<font color="#990000">]);</font>
        std<font color="#990000">::</font><font color="#008080">string</font> source_str<font color="#990000">;</font>
        source_str <font color="#990000">+=</font>
            <font color="#FF0000">"// "</font> <font color="#990000">+</font> name <font color="#990000">+</font> <font color="#FF0000">"</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
            <font color="#FF0000">"static void "</font> <font color="#990000">+</font> name <font color="#990000">+</font> <font color="#FF0000">"(int nnz, const double* x, double* y)</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
            <font color="#FF0000">"{</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
            <font color="#FF0000">"</font><font color="#CC33CC">\t</font><font color="#FF0000">assert( nnz == "</font> <font color="#990000">+</font> CppAD<font color="#990000">::</font><b><font color="#000000">to_string</font></b><font color="#990000">(</font>nnz<font color="#990000">)</font> <font color="#990000">+</font> <font color="#FF0000">" );</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
        <font color="#990000">;</font>
        <b><font color="#0000FF">if</font></b><font color="#990000">(</font> nv <font color="#990000">&gt;</font> <font color="#993399">0</font> <font color="#990000">)</font>
            source_str <font color="#990000">+=</font> <font color="#FF0000">"</font><font color="#CC33CC">\t</font><font color="#FF0000">double v["</font> <font color="#990000">+</font> CppAD<font color="#990000">::</font><b><font color="#000000">to_string</font></b><font color="#990000">(</font>nv<font color="#990000">)</font> <font color="#990000">+</font> <font color="#FF0000">"];</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font><font color="#990000">;</font>
        source_str <font color="#990000">+=</font> <font color="#FF0000">"// Begin code generated by CppADCodeGen</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font><font color="#990000">;</font>
        source_str <font color="#990000">+=</font> source_code<font color="#990000">.</font><b><font color="#000000">str</font></b><font color="#990000">();</font>
        source_str <font color="#990000">+=</font>
            <font color="#FF0000">"// End code generated by CppADCodeGen</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
            <font color="#FF0000">"}</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
        <font color="#990000">;</font>
        fs <font color="#990000">&lt;&lt;</font> source_str<font color="#990000">;</font>
    <font color="#FF0000">}</font>
    <i><font color="#9A1900">//</font></i>
    std<font color="#990000">::</font><font color="#008080">string</font> subgraph_str <font color="#990000">=</font> <font color="#FF0000">"0"</font><font color="#990000">;</font>
    <b><font color="#0000FF">if</font></b><font color="#990000">(</font> subgraph <font color="#990000">)</font>
        subgraph_str <font color="#990000">=</font> <font color="#FF0000">"1"</font><font color="#990000">;</font>
    std<font color="#990000">::</font><font color="#008080">string</font> optimize_str <font color="#990000">=</font> <font color="#FF0000">"0"</font><font color="#990000">;</font>
    <b><font color="#0000FF">if</font></b><font color="#990000">(</font> optimize <font color="#990000">)</font>
        optimize_str <font color="#990000">=</font> <font color="#FF0000">"1"</font><font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// sparse_jacobian_c(subgraph, optimize, size, nnz, x, y)</font></i>
    fs <font color="#990000">&lt;&lt;</font>
    <font color="#FF0000">"</font><font color="#CC33CC">\n</font><font color="#FF0000">int sparse_jacobian_c(</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
    <font color="#FF0000">"</font><font color="#CC33CC">\t</font><font color="#FF0000">int subgraph    ,</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
    <font color="#FF0000">"</font><font color="#CC33CC">\t</font><font color="#FF0000">int optimize    ,</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
    <font color="#FF0000">"</font><font color="#CC33CC">\t</font><font color="#FF0000">int seed        ,</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
    <font color="#FF0000">"</font><font color="#CC33CC">\t</font><font color="#FF0000">int size        ,</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
    <font color="#FF0000">"</font><font color="#CC33CC">\t</font><font color="#FF0000">int nnz         ,</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
    <font color="#FF0000">"</font><font color="#CC33CC">\t</font><font color="#FF0000">const double* x ,</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
    <font color="#FF0000">"</font><font color="#CC33CC">\t</font><font color="#FF0000">double* y       )</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
    <font color="#FF0000">"{</font><font color="#CC33CC">\t</font><font color="#FF0000">if( subgraph != "</font> <font color="#990000">+</font> subgraph_str <font color="#990000">+</font> <font color="#FF0000">")</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
    <font color="#FF0000">"</font><font color="#CC33CC">\t\t</font><font color="#FF0000">return 1;</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
    <font color="#FF0000">"</font><font color="#CC33CC">\t</font><font color="#FF0000">if( optimize != "</font> <font color="#990000">+</font> optimize_str <font color="#990000">+</font> <font color="#FF0000">")</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
    <font color="#FF0000">"</font><font color="#CC33CC">\t\t</font><font color="#FF0000">return 1;</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
    <font color="#FF0000">"</font><font color="#CC33CC">\t</font><font color="#FF0000">if( seed != "</font> <font color="#990000">+</font> CppAD<font color="#990000">::</font><b><font color="#000000">to_string</font></b><font color="#990000">(</font>seed<font color="#990000">)</font> <font color="#990000">+</font> <font color="#FF0000">")</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
    <font color="#FF0000">"</font><font color="#CC33CC">\t\t</font><font color="#FF0000">return 1;</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
    <font color="#FF0000">"</font><font color="#CC33CC">\t</font><font color="#FF0000">switch( size )</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
    <font color="#FF0000">"</font><font color="#CC33CC">\t</font><font color="#FF0000">{</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
    <font color="#990000">;</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> n_size<font color="#990000">;</font> <font color="#990000">++</font>i<font color="#990000">)</font>
    <font color="#FF0000">{</font>   std<font color="#990000">::</font><font color="#008080">string</font> size_i <font color="#990000">=</font> CppAD<font color="#990000">::</font><b><font color="#000000">to_string</font></b><font color="#990000">(</font>size_vec<font color="#990000">[</font>i<font color="#990000">]);</font>
        fs <font color="#990000">&lt;&lt;</font> <font color="#FF0000">"</font><font color="#CC33CC">\t\t</font><font color="#FF0000">case "</font> <font color="#990000">+</font> size_i <font color="#990000">+</font> <font color="#FF0000">":</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font><font color="#990000">;</font>
        fs <font color="#990000">&lt;&lt;</font> <font color="#FF0000">"</font><font color="#CC33CC">\t\t</font><font color="#FF0000">sparse_jacobian_"</font> <font color="#990000">+</font> size_i <font color="#990000">+</font> <font color="#FF0000">"(nnz, x, y);</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font><font color="#990000">;</font>
        fs <font color="#990000">&lt;&lt;</font> <font color="#FF0000">"</font><font color="#CC33CC">\t\t</font><font color="#FF0000">break;</font><font color="#CC33CC">\n\n</font><font color="#FF0000">"</font><font color="#990000">;</font>
    <font color="#FF0000">}</font>
    fs <font color="#990000">&lt;&lt;</font>
    <font color="#FF0000">"</font><font color="#CC33CC">\t\t</font><font color="#FF0000">default:</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
    <font color="#FF0000">"</font><font color="#CC33CC">\t\t</font><font color="#FF0000">return 2;</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
    <font color="#FF0000">"</font><font color="#CC33CC">\t</font><font color="#FF0000">}</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
    <font color="#FF0000">"</font><font color="#CC33CC">\t</font><font color="#FF0000">return 0;</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
    <font color="#FF0000">"}</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
    <font color="#990000">;</font>
    fs<font color="#990000">.</font><b><font color="#000000">close</font></b><font color="#990000">();</font>
    <i><font color="#9A1900">//</font></i>
    <b><font color="#0000FF">return</font></b><font color="#990000">;</font>
<font color="#FF0000">}</font></tt></pre>

<hr>Input File: speed/cppadcg/sparse_jacobian_cg.cpp

</body>
</html>

<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'
>
</script>
<head>
<title>OpenMP Memory Allocator: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="OpenMP Memory Allocator: Example and Test">
<meta name="keywords" id="keywords" content=" openmp memory allocator: example test allocation multi thread deprecated 2011-08-31 ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_omp_alloc.cpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://coin-or.github.io/CppAD/" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="old_max_num_threads.htm" target="_top">Prev</a>
</td><td><a href="memory_leak.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>Appendix</option>
<option>deprecated</option>
<option>omp_alloc</option>
<option>omp_alloc.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>Appendix-&gt;</option>
<option>Faq</option>
<option>directory</option>
<option>Theory</option>
<option>glossary</option>
<option>Bib</option>
<option>wish_list</option>
<option>whats_new</option>
<option>deprecated</option>
<option>compare_c</option>
<option>numeric_ad</option>
<option>addon</option>
<option>License</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>deprecated-&gt;</option>
<option>include_deprecated</option>
<option>FunDeprecated</option>
<option>CompareChange</option>
<option>omp_max_thread</option>
<option>TrackNewDel</option>
<option>omp_alloc</option>
<option>memory_leak</option>
<option>epsilon</option>
<option>test_vector</option>
<option>cppad_ipopt_nlp</option>
<option>old_atomic</option>
<option>zdouble</option>
<option>autotools</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>omp_alloc-&gt;</option>
<option>omp_max_num_threads</option>
<option>omp_in_parallel</option>
<option>omp_get_thread_num</option>
<option>omp_get_memory</option>
<option>omp_return_memory</option>
<option>omp_free_available</option>
<option>omp_inuse</option>
<option>omp_available</option>
<option>omp_create_array</option>
<option>omp_delete_array</option>
<option>omp_efficient</option>
<option>old_max_num_threads</option>
<option>omp_alloc.cpp</option>
</select>
</td>
<td>omp_alloc.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Deprecated 2011-08-31</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@


<center><b><big><big>OpenMP Memory Allocator: Example and Test</big></big></b></center>
<br>
<b><big><a name="Deprecated 2011-08-31" id="Deprecated 2011-08-31">Deprecated 2011-08-31</a></big></b>
<br>
This example is only intended to help convert calls to <a href="omp_alloc.htm" target="_top"><span style='white-space: nowrap'>omp_alloc</span></a>

to calls to <a href="thread_alloc.htm" target="_top"><span style='white-space: nowrap'>thread_alloc</span></a>
.

<code><font color="blue">
<pre><tt><b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/utility/omp_alloc.hpp&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/utility/memory_leak.hpp&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;vector&gt;</font>

<b><font color="#0000FF">namespace</font></b> <font color="#FF0000">{</font> <i><font color="#9A1900">// Begin empty namespace</font></i>

<font color="#009900">bool</font> <b><font color="#000000">omp_alloc_bytes</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
<font color="#FF0000">{</font>    <font color="#009900">bool</font> ok <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
     <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>omp_alloc<font color="#990000">;</font>
     <font color="#008080">size_t</font> thread<font color="#990000">;</font>

     <i><font color="#9A1900">// check initial memory values</font></i>
     ok <font color="#990000">&amp;=</font> <font color="#990000">!</font> CppAD<font color="#990000">::</font><b><font color="#000000">memory_leak</font></b><font color="#990000">();</font>

     <i><font color="#9A1900">// amount of static memory used by thread zero</font></i>
     <font color="#008080">size_t</font> static_inuse <font color="#990000">=</font> omp_alloc<font color="#990000">::</font><b><font color="#000000">inuse</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">);</font>

     <i><font color="#9A1900">// determine the currently executing thread</font></i>
     <i><font color="#9A1900">// (should be zero because not in parallel mode)</font></i>
     thread <font color="#990000">=</font> omp_alloc<font color="#990000">::</font><b><font color="#000000">get_thread_num</font></b><font color="#990000">();</font>

     <i><font color="#9A1900">// repeatedly allocate enough memory for at least two size_t values.</font></i>
     <font color="#008080">size_t</font> min_size_t <font color="#990000">=</font> <font color="#993399">2</font><font color="#990000">;</font>
     <font color="#008080">size_t</font> min_bytes  <font color="#990000">=</font> min_size_t <font color="#990000">*</font> <b><font color="#0000FF">sizeof</font></b><font color="#990000">(</font>size_t<font color="#990000">);</font>
     <font color="#008080">size_t</font> n_outter   <font color="#990000">=</font> <font color="#993399">10</font><font color="#990000">;</font>
     <font color="#008080">size_t</font> n_inner    <font color="#990000">=</font> <font color="#993399">5</font><font color="#990000">;</font>
     <font color="#008080">size_t</font> <b><font color="#000000">cap_bytes</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">),</font> i<font color="#990000">,</font> j<font color="#990000">,</font> k<font color="#990000">;</font>
     <b><font color="#0000FF">for</font></b><font color="#990000">(</font>i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> n_outter<font color="#990000">;</font> i<font color="#990000">++)</font>
     <font color="#FF0000">{</font>    <i><font color="#9A1900">// Do not use CppAD::vector here because its use of omp_alloc</font></i>
          <i><font color="#9A1900">// complicates the inuse and avaialble results.</font></i>
          std<font color="#990000">::</font><font color="#008080">vector&lt;void*&gt;</font> <b><font color="#000000">v_ptr</font></b><font color="#990000">(</font>n_inner<font color="#990000">);</font>
          <b><font color="#0000FF">for</font></b><font color="#990000">(</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n_inner<font color="#990000">;</font> j<font color="#990000">++)</font>
          <font color="#FF0000">{</font>    <i><font color="#9A1900">// allocate enough memory for min_size_t size_t objects</font></i>
               v_ptr<font color="#990000">[</font>j<font color="#990000">]</font>    <font color="#990000">=</font> omp_alloc<font color="#990000">::</font><b><font color="#000000">get_memory</font></b><font color="#990000">(</font>min_bytes<font color="#990000">,</font> cap_bytes<font color="#990000">);</font>
               size_t<font color="#990000">*</font> ptr <font color="#990000">=</font> <b><font color="#0000FF">reinterpret_cast</font></b><font color="#990000">&lt;</font>size_t<font color="#990000">*&gt;(</font>v_ptr<font color="#990000">[</font>j<font color="#990000">]);</font>
               <i><font color="#9A1900">// determine the number of size_t values we have obtained</font></i>
               <font color="#008080">size_t</font>  cap_size_t <font color="#990000">=</font> cap_bytes <font color="#990000">/</font> <b><font color="#0000FF">sizeof</font></b><font color="#990000">(</font>size_t<font color="#990000">);</font>
               ok                <font color="#990000">&amp;=</font> min_size_t <font color="#990000">&lt;=</font> cap_size_t<font color="#990000">;</font>
               <i><font color="#9A1900">// use placement new to call the size_t copy constructor</font></i>
               <b><font color="#0000FF">for</font></b><font color="#990000">(</font>k <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> k <font color="#990000">&lt;</font> cap_size_t<font color="#990000">;</font> k<font color="#990000">++)</font>
                    <b><font color="#0000FF">new</font></b><font color="#990000">(</font>ptr <font color="#990000">+</font> k<font color="#990000">)</font> <b><font color="#000000">size_t</font></b><font color="#990000">(</font>i <font color="#990000">+</font> j <font color="#990000">+</font> k<font color="#990000">);</font>
               <i><font color="#9A1900">// check that the constructor worked</font></i>
               <b><font color="#0000FF">for</font></b><font color="#990000">(</font>k <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> k <font color="#990000">&lt;</font> cap_size_t<font color="#990000">;</font> k<font color="#990000">++)</font>
                    ok <font color="#990000">&amp;=</font> ptr<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">==</font> <font color="#990000">(</font>i <font color="#990000">+</font> j <font color="#990000">+</font> k<font color="#990000">);</font>
          <font color="#FF0000">}</font>
          <i><font color="#9A1900">// check that n_inner * cap_bytes are inuse and none are available</font></i>
          ok <font color="#990000">&amp;=</font> omp_alloc<font color="#990000">::</font><b><font color="#000000">inuse</font></b><font color="#990000">(</font>thread<font color="#990000">)</font> <font color="#990000">==</font> n_inner<font color="#990000">*</font>cap_bytes <font color="#990000">+</font> static_inuse<font color="#990000">;</font>
          ok <font color="#990000">&amp;=</font> omp_alloc<font color="#990000">::</font><b><font color="#000000">available</font></b><font color="#990000">(</font>thread<font color="#990000">)</font> <font color="#990000">==</font> <font color="#993399">0</font><font color="#990000">;</font>
          <i><font color="#9A1900">// return the memrory to omp_alloc</font></i>
          <b><font color="#0000FF">for</font></b><font color="#990000">(</font>j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n_inner<font color="#990000">;</font> j<font color="#990000">++)</font>
               omp_alloc<font color="#990000">::</font><b><font color="#000000">return_memory</font></b><font color="#990000">(</font>v_ptr<font color="#990000">[</font>j<font color="#990000">]);</font>
          <i><font color="#9A1900">// check that now n_inner * cap_bytes are now available</font></i>
          <i><font color="#9A1900">// and none are in use</font></i>
          ok <font color="#990000">&amp;=</font> omp_alloc<font color="#990000">::</font><b><font color="#000000">inuse</font></b><font color="#990000">(</font>thread<font color="#990000">)</font> <font color="#990000">==</font> static_inuse<font color="#990000">;</font>
          ok <font color="#990000">&amp;=</font> omp_alloc<font color="#990000">::</font><b><font color="#000000">available</font></b><font color="#990000">(</font>thread<font color="#990000">)</font> <font color="#990000">==</font> n_inner <font color="#990000">*</font> cap_bytes<font color="#990000">;</font>
     <font color="#FF0000">}</font>
     <i><font color="#9A1900">// return all the available memory to the system</font></i>
     omp_alloc<font color="#990000">::</font><b><font color="#000000">free_available</font></b><font color="#990000">(</font>thread<font color="#990000">);</font>
     ok <font color="#990000">&amp;=</font> <font color="#990000">!</font> CppAD<font color="#990000">::</font><b><font color="#000000">memory_leak</font></b><font color="#990000">();</font>

     <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
<font color="#FF0000">}</font>

<b><font color="#0000FF">class</font></b> <font color="#008080">my_char</font> <font color="#FF0000">{</font>
<b><font color="#0000FF">public</font></b><font color="#990000">:</font>
     <font color="#009900">char</font> ch_ <font color="#990000">;</font>
     <b><font color="#000000">my_char</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font> <font color="#990000">:</font> <b><font color="#000000">ch_</font></b><font color="#990000">(</font><font color="#FF0000">' '</font><font color="#990000">)</font>
     <font color="#FF0000">{</font> <font color="#FF0000">}</font>
     <b><font color="#000000">my_char</font></b><font color="#990000">(</font><b><font color="#0000FF">const</font></b> my_char<font color="#990000">&amp;</font> my_ch<font color="#990000">)</font> <font color="#990000">:</font> <b><font color="#000000">ch_</font></b><font color="#990000">(</font>my_ch<font color="#990000">.</font>ch_<font color="#990000">)</font>
     <font color="#FF0000">{</font> <font color="#FF0000">}</font>
<font color="#FF0000">}</font><font color="#990000">;</font>

<font color="#009900">bool</font> <b><font color="#000000">omp_alloc_array</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
<font color="#FF0000">{</font>    <font color="#009900">bool</font> ok <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
     <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>omp_alloc<font color="#990000">;</font>
     <font color="#008080">size_t</font> i<font color="#990000">;</font>

     <i><font color="#9A1900">// check initial memory values</font></i>
     <font color="#008080">size_t</font> thread <font color="#990000">=</font> omp_alloc<font color="#990000">::</font><b><font color="#000000">get_thread_num</font></b><font color="#990000">();</font>
     ok <font color="#990000">&amp;=</font> thread <font color="#990000">==</font> <font color="#993399">0</font><font color="#990000">;</font>
     ok <font color="#990000">&amp;=</font> <font color="#990000">!</font> CppAD<font color="#990000">::</font><b><font color="#000000">memory_leak</font></b><font color="#990000">();</font>
     <font color="#008080">size_t</font> static_inuse <font color="#990000">=</font> omp_alloc<font color="#990000">::</font><b><font color="#000000">inuse</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">);</font>

     <i><font color="#9A1900">// initial allocation of an array</font></i>
     <font color="#008080">size_t</font>  size_min  <font color="#990000">=</font> <font color="#993399">3</font><font color="#990000">;</font>
     <font color="#008080">size_t</font>  size_one<font color="#990000">;</font>
     <font color="#008080">my_char</font> <font color="#990000">*</font>array_one  <font color="#990000">=</font>
          omp_alloc<font color="#990000">::</font>create_array<font color="#990000">&lt;</font>my_char<font color="#990000">&gt;(</font>size_min<font color="#990000">,</font> size_one<font color="#990000">);</font>

     <i><font color="#9A1900">// check the values and change them to null 'x'</font></i>
     <b><font color="#0000FF">for</font></b><font color="#990000">(</font>i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> size_one<font color="#990000">;</font> i<font color="#990000">++)</font>
     <font color="#FF0000">{</font>    ok <font color="#990000">&amp;=</font> array_one<font color="#990000">[</font>i<font color="#990000">].</font>ch_ <font color="#990000">==</font> <font color="#FF0000">' '</font><font color="#990000">;</font>
          array_one<font color="#990000">[</font>i<font color="#990000">].</font>ch_ <font color="#990000">=</font> <font color="#FF0000">'x'</font><font color="#990000">;</font>
     <font color="#FF0000">}</font>

     <i><font color="#9A1900">// now create a longer array</font></i>
     <font color="#008080">size_t</font> size_two<font color="#990000">;</font>
     <font color="#008080">my_char</font> <font color="#990000">*</font>array_two <font color="#990000">=</font>
          omp_alloc<font color="#990000">::</font>create_array<font color="#990000">&lt;</font>my_char<font color="#990000">&gt;(</font><font color="#993399">2</font> <font color="#990000">*</font> size_min<font color="#990000">,</font> size_two<font color="#990000">);</font>

     <i><font color="#9A1900">// check the values in array one</font></i>
     <b><font color="#0000FF">for</font></b><font color="#990000">(</font>i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> size_one<font color="#990000">;</font> i<font color="#990000">++)</font>
          ok <font color="#990000">&amp;=</font> array_one<font color="#990000">[</font>i<font color="#990000">].</font>ch_ <font color="#990000">==</font> <font color="#FF0000">'x'</font><font color="#990000">;</font>

     <i><font color="#9A1900">// check the values in array two</font></i>
     <b><font color="#0000FF">for</font></b><font color="#990000">(</font>i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> size_two<font color="#990000">;</font> i<font color="#990000">++)</font>
          ok <font color="#990000">&amp;=</font> array_two<font color="#990000">[</font>i<font color="#990000">].</font>ch_ <font color="#990000">==</font> <font color="#FF0000">' '</font><font color="#990000">;</font>

     <i><font color="#9A1900">// check the amount of inuse and available memory</font></i>
     <i><font color="#9A1900">// (an extra size_t value is used for each memory block).</font></i>
     <font color="#008080">size_t</font> check <font color="#990000">=</font> static_inuse <font color="#990000">+</font> <b><font color="#0000FF">sizeof</font></b><font color="#990000">(</font>my_char<font color="#990000">)*(</font>size_one <font color="#990000">+</font> size_two<font color="#990000">);</font>
     ok   <font color="#990000">&amp;=</font> omp_alloc<font color="#990000">::</font><b><font color="#000000">inuse</font></b><font color="#990000">(</font>thread<font color="#990000">)</font> <font color="#990000">-</font> check <font color="#990000">&lt;</font> <b><font color="#0000FF">sizeof</font></b><font color="#990000">(</font>my_char<font color="#990000">);</font>
     ok   <font color="#990000">&amp;=</font> omp_alloc<font color="#990000">::</font><b><font color="#000000">available</font></b><font color="#990000">(</font>thread<font color="#990000">)</font> <font color="#990000">==</font> <font color="#993399">0</font><font color="#990000">;</font>

     <i><font color="#9A1900">// delete the arrays</font></i>
     omp_alloc<font color="#990000">::</font><b><font color="#000000">delete_array</font></b><font color="#990000">(</font>array_one<font color="#990000">);</font>
     omp_alloc<font color="#990000">::</font><b><font color="#000000">delete_array</font></b><font color="#990000">(</font>array_two<font color="#990000">);</font>
     ok   <font color="#990000">&amp;=</font> omp_alloc<font color="#990000">::</font><b><font color="#000000">inuse</font></b><font color="#990000">(</font>thread<font color="#990000">)</font> <font color="#990000">==</font> static_inuse<font color="#990000">;</font>
     check <font color="#990000">=</font> <b><font color="#0000FF">sizeof</font></b><font color="#990000">(</font>my_char<font color="#990000">)*(</font>size_one <font color="#990000">+</font> size_two<font color="#990000">);</font>
     ok   <font color="#990000">&amp;=</font> omp_alloc<font color="#990000">::</font><b><font color="#000000">available</font></b><font color="#990000">(</font>thread<font color="#990000">)</font> <font color="#990000">-</font> check <font color="#990000">&lt;</font> <b><font color="#0000FF">sizeof</font></b><font color="#990000">(</font>my_char<font color="#990000">);</font>

     <i><font color="#9A1900">// free the memory for use by this thread</font></i>
     omp_alloc<font color="#990000">::</font><b><font color="#000000">free_available</font></b><font color="#990000">(</font>thread<font color="#990000">);</font>
     ok <font color="#990000">&amp;=</font> <font color="#990000">!</font> CppAD<font color="#990000">::</font><b><font color="#000000">memory_leak</font></b><font color="#990000">();</font>

     <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
<font color="#FF0000">}</font>
<font color="#FF0000">}</font> <i><font color="#9A1900">// End empty namespace</font></i>

<font color="#009900">bool</font> <b><font color="#000000">omp_alloc</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
<font color="#FF0000">{</font>    <font color="#009900">bool</font> ok  <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
     <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>omp_alloc<font color="#990000">;</font>

     <i><font color="#9A1900">// check initial state of allocator</font></i>
     ok  <font color="#990000">&amp;=</font> omp_alloc<font color="#990000">::</font><b><font color="#000000">get_max_num_threads</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">1</font><font color="#990000">;</font>

     <i><font color="#9A1900">// set the maximum number of threads greater than one</font></i>
     <i><font color="#9A1900">// so that omp_alloc holds onto memory</font></i>
     CppAD<font color="#990000">::</font>omp_alloc<font color="#990000">::</font><b><font color="#000000">set_max_num_threads</font></b><font color="#990000">(</font><font color="#993399">2</font><font color="#990000">);</font>
     ok  <font color="#990000">&amp;=</font> omp_alloc<font color="#990000">::</font><b><font color="#000000">get_max_num_threads</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">2</font><font color="#990000">;</font>
     ok  <font color="#990000">&amp;=</font> <font color="#990000">!</font> CppAD<font color="#990000">::</font><b><font color="#000000">memory_leak</font></b><font color="#990000">();</font>

     <i><font color="#9A1900">// now use memory allocator in state where it holds onto memory</font></i>
     ok   <font color="#990000">&amp;=</font> <b><font color="#000000">omp_alloc_bytes</font></b><font color="#990000">();</font>
     ok   <font color="#990000">&amp;=</font> <b><font color="#000000">omp_alloc_array</font></b><font color="#990000">();</font>

     <i><font color="#9A1900">// check that the tests have not held onto memory</font></i>
     ok  <font color="#990000">&amp;=</font> <font color="#990000">!</font> CppAD<font color="#990000">::</font><b><font color="#000000">memory_leak</font></b><font color="#990000">();</font>

     <i><font color="#9A1900">// set the maximum number of threads back to one</font></i>
     <i><font color="#9A1900">// so that omp_alloc no longer holds onto memory</font></i>
     CppAD<font color="#990000">::</font>omp_alloc<font color="#990000">::</font><b><font color="#000000">set_max_num_threads</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">);</font>

     <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
<font color="#FF0000">}</font>

</tt></pre>
</font></code>
<hr>Input File: example/deprecated/omp_alloc.cpp

</body>
</html>

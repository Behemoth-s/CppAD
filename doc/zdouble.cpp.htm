<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>zdouble: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="zdouble: Example and Test">
<meta name="keywords" id="keywords" content=" zdouble: example test ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_zdouble.cpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://github.com/coin-or/cppad" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="zdouble.htm" target="_top">Prev</a>
</td><td><a href="autotools.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>Appendix</option>
<option>deprecated</option>
<option>zdouble</option>
<option>zdouble.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>Appendix-&gt;</option>
<option>Faq</option>
<option>directory</option>
<option>Theory</option>
<option>glossary</option>
<option>Bib</option>
<option>wish_list</option>
<option>whats_new</option>
<option>deprecated</option>
<option>compare_c</option>
<option>numeric_ad</option>
<option>addon</option>
<option>License</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>deprecated-&gt;</option>
<option>include_deprecated</option>
<option>FunDeprecated</option>
<option>CompareChange</option>
<option>omp_max_thread</option>
<option>TrackNewDel</option>
<option>omp_alloc</option>
<option>memory_leak</option>
<option>epsilon</option>
<option>test_vector</option>
<option>cppad_ipopt_nlp</option>
<option>old_atomic</option>
<option>zdouble</option>
<option>autotools</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>zdouble-&gt;</option>
<option>zdouble.cpp</option>
</select>
</td>
<td>zdouble.cpp</td>
<td>Headings</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@


<center><b><big><big>zdouble: Example and Test</big></big></b></center>
<code><font color="blue"><pre><tt><b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/cppad.hpp&gt;</font>

<b><font color="#0000FF">namespace</font></b> <font color="#FF0000">{</font>
     <b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">class</font></b> <font color="#008080">Base</font><font color="#990000">&gt;</font> <font color="#009900">bool</font> <b><font color="#000000">test_one</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
     <font color="#FF0000">{</font>    <font color="#009900">bool</font> ok <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
          <font color="#008080">Base</font> eps99 <font color="#990000">=</font> <font color="#993399">99</font><font color="#990000">.</font> <font color="#990000">*</font> std<font color="#990000">::</font>numeric_limits<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;::</font><b><font color="#000000">epsilon</font></b><font color="#990000">();</font>

          <b><font color="#0000FF">typedef</font></b> CppAD<font color="#990000">::</font><font color="#008080">AD&lt;Base&gt;</font>   a1type<font color="#990000">;</font>
          <b><font color="#0000FF">typedef</font></b> CppAD<font color="#990000">::</font><font color="#008080">AD&lt;a1type&gt;</font> a2type<font color="#990000">;</font>

          <i><font color="#9A1900">// value during taping</font></i>
          <font color="#008080">size_t</font> n <font color="#990000">=</font> <font color="#993399">2</font><font color="#990000">;</font>
          <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font>Base<font color="#990000">)</font> <b><font color="#000000">x</font></b><font color="#990000">(</font>n<font color="#990000">);</font>
          x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">0.0</font><font color="#990000">;</font>
          x<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">0.0</font><font color="#990000">;</font>

          <i><font color="#9A1900">// declare independent variable</font></i>
          <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font>a2type<font color="#990000">)</font> <b><font color="#000000">a2x</font></b><font color="#990000">(</font>n<font color="#990000">);</font>
          <b><font color="#0000FF">for</font></b> <font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> j<font color="#990000">++)</font>
               a2x<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#000000">a2type</font></b><font color="#990000">(</font> <b><font color="#000000">a1type</font></b><font color="#990000">(</font>x<font color="#990000">[</font>j<font color="#990000">])</font> <font color="#990000">);</font>
          <b><font color="#000000">Independent</font></b><font color="#990000">(</font>a2x<font color="#990000">);</font>

          <i><font color="#9A1900">// zero and one as a2type values</font></i>
          <font color="#008080">a2type</font> a2zero <font color="#990000">=</font> <b><font color="#000000">a2type</font></b><font color="#990000">(</font><font color="#993399">0.0</font><font color="#990000">);</font>
          <font color="#008080">a2type</font> a2one  <font color="#990000">=</font> <b><font color="#000000">a2type</font></b><font color="#990000">(</font><font color="#993399">1.0</font><font color="#990000">);</font>

          <i><font color="#9A1900">// h(x) = x[0] / x[1] if x[1] &gt; x[0] else 1.0</font></i>
          <font color="#008080">a2type</font> h_x <font color="#990000">=</font> <b><font color="#000000">CondExpGt</font></b><font color="#990000">(</font>a2x<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">],</font> a2x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">],</font> a2x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">/</font> a2x<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">],</font> a2one<font color="#990000">);</font>

          <i><font color="#9A1900">// f(x) = h(x) if x[0] &gt; 0.0 else 0.0</font></i>
          <i><font color="#9A1900">//      = x[0] / x[1] if x[1] &gt; x[0]  and x[0] &gt; 0.0</font></i>
          <i><font color="#9A1900">//      = 1.0         if x[0] &gt;= x[1] and x[0] &gt; 0.0</font></i>
          <i><font color="#9A1900">//      = 0.0         if x[0] &lt;= 0.0</font></i>
          <font color="#008080">a2type</font> f_x <font color="#990000">=</font> <b><font color="#000000">CondExpGt</font></b><font color="#990000">(</font>a2x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">],</font> a2zero<font color="#990000">,</font> h_x<font color="#990000">,</font> a2one<font color="#990000">);</font>

          <i><font color="#9A1900">// define the function f(x)</font></i>
          <font color="#008080">size_t</font> m <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">;</font>
          <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font>a2type<font color="#990000">)</font> <b><font color="#000000">a2y</font></b><font color="#990000">(</font>m<font color="#990000">);</font>
          a2y<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> f_x<font color="#990000">;</font>
          CppAD<font color="#990000">::</font><font color="#008080">ADFun&lt;a1type&gt;</font> af1<font color="#990000">;</font>
          af1<font color="#990000">.</font><b><font color="#000000">Dependent</font></b><font color="#990000">(</font>a2x<font color="#990000">,</font> a2y<font color="#990000">);</font>

          <i><font color="#9A1900">// Define function g(x) = gradient of f(x)</font></i>
          <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font>a1type<font color="#990000">)</font> <b><font color="#000000">a1x</font></b><font color="#990000">(</font>n<font color="#990000">),</font> <b><font color="#000000">a1z</font></b><font color="#990000">(</font>n<font color="#990000">),</font> <b><font color="#000000">a1w</font></b><font color="#990000">(</font>m<font color="#990000">);</font>
          <b><font color="#0000FF">for</font></b> <font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> j<font color="#990000">++)</font>
               a1x<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#000000">a1type</font></b><font color="#990000">(</font>x<font color="#990000">[</font>j<font color="#990000">]);</font>
          a1w<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#000000">a1type</font></b><font color="#990000">(</font><font color="#993399">1.0</font><font color="#990000">);</font>
          <b><font color="#000000">Independent</font></b><font color="#990000">(</font>a1x<font color="#990000">);</font>
          af1<font color="#990000">.</font><b><font color="#000000">Forward</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">,</font> a1x<font color="#990000">);</font>
          a1z <font color="#990000">=</font> af1<font color="#990000">.</font><b><font color="#000000">Reverse</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">,</font> a1w<font color="#990000">);</font>
          CppAD<font color="#990000">::</font><font color="#008080">ADFun&lt;Base&gt;</font> g<font color="#990000">;</font>
          g<font color="#990000">.</font><b><font color="#000000">Dependent</font></b><font color="#990000">(</font>a1x<font color="#990000">,</font> a1z<font color="#990000">);</font>

          <i><font color="#9A1900">// check result for a case where f(x) = 0.0;</font></i>
          <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font>Base<font color="#990000">)</font> <b><font color="#000000">z</font></b><font color="#990000">(</font><font color="#993399">2</font><font color="#990000">);</font>
          x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">0.0</font><font color="#990000">;</font>
          x<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">0.0</font><font color="#990000">;</font>
          z    <font color="#990000">=</font> g<font color="#990000">.</font><b><font color="#000000">Forward</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">,</font> x<font color="#990000">);</font>
          ok <font color="#990000">&amp;=</font> z<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">==</font> <font color="#993399">0.0</font><font color="#990000">;</font>
          ok <font color="#990000">&amp;=</font> z<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">==</font> <font color="#993399">0.0</font><font color="#990000">;</font>

          <i><font color="#9A1900">// check result for a case where f(x) = 1.0;</font></i>
          x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">1.0</font><font color="#990000">;</font>
          x<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">0.5</font><font color="#990000">;</font>
          z    <font color="#990000">=</font> g<font color="#990000">.</font><b><font color="#000000">Forward</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">,</font> x<font color="#990000">);</font>
          ok <font color="#990000">&amp;=</font> z<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">==</font> <font color="#993399">0.0</font><font color="#990000">;</font>
          ok <font color="#990000">&amp;=</font> z<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">==</font> <font color="#993399">0.0</font><font color="#990000">;</font>

          <i><font color="#9A1900">// check result for a case where f(x) = x[0] / x[1];</font></i>
          x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">1.0</font><font color="#990000">;</font>
          x<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">2.0</font><font color="#990000">;</font>
          z    <font color="#990000">=</font> g<font color="#990000">.</font><b><font color="#000000">Forward</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">,</font> x<font color="#990000">);</font>
          ok <font color="#990000">&amp;=</font> CppAD<font color="#990000">::</font><b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>z<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">],</font> <font color="#993399">1.0</font><font color="#990000">/</font>x<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">],</font> eps99<font color="#990000">,</font> eps99<font color="#990000">);</font>
          ok <font color="#990000">&amp;=</font> CppAD<font color="#990000">::</font><b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>z<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">],</font> <font color="#990000">-</font> x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]/(</font>x<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]*</font>x<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]),</font> eps99<font color="#990000">,</font> eps99<font color="#990000">);</font>

          <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
     <font color="#FF0000">}</font>
     <font color="#009900">bool</font> <b><font color="#000000">test_two</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
     <font color="#FF0000">{</font>    <font color="#009900">bool</font> ok <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
          <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>zdouble<font color="#990000">;</font>
          <i><font color="#9A1900">//</font></i>
          <font color="#008080">zdouble</font> eps <font color="#990000">=</font> CppAD<font color="#990000">::</font>numeric_limits<font color="#990000">&lt;</font>zdouble<font color="#990000">&gt;::</font><b><font color="#000000">epsilon</font></b><font color="#990000">();</font>
          ok          <font color="#990000">&amp;=</font> eps <font color="#990000">==</font> std<font color="#990000">::</font>numeric_limits<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;::</font><b><font color="#000000">epsilon</font></b><font color="#990000">();</font>
          <i><font color="#9A1900">//</font></i>
          <font color="#008080">zdouble</font> min <font color="#990000">=</font> CppAD<font color="#990000">::</font>numeric_limits<font color="#990000">&lt;</font>zdouble<font color="#990000">&gt;::</font><b><font color="#000000">min</font></b><font color="#990000">();</font>
          ok          <font color="#990000">&amp;=</font> min <font color="#990000">==</font> std<font color="#990000">::</font>numeric_limits<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;::</font><b><font color="#000000">min</font></b><font color="#990000">();</font>
          <i><font color="#9A1900">//</font></i>
          <font color="#008080">zdouble</font> max <font color="#990000">=</font> CppAD<font color="#990000">::</font>numeric_limits<font color="#990000">&lt;</font>zdouble<font color="#990000">&gt;::</font><b><font color="#000000">max</font></b><font color="#990000">();</font>
          ok          <font color="#990000">&amp;=</font> max <font color="#990000">==</font> std<font color="#990000">::</font>numeric_limits<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;::</font><b><font color="#000000">max</font></b><font color="#990000">();</font>
          <i><font color="#9A1900">//</font></i>
          <font color="#008080">zdouble</font> nan <font color="#990000">=</font> CppAD<font color="#990000">::</font>numeric_limits<font color="#990000">&lt;</font>zdouble<font color="#990000">&gt;::</font><b><font color="#000000">quiet_NaN</font></b><font color="#990000">();</font>
          ok          <font color="#990000">&amp;=</font> nan <font color="#990000">!=</font> nan<font color="#990000">;</font>
          <i><font color="#9A1900">//</font></i>
          <font color="#009900">int</font> digits10 <font color="#990000">=</font> CppAD<font color="#990000">::</font>numeric_limits<font color="#990000">&lt;</font>zdouble<font color="#990000">&gt;::</font>digits10<font color="#990000">;</font>
          ok          <font color="#990000">&amp;=</font> digits10 <font color="#990000">==</font> std<font color="#990000">::</font>numeric_limits<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;::</font>digits10<font color="#990000">;</font>
          <i><font color="#9A1900">//</font></i>
          <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
     <font color="#FF0000">}</font>
<font color="#FF0000">}</font>

<font color="#009900">bool</font> <b><font color="#000000">zdouble</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
<font color="#FF0000">{</font>    <font color="#009900">bool</font> ok <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
     <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>AD<font color="#990000">;</font>
     <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>NearEqual<font color="#990000">;</font>
     <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>zdouble<font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     ok <font color="#990000">&amp;=</font> test_one<font color="#990000">&lt;</font>zdouble<font color="#990000">&gt;();</font>
     ok <font color="#990000">&amp;=</font> test_one<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;();</font>
     <i><font color="#9A1900">//</font></i>
     ok <font color="#990000">&amp;=</font> <b><font color="#000000">test_two</font></b><font color="#990000">();</font>
     <i><font color="#9A1900">//</font></i>
     <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
<font color="#FF0000">}</font></tt></pre>
</font></code>
<hr>Input File: example/deprecated/zdouble.cpp

</body>
</html>

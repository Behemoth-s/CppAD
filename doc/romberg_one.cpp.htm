<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'
>
</script>
<head>
<title>One Dimensional Romberg Integration: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="One Dimensional Romberg Integration: Example and Test">
<meta name="keywords" id="keywords" content=" one dimensional romberg integration: example test ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_romberg_one.cpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://coin-or.github.io/CppAD/" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="rombergone.htm" target="_top">Prev</a>
</td><td><a href="rombergmul.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>utility</option>
<option>RombergOne</option>
<option>romberg_one.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>preprocessor</option>
<option>multi_thread</option>
<option>utility</option>
<option>ipopt_solve</option>
<option>Example</option>
<option>speed</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>utility-&gt;</option>
<option>ErrorHandler</option>
<option>NearEqual</option>
<option>speed_test</option>
<option>SpeedTest</option>
<option>time_test</option>
<option>test_boolofvoid</option>
<option>NumericType</option>
<option>CheckNumericType</option>
<option>SimpleVector</option>
<option>CheckSimpleVector</option>
<option>nan</option>
<option>pow_int</option>
<option>Poly</option>
<option>LuDetAndSolve</option>
<option>RombergOne</option>
<option>RombergMul</option>
<option>Runge45</option>
<option>Rosen34</option>
<option>OdeErrControl</option>
<option>OdeGear</option>
<option>OdeGearControl</option>
<option>CppAD_vector</option>
<option>thread_alloc</option>
<option>index_sort</option>
<option>to_string</option>
<option>set_union</option>
<option>sparse_rc</option>
<option>sparse_rcv</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>RombergOne-&gt;</option>
<option>romberg_one.cpp</option>
</select>
</td>
<td>romberg_one.cpp</td>
<td>Headings</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@


<center><b><big><big>One Dimensional Romberg Integration: Example and Test</big></big></b></center>
<code><font color="blue"><pre><tt>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/utility/romberg_one.hpp&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/utility/vector.hpp&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/utility/near_equal.hpp&gt;</font>

<b><font color="#0000FF">namespace</font></b> <font color="#FF0000">{</font>
     <b><font color="#0000FF">class</font></b> <font color="#008080">Fun</font> <font color="#FF0000">{</font>
     <b><font color="#0000FF">private</font></b><font color="#990000">:</font>
          <b><font color="#0000FF">const</font></b> <font color="#008080">size_t</font> degree<font color="#990000">;</font>
     <b><font color="#0000FF">public</font></b><font color="#990000">:</font>
          <i><font color="#9A1900">// constructor</font></i>
          <b><font color="#000000">Fun</font></b><font color="#990000">(</font><font color="#008080">size_t</font> degree_<font color="#990000">)</font> <font color="#990000">:</font> <b><font color="#000000">degree</font></b><font color="#990000">(</font>degree_<font color="#990000">)</font>
          <font color="#FF0000">{</font> <font color="#FF0000">}</font>

          <i><font color="#9A1900">// function F(x) = x^degree</font></i>
          <b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">class</font></b> <font color="#008080">Type</font><font color="#990000">&gt;</font>
          <font color="#008080">Type</font> <b><font color="#0000FF">operator</font></b> <font color="#990000">()</font> <font color="#990000">(</font><b><font color="#0000FF">const</font></b> <font color="#008080">Type</font> <font color="#990000">&amp;</font>x<font color="#990000">)</font>
          <font color="#FF0000">{</font>    <font color="#008080">size_t</font> i<font color="#990000">;</font>
               <font color="#008080">Type</font>   f <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">;</font>
               <b><font color="#0000FF">for</font></b><font color="#990000">(</font>i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> degree<font color="#990000">;</font> i<font color="#990000">++)</font>
                    f <font color="#990000">*=</font> x<font color="#990000">;</font>
               <b><font color="#0000FF">return</font></b> f<font color="#990000">;</font>
          <font color="#FF0000">}</font>
     <font color="#FF0000">}</font><font color="#990000">;</font>
<font color="#FF0000">}</font>

<font color="#009900">bool</font> <b><font color="#000000">RombergOne</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
<font color="#FF0000">{</font>    <font color="#009900">bool</font> ok <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
     <font color="#008080">size_t</font> i<font color="#990000">;</font>

     <font color="#008080">size_t</font> degree <font color="#990000">=</font> <font color="#993399">4</font><font color="#990000">;</font>
     <font color="#008080">Fun</font> <b><font color="#000000">F</font></b><font color="#990000">(</font>degree<font color="#990000">);</font>

     <i><font color="#9A1900">// arguments to RombergOne</font></i>
     <font color="#009900">double</font> a <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">.;</font>
     <font color="#009900">double</font> b <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">.;</font>
     <font color="#008080">size_t</font> n <font color="#990000">=</font> <font color="#993399">4</font><font color="#990000">;</font>
     <font color="#008080">size_t</font> p<font color="#990000">;</font>
     <font color="#009900">double</font> r<font color="#990000">,</font> e<font color="#990000">;</font>

     <i><font color="#9A1900">// int_a^b F(x) dx = [ b^(degree+1) - a^(degree+1) ] / (degree+1)</font></i>
     <font color="#009900">double</font> bpow <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">.;</font>
     <font color="#009900">double</font> apow <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">.;</font>
     <b><font color="#0000FF">for</font></b><font color="#990000">(</font>i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;=</font> degree<font color="#990000">;</font> i<font color="#990000">++)</font>
     <font color="#FF0000">{</font>    bpow <font color="#990000">*=</font> b<font color="#990000">;</font>
          apow <font color="#990000">*=</font> a<font color="#990000">;</font>
     <font color="#FF0000">}</font>
     <font color="#009900">double</font> check <font color="#990000">=</font> <font color="#990000">(</font>bpow <font color="#990000">-</font> apow<font color="#990000">)</font> <font color="#990000">/</font> <font color="#990000">(</font>degree<font color="#990000">+</font><font color="#993399">1</font><font color="#990000">);</font>

     <i><font color="#9A1900">// step size corresponding to r</font></i>
     <font color="#009900">double</font> step <font color="#990000">=</font> <font color="#990000">(</font>b <font color="#990000">-</font> a<font color="#990000">)</font> <font color="#990000">/</font> <b><font color="#000000">exp</font></b><font color="#990000">(</font><b><font color="#000000">log</font></b><font color="#990000">(</font><font color="#993399">2</font><font color="#990000">.)*(</font>n<font color="#990000">-</font><font color="#993399">1</font><font color="#990000">));</font>
     <i><font color="#9A1900">// step size corresponding to error estimate</font></i>
     step <font color="#990000">*=</font> <font color="#993399">2</font><font color="#990000">.;</font>
     <i><font color="#9A1900">// step size raised to a power</font></i>
     <font color="#009900">double</font> spow <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">;</font>

     <b><font color="#0000FF">for</font></b><font color="#990000">(</font>p <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> p <font color="#990000">&lt;</font> n<font color="#990000">;</font> p<font color="#990000">++)</font>
     <font color="#FF0000">{</font>    spow <font color="#990000">=</font> spow <font color="#990000">*</font> step <font color="#990000">*</font> step<font color="#990000">;</font>

          r <font color="#990000">=</font> CppAD<font color="#990000">::</font><b><font color="#000000">RombergOne</font></b><font color="#990000">(</font>F<font color="#990000">,</font> a<font color="#990000">,</font> b<font color="#990000">,</font> n<font color="#990000">,</font> p<font color="#990000">,</font> e<font color="#990000">);</font>

          ok  <font color="#990000">&amp;=</font> e <font color="#990000">&lt;</font> <font color="#990000">(</font>degree<font color="#990000">+</font><font color="#993399">1</font><font color="#990000">)</font> <font color="#990000">*</font> spow<font color="#990000">;</font>
          ok  <font color="#990000">&amp;=</font> CppAD<font color="#990000">::</font><b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>check<font color="#990000">,</font> r<font color="#990000">,</font> <font color="#993399">0</font><font color="#990000">.,</font> e<font color="#990000">);</font>
     <font color="#FF0000">}</font>

     <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
<font color="#FF0000">}</font>
</tt></pre>
</font></code>
<hr>Input File: example/utility/romberg_one.cpp

</body>
</html>

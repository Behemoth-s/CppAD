<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Source: sparse_hes_fun</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Source: sparse_hes_fun">
<meta name="keywords" id="keywords" content=" source: sparse_hes_fun source ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_sparse_hes_fun.hpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="../index.html" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="sparse_hes_fun.cpp.htm" target="_top">Prev</a>
</td><td><a href="uniform_01.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>speed</option>
<option>speed_utility</option>
<option>sparse_hes_fun</option>
<option>sparse_hes_fun.hpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>speed-&gt;</option>
<option>speed_main</option>
<option>speed_utility</option>
<option>speed_double</option>
<option>speed_adolc</option>
<option>speed_cppad</option>
<option>speed_fadbad</option>
<option>speed_sacado</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>speed_utility-&gt;</option>
<option>det_by_lu</option>
<option>det_of_minor</option>
<option>det_by_minor</option>
<option>det_33</option>
<option>det_grad_33</option>
<option>mat_sum_sq</option>
<option>ode_evaluate</option>
<option>sparse_jac_fun</option>
<option>sparse_hes_fun</option>
<option>uniform_01</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>sparse_hes_fun-&gt;</option>
<option>sparse_hes_fun.cpp</option>
<option>sparse_hes_fun.hpp</option>
</select>
</td>
<td>sparse_hes_fun.hpp</td>
<td>Headings</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<center><b><big><big>Source: sparse_hes_fun</big></big></b></center>
<code><font color="blue"># ifndef CPPAD_SPARSE_HES_FUN_HPP
<code><span style='white-space: nowrap'><br>
</span></code># define CPPAD_SPARSE_HES_FUN_HPP

<pre><tt><b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/core/cppad_assert.hpp&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/utility/check_numeric_type.hpp&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/utility/vector.hpp&gt;</font>

<i><font color="#9A1900">// following needed by gcc under fedora 17 so that exp(double) is defined</font></i>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/base_require.hpp&gt;</font>

<b><font color="#0000FF">namespace</font></b> CppAD <font color="#FF0000">{</font>
     <b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">class</font></b> <font color="#008080">Float</font><font color="#990000">,</font> <b><font color="#0000FF">class</font></b> <font color="#008080">FloatVector</font><font color="#990000">&gt;</font>
     <font color="#009900">void</font> <b><font color="#000000">sparse_hes_fun</font></b><font color="#990000">(</font>
          <font color="#008080">size_t</font>                       n    <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> FloatVector<font color="#990000">&amp;</font>           x    <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>size_t<font color="#990000">&gt;&amp;</font> row  <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>size_t<font color="#990000">&gt;&amp;</font> col  <font color="#990000">,</font>
          <font color="#008080">size_t</font>                       p    <font color="#990000">,</font>
          FloatVector<font color="#990000">&amp;</font>                fp    <font color="#990000">)</font>
     <font color="#FF0000">{</font>
          <i><font color="#9A1900">// check numeric type specifications</font></i>
          CheckNumericType<font color="#990000">&lt;</font>Float<font color="#990000">&gt;();</font>

          <i><font color="#9A1900">// check value of p</font></i>
          <b><font color="#000000">CPPAD_ASSERT_KNOWN</font></b><font color="#990000">(</font>
               p <font color="#990000">==</font> <font color="#993399">0</font> <font color="#990000">||</font> p <font color="#990000">==</font> <font color="#993399">2</font><font color="#990000">,</font>
               <font color="#FF0000">"sparse_hes_fun: p != 0 and p != 2"</font>
          <font color="#990000">);</font>

          <font color="#008080">size_t</font> K <font color="#990000">=</font> row<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font>
          <font color="#008080">size_t</font> i<font color="#990000">,</font> j<font color="#990000">,</font> k<font color="#990000">;</font>
          <b><font color="#0000FF">if</font></b><font color="#990000">(</font> p <font color="#990000">==</font> <font color="#993399">0</font> <font color="#990000">)</font>
               fp<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#000000">Float</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">);</font>
          <b><font color="#0000FF">else</font></b>
          <font color="#FF0000">{</font>    <b><font color="#0000FF">for</font></b><font color="#990000">(</font>k <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> k <font color="#990000">&lt;</font> K<font color="#990000">;</font> k<font color="#990000">++)</font>
                    fp<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#000000">Float</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">);</font>
          <font color="#FF0000">}</font>

          <i><font color="#9A1900">// determine which diagonal entries are present in row[k], col[k]</font></i>
          CppAD<font color="#990000">::</font><font color="#008080">vector&lt;size_t&gt;</font> <b><font color="#000000">diagonal</font></b><font color="#990000">(</font>n<font color="#990000">);</font>
          <b><font color="#0000FF">for</font></b><font color="#990000">(</font>i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> n<font color="#990000">;</font> i<font color="#990000">++)</font>
               diagonal<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">=</font> K<font color="#990000">;</font>   <i><font color="#9A1900">// no diagonal entry for this row</font></i>
          <b><font color="#0000FF">for</font></b><font color="#990000">(</font>k <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> k <font color="#990000">&lt;</font> K<font color="#990000">;</font> k<font color="#990000">++)</font>
          <font color="#FF0000">{</font>    <b><font color="#0000FF">if</font></b><font color="#990000">(</font> row<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">==</font> col<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">)</font>
               <font color="#FF0000">{</font>    <b><font color="#000000">CPPAD_ASSERT_UNKNOWN</font></b><font color="#990000">(</font> diagonal<font color="#990000">[</font>row<font color="#990000">[</font>k<font color="#990000">]]</font> <font color="#990000">==</font> K <font color="#990000">);</font>
                    <i><font color="#9A1900">// index of the diagonal entry</font></i>
                    diagonal<font color="#990000">[</font> row<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">]</font> <font color="#990000">=</font> k<font color="#990000">;</font>
               <font color="#FF0000">}</font>
          <font color="#FF0000">}</font>

          <i><font color="#9A1900">// determine which entries must be multiplied by a factor of two</font></i>
          CppAD<font color="#990000">::</font><font color="#008080">vector&lt;Float&gt;</font> <b><font color="#000000">factor</font></b><font color="#990000">(</font>K<font color="#990000">);</font>
          <b><font color="#0000FF">for</font></b><font color="#990000">(</font>k <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> k <font color="#990000">&lt;</font> K<font color="#990000">;</font> k<font color="#990000">++)</font>
          <font color="#FF0000">{</font>    factor<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#000000">Float</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">);</font>
               <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> k1 <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> k1 <font color="#990000">&lt;</font> K<font color="#990000">;</font> k1<font color="#990000">++)</font>
               <font color="#FF0000">{</font>    <font color="#009900">bool</font> reflected <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
                    reflected <font color="#990000">&amp;=</font> k <font color="#990000">!=</font> k1<font color="#990000">;</font>
                    reflected <font color="#990000">&amp;=</font> row<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">!=</font> col<font color="#990000">[</font>k<font color="#990000">];</font>
                    reflected <font color="#990000">&amp;=</font> row<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">==</font> col<font color="#990000">[</font>k1<font color="#990000">];</font>
                    reflected <font color="#990000">&amp;=</font> col<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">==</font> row<font color="#990000">[</font>k1<font color="#990000">];</font>
                    <b><font color="#0000FF">if</font></b><font color="#990000">(</font> reflected <font color="#990000">)</font>
                         factor<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#000000">Float</font></b><font color="#990000">(</font><font color="#993399">2</font><font color="#990000">);</font>
               <font color="#FF0000">}</font>
          <font color="#FF0000">}</font>

          <font color="#008080">Float</font> t<font color="#990000">;</font>
          <b><font color="#0000FF">for</font></b><font color="#990000">(</font>k <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> k <font color="#990000">&lt;</font> K<font color="#990000">;</font> k<font color="#990000">++)</font>
          <font color="#FF0000">{</font>    i    <font color="#990000">=</font> row<font color="#990000">[</font>k<font color="#990000">];</font>
               j    <font color="#990000">=</font> col<font color="#990000">[</font>k<font color="#990000">];</font>
               t    <font color="#990000">=</font> <b><font color="#000000">exp</font></b><font color="#990000">(</font> x<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">*</font> x<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">);</font>
               <b><font color="#0000FF">switch</font></b><font color="#990000">(</font>p<font color="#990000">)</font>
               <font color="#FF0000">{</font>
                    <b><font color="#0000FF">case</font></b> <font color="#993399">0</font><font color="#990000">:</font>
                    fp<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">+=</font> t<font color="#990000">;</font>
                    <b><font color="#0000FF">break</font></b><font color="#990000">;</font>

                    <b><font color="#0000FF">case</font></b> <font color="#993399">2</font><font color="#990000">:</font>
                    <b><font color="#0000FF">if</font></b><font color="#990000">(</font> i <font color="#990000">==</font> j <font color="#990000">)</font>
                    <font color="#FF0000">{</font>    <i><font color="#9A1900">// dt_dxi = 2.0 * xi * t</font></i>
                         fp<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">+=</font> <font color="#990000">(</font> <b><font color="#000000">Float</font></b><font color="#990000">(</font><font color="#993399">2</font><font color="#990000">)</font> <font color="#990000">+</font> <b><font color="#000000">Float</font></b><font color="#990000">(</font><font color="#993399">4</font><font color="#990000">)</font> <font color="#990000">*</font> x<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">*</font> x<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">)</font> <font color="#990000">*</font> t<font color="#990000">;</font>
                    <font color="#FF0000">}</font>
                    <b><font color="#0000FF">else</font></b>
                    <font color="#FF0000">{</font>    <i><font color="#9A1900">// dt_dxi = xj * t</font></i>
                         fp<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">+=</font> factor<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">*</font> <font color="#990000">(</font> <b><font color="#000000">Float</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">)</font> <font color="#990000">+</font> x<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">*</font> x<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">)</font> <font color="#990000">*</font> t<font color="#990000">;</font>
                         <b><font color="#0000FF">if</font></b><font color="#990000">(</font> diagonal<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">!=</font> K <font color="#990000">)</font>
                         <font color="#FF0000">{</font>    <font color="#008080">size_t</font> ki <font color="#990000">=</font> diagonal<font color="#990000">[</font>i<font color="#990000">];</font>
                              fp<font color="#990000">[</font>ki<font color="#990000">]</font> <font color="#990000">+=</font> x<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">*</font> x<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">*</font> t<font color="#990000">;</font>
                         <font color="#FF0000">}</font>
                         <b><font color="#0000FF">if</font></b><font color="#990000">(</font> diagonal<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">!=</font> K <font color="#990000">)</font>
                         <font color="#FF0000">{</font>    <font color="#008080">size_t</font> kj <font color="#990000">=</font> diagonal<font color="#990000">[</font>j<font color="#990000">];</font>
                              fp<font color="#990000">[</font>kj<font color="#990000">]</font> <font color="#990000">+=</font> x<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">*</font> x<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">*</font> t<font color="#990000">;</font>
                         <font color="#FF0000">}</font>
                    <font color="#FF0000">}</font>
                    <b><font color="#0000FF">break</font></b><font color="#990000">;</font>
               <font color="#FF0000">}</font>
          <font color="#FF0000">}</font>

     <font color="#FF0000">}</font>
<font color="#FF0000">}</font></tt></pre>
# endif
</font></code>


<hr>Input File: omh/sparse_hes_fun.omh

</body>
</html>
